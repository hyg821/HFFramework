// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: phzroom.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Paohuzi.Protobuf {

  /// <summary>Holder for reflection information generated from phzroom.proto</summary>
  public static partial class PhzroomReflection {

    #region Descriptor
    /// <summary>File descriptor for phzroom.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PhzroomReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1waHpyb29tLnByb3RvEhBwYW9odXppLnByb3RvYnVmIisKDExvZ2luUmVx",
            "dWVzdBILCgNrZXkYASABKAkSDgoGdXNlcklkGAIgASgDIhkKCUxvZ2luUmVz",
            "cBIMCgRjb2RlGAEgASgFIp0CCgpDcmVhdGVSb29tEiYKBXJ1bGVzGAEgASgL",
            "MhcucGFvaHV6aS5wcm90b2J1Zi5SdWxlcxITCgtwbGF5ZXJDb3VudBgCIAEo",
            "BRIUCgxnYW1lUGxheVR5cGUYAyABKAUSEAoIbWF4Um91bmQYBCABKAUSEAoI",
            "bWF4U2NvcmUYBSABKAUSEAoIY2hvbmdUdW4YBiABKAUSEQoJZmFuZ1p1b2Jp",
            "GAcgASgFEiwKCGxvYWN0aW9uGAggASgLMhoucGFvaHV6aS5wcm90b2J1Zi5M",
            "b2NhdGlvbhIOCgZnYW1lSWQYCSABKAUSEwoLY29tbXVuaXR5SWQYCiABKAUS",
            "DgoGYWFUeXBlGAsgASgFEhAKCGNyZWF0ZUlkGAwgASgJIi8KBFBsYXkSDAoE",
            "dHlwZRgBIAEoBRIMCgRmbGFnGAIgASgFEgsKA3ZhbBgDIAEoCSJICghKb2lu",
            "Um9vbRIOCgZyb29tSWQYASABKAkSLAoIbG9hY3Rpb24YAiABKAsyGi5wYW9o",
            "dXppLnByb3RvYnVmLkxvY2F0aW9uIigKCURpc2JhbmRPcBILCgNvcHQYASAB",
            "KAUSDgoGdXNlcklkGAIgASgDItYBCghSb29tSW5mbxItCgdtZW1iZXJzGAEg",
            "AygLMhwucGFvaHV6aS5wcm90b2J1Zi5Sb29tTWVtYmVyEg4KBnJvb21JZBgC",
            "IAEoCRIOCgZ1c2VySWQYAyABKAMSEAoIbm93Um91bmQYBCABKAUSEAoIbWF4",
            "Um91bmQYBSABKAUSDwoHaXNTdGFydBgGIAEoCBIMCgRjb2RlGAcgASgFEhEK",
            "CWdhbWVTdGF0ZRgIIAEoCBITCgtwbGF5ZXJDb3VudBgJIAEoBRIQCghwbGF5",
            "VHlwZRgKIAEoBSL+AQoKUm9vbU1lbWJlchISCgpoZWFkSW1nVXJsGAEgASgJ",
            "EgwKBG5hbWUYAiABKAkSDgoGdXNlcklkGAMgASgDEgwKBGh1eGkYBCABKAUS",
            "DQoFc2NvcmUYBSABKAUSEAoIcG9zaXRpb24YBiABKAUSDwoHaXNSZWFkeRgH",
            "IAEoCBIQCghpc0JhbmtlchgIIAEoCBIPCgdtYXhIdXhpGAkgASgFEg8KB2h1",
            "dGltZXMYCiABKAUSDwoHaXNMZWF2ZRgLIAEoCBIsCghsb2FjdGlvbhgMIAEo",
            "CzIaLnBhb2h1emkucHJvdG9idWYuTG9jYXRpb24SCwoDc2V4GA0gASgJIqMB",
            "CgxHYW1lRmluaXNoZWQSLQoHbWVtYmVycxgBIAMoCzIcLnBhb2h1emkucHJv",
            "dG9idWYuUm9vbU1lbWJlchIOCgZyb29tSWQYAiABKAkSEQoJc3RhcnRUaW1l",
            "GAMgASgDEg8KB2VuZFRpbWUYBCABKAMSDQoFcm91bmQYBSABKAUSEAoIbWF4",
            "Um91bmQYBiABKAUSDwoHaXNGb3JjZRgHIAEoCCI5CglMaWNlbnNpbmcSEQoJ",
            "aGFuZENhcmRzGAEgAygFEhkKEXN1cnBsdXNDYXJkQW1vdW50GAIgASgFImsK",
            "DVNob3dPcGVyYXRpb24SKgoHY2hpTGlzdBgBIAMoCzIZLnBhb2h1emkucHJv",
            "dG9idWYuQmFzZUNoaRIOCgZjYXJkSWQYAiABKAUSDwoHaGFzUGVuZxgEIAEo",
            "CBINCgVjYW5IdRgGIAEoCCI4CgpDaGlSZXF1ZXN0EioKB2NoaUxpc3QYASAD",
            "KAsyGS5wYW9odXppLnByb3RvYnVmLkxhc3RDaGkiSgoHQmFzZUNoaRIuCgtu",
            "ZXh0Q2hpTGlzdBgBIAMoCzIZLnBhb2h1emkucHJvdG9idWYuTmV4dENoaRIP",
            "CgdjYXJkSWRzGAIgAygFIkoKB05leHRDaGkSLgoLbGFzdENoaUxpc3QYASAD",
            "KAsyGS5wYW9odXppLnByb3RvYnVmLkxhc3RDaGkSDwoHY2FyZElkcxgCIAMo",
            "BSIaCgdMYXN0Q2hpEg8KB2NhcmRJZHMYASADKAUiVQoJQ2hpUmVzdWx0EioK",
            "B2NoaUxpc3QYASADKAsyGS5wYW9odXppLnByb3RvYnVmLkxhc3RDaGkSDgoG",
            "dXNlcklkGAIgASgDEgwKBGh1eGkYAyABKAUiZgoCSHUSKgoFY2FyZHMYASAD",
            "KAsyGy5wYW9odXppLnByb3RvYnVmLkhhbmRDYXJkcxIQCgh3aW5uZXJJZBgC",
            "IAEoAxIOCgZjYXJkSWQYAyABKAUSEgoKaXNGaW5pc2hlZBgEIAEoCCIsCglI",
            "YW5kQ2FyZHMSDwoHY2FyZElkcxgBIAMoBRIOCgZ1c2VySWQYAiABKAMihQIK",
            "D0JvYXJkU2V0dGxlbWVudBIxCgxwYWl4aW5nSW5mb3MYASADKAsyGy5wYW9o",
            "dXppLnByb3RvYnVmLkh1cGFpeGluZxIxCg1taW5ndGFuZ0luZm9zGAIgAygL",
            "MhoucGFvaHV6aS5wcm90b2J1Zi5NaW5nVGFuZxIvCglzZXR0SW5mb3MYAyAD",
            "KAsyHC5wYW9odXppLnByb3RvYnVmLlNldHRsZW1lbnQSEQoJZGlDYXJkSWRz",
            "GAQgAygFEhAKCGh1Q2FyZElkGAUgASgFEgwKBGh1eGkYBiABKAUSCwoDdHVu",
            "GAcgASgFEgsKA2ZhbhgIIAEoBRIOCgZpc1ppbW8YCSABKAgiSwoKU2V0dGxl",
            "bWVudBIOCgZ1c2VySWQYASABKAMSDgoGY2hhbmdlGAIgASgFEg0KBXNjb3Jl",
            "GAMgASgFEg4KBndlaUlkcxgEIAMoBSI/CghNaW5nVGFuZxIMCgRuYW1lGAEg",
            "ASgJEgsKA2ZhbhgCIAEoBRILCgN0dW4YAyABKAUSCwoDbXVsGAQgASgFIkgK",
            "CUh1cGFpeGluZxIPCgdjYXJkSWRzGAEgAygFEgwKBHR5cGUYAiABKAUSDgoG",
            "Y2FyZElkGAMgASgFEgwKBGh1eGkYBCABKAUi8gEKBlJldHVybhI2CgptZW1i",
            "ZXJJbmZvGAEgAygLMiIucGFvaHV6aS5wcm90b2J1Zi5SZXR1cm5NZW1iZXJJ",
            "bmZvEiwKCHJvb21JbmZvGAIgASgLMhoucGFvaHV6aS5wcm90b2J1Zi5Sb29t",
            "SW5mbxIZChFzdXJwbHVzQ2FyZEFtb3VudBgDIAEoBRIRCgljcmVhdGVkSWQY",
            "BCABKAMSHAoUbm93T3BlcmF0aW9uUGxheWVySWQYBSABKAMSDgoGY2FyZElk",
            "GAYgASgFEhQKDG5vd09wZXJhdGlvbhgHIAEoBRIQCghjaG9uZ3R1bhgIIAEo",
            "BSLhAQoQUmV0dXJuTWVtYmVySW5mbxI+Cg9sZWZ0SGFuZFBhaXhpbmcYASAD",
            "KAsyJS5wYW9odXppLnByb3RvYnVmLkxlZnRIYW5kUGFpeGluZ0luZm8SEgoK",
            "cHV0Q2FyZElkcxgCIAMoBRITCgtoYW5kQ2FyZElkcxgDIAMoBRI2Cg1zaG93",
            "T3BlcmF0aW9uGAQgASgLMh8ucGFvaHV6aS5wcm90b2J1Zi5TaG93T3BlcmF0",
            "aW9uEiwKCHRpbmdMaXN0GAUgASgLMhoucGFvaHV6aS5wcm90b2J1Zi5UaW5n",
            "TGlzdCJEChNMZWZ0SGFuZFBhaXhpbmdJbmZvEg8KB2NhcmRJZHMYASADKAUS",
            "DAoEdHlwZRgCIAEoBRIOCgZjYXJkSWQYAyABKAUiVQoCVGkSDQoFdGlJZHMY",
            "ASADKAUSDgoGdXNlcklkGAIgASgDEgwKBGh1eGkYAyABKAUSDgoGdGlUeXBl",
            "GAQgASgFEhIKCmlzQ2hvbmdwYW8YBSABKAgiWAoDUGFvEg4KBnVzZXJJZBgB",
            "IAEoAxIPCgdwYW9UeXBlGAIgASgFEg4KBmNhcmRJZBgDIAEoBRIMCgRodXhp",
            "GAQgASgFEhIKCmlzQ2hvbmdwYW8YBSABKAgiOAoIVGluZ0xpc3QSLAoIdGlu",
            "Z0xpc3QYASADKAsyGi5wYW9odXppLnByb3RvYnVmLlRpbmdJbmZvIigKCFRp",
            "bmdJbmZvEg4KBmNhcmRJZBgBIAEoBRIMCgR0eXBlGAIgASgFIlIKBVJ1bGVz",
            "EiUKBXJ1bGVzGAEgAygLMhYucGFvaHV6aS5wcm90b2J1Zi5QbGF5EhAKCGNo",
            "b25ndHVuGAIgASgFEhAKCG1heFNjb3JlGAMgASgFIkEKCVVzZXJMZWF2ZRIO",
            "CgZ1c2VySWQYASABKAMSEgoKc3RhcnRTdGF0ZRgCIAEoBRIQCghpc1JlbW92",
            "ZRgDIAEoCCKLAgoMTWVzc2FnZVZpZGVvEjkKB3JlY29yZHMYASADKAsyKC5w",
            "YW9odXppLnByb3RvYnVmLk1lc3NhZ2VSZWNvcmRPcGVyYXRpb24SMwoFc3Rh",
            "cnQYAiABKAsyJC5wYW9odXppLnByb3RvYnVmLk1lc3NhZ2VSZWNvcmRTdGFy",
            "dBIvCgNlbmQYAyABKAsyIi5wYW9odXppLnByb3RvYnVmLk1lc3NhZ2VSZWNv",
            "cmRFbmQSJgoFcnVsZXMYBCABKAsyFy5wYW9odXppLnByb3RvYnVmLlJ1bGVz",
            "Eg4KBnJvb21JZBgFIAEoCRIQCghtYXhSb3VuZBgGIAEoBRIQCghjdXJSb3Vu",
            "ZBgHIAEoBSJzChJNZXNzYWdlUmVjb3JkU3RhcnQSLQoHbWVtYmVycxgBIAMo",
            "CzIcLnBhb2h1emkucHJvdG9idWYuUm9vbU1lbWJlchIuCglsaWNlbnNpbmcY",
            "AiADKAsyGy5wYW9odXppLnByb3RvYnVmLkxpY2Vuc2luZyKLAQoQTWVzc2Fn",
            "ZVJlY29yZEVuZBI1CgpzZXR0bGVtZW50GAEgASgLMiEucGFvaHV6aS5wcm90",
            "b2J1Zi5Cb2FyZFNldHRsZW1lbnQSMAoLaGFuZENhcmRJZHMYAiADKAsyGy5w",
            "YW9odXppLnByb3RvYnVmLkhhbmRDYXJkcxIOCgZ1c2VySWQYAyABKAMihwIK",
            "Fk1lc3NhZ2VSZWNvcmRPcGVyYXRpb24SRAoOc2hvd09wZXJhdGlvbnMYASAD",
            "KAsyLC5wYW9odXppLnByb3RvYnVmLk1lc3NhZ2VSZWNvcmRTaG93T3BlcmF0",
            "aW9uEi0KCmNoaUNhcmRJZHMYAiADKAsyGS5wYW9odXppLnByb3RvYnVmLkxh",
            "c3RDaGkSDgoGdGlMaXN0GAMgAygFEg4KBnVzZXJJZBgEIAEoAxIRCgltZXNz",
            "YWdlSWQYBSABKAUSDgoGY2FyZElkGAYgASgFEhIKCmNhcmRBbW91bnQYByAB",
            "KAUSDAoEaHV4aRgIIAEoBRITCgtwYW9PclRpVHlwZRgJIAEoBSJAChpNZXNz",
            "YWdlUmVjb3JkU2hvd09wZXJhdGlvbhISCgpvcGVyYXRpb25zGAEgAygFEg4K",
            "BnVzZXJJZBgCIAEoAyJNCghMb2NhdGlvbhIRCglsb25naXR1ZGUYAiABKAkS",
            "EAoIbGF0aXR1ZGUYAyABKAkSEAoIbG9jYXRpb24YBCABKAkSCgoCaXAYBSAB",
            "KAkiTgoOVXBkYXRlTG9jYXRpb24SLAoIbG9jYXRpb24YASABKAsyGi5wYW9o",
            "dXppLnByb3RvYnVmLkxvY2F0aW9uEg4KBnVzZXJJZBgCIAEoAyJjCgxEaXNi",
            "YW5kU2hvd3MSKQoEb3B0cxgBIAMoCzIbLnBhb2h1emkucHJvdG9idWYuRGlz",
            "YmFuZE9wEhMKC2FwcGx5VXNlcklkGAIgASgDEhMKC3N1cnBsdXNUaW1lGAMg",
            "ASgFQi0KHWNvbS5ob29sYWkuY2VudGVyc2RrLnByb3RvYnVmQgxQSFpSb29t",
            "UHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.LoginRequest), global::Paohuzi.Protobuf.LoginRequest.Parser, new[]{ "Key", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.LoginResp), global::Paohuzi.Protobuf.LoginResp.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.CreateRoom), global::Paohuzi.Protobuf.CreateRoom.Parser, new[]{ "Rules", "PlayerCount", "GamePlayType", "MaxRound", "MaxScore", "ChongTun", "FangZuobi", "Loaction", "GameId", "CommunityId", "AaType", "CreateId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.Play), global::Paohuzi.Protobuf.Play.Parser, new[]{ "Type", "Flag", "Val" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.JoinRoom), global::Paohuzi.Protobuf.JoinRoom.Parser, new[]{ "RoomId", "Loaction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.DisbandOp), global::Paohuzi.Protobuf.DisbandOp.Parser, new[]{ "Opt", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.RoomInfo), global::Paohuzi.Protobuf.RoomInfo.Parser, new[]{ "Members", "RoomId", "UserId", "NowRound", "MaxRound", "IsStart", "Code", "GameState", "PlayerCount", "PlayType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.RoomMember), global::Paohuzi.Protobuf.RoomMember.Parser, new[]{ "HeadImgUrl", "Name", "UserId", "Huxi", "Score", "Position", "IsReady", "IsBanker", "MaxHuxi", "Hutimes", "IsLeave", "Loaction", "Sex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.GameFinished), global::Paohuzi.Protobuf.GameFinished.Parser, new[]{ "Members", "RoomId", "StartTime", "EndTime", "Round", "MaxRound", "IsForce" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.Licensing), global::Paohuzi.Protobuf.Licensing.Parser, new[]{ "HandCards", "SurplusCardAmount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.ShowOperation), global::Paohuzi.Protobuf.ShowOperation.Parser, new[]{ "ChiList", "CardId", "HasPeng", "CanHu" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.ChiRequest), global::Paohuzi.Protobuf.ChiRequest.Parser, new[]{ "ChiList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.BaseChi), global::Paohuzi.Protobuf.BaseChi.Parser, new[]{ "NextChiList", "CardIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.NextChi), global::Paohuzi.Protobuf.NextChi.Parser, new[]{ "LastChiList", "CardIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.LastChi), global::Paohuzi.Protobuf.LastChi.Parser, new[]{ "CardIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.ChiResult), global::Paohuzi.Protobuf.ChiResult.Parser, new[]{ "ChiList", "UserId", "Huxi" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.Hu), global::Paohuzi.Protobuf.Hu.Parser, new[]{ "Cards", "WinnerId", "CardId", "IsFinished" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.HandCards), global::Paohuzi.Protobuf.HandCards.Parser, new[]{ "CardIds", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.BoardSettlement), global::Paohuzi.Protobuf.BoardSettlement.Parser, new[]{ "PaixingInfos", "MingtangInfos", "SettInfos", "DiCardIds", "HuCardId", "Huxi", "Tun", "Fan", "IsZimo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.Settlement), global::Paohuzi.Protobuf.Settlement.Parser, new[]{ "UserId", "Change", "Score", "WeiIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.MingTang), global::Paohuzi.Protobuf.MingTang.Parser, new[]{ "Name", "Fan", "Tun", "Mul" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.Hupaixing), global::Paohuzi.Protobuf.Hupaixing.Parser, new[]{ "CardIds", "Type", "CardId", "Huxi" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.Return), global::Paohuzi.Protobuf.Return.Parser, new[]{ "MemberInfo", "RoomInfo", "SurplusCardAmount", "CreatedId", "NowOperationPlayerId", "CardId", "NowOperation", "Chongtun" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.ReturnMemberInfo), global::Paohuzi.Protobuf.ReturnMemberInfo.Parser, new[]{ "LeftHandPaixing", "PutCardIds", "HandCardIds", "ShowOperation", "TingList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.LeftHandPaixingInfo), global::Paohuzi.Protobuf.LeftHandPaixingInfo.Parser, new[]{ "CardIds", "Type", "CardId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.Ti), global::Paohuzi.Protobuf.Ti.Parser, new[]{ "TiIds", "UserId", "Huxi", "TiType", "IsChongpao" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.Pao), global::Paohuzi.Protobuf.Pao.Parser, new[]{ "UserId", "PaoType", "CardId", "Huxi", "IsChongpao" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.TingList), global::Paohuzi.Protobuf.TingList.Parser, new[]{ "TingList_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.TingInfo), global::Paohuzi.Protobuf.TingInfo.Parser, new[]{ "CardId", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.Rules), global::Paohuzi.Protobuf.Rules.Parser, new[]{ "Rules_", "Chongtun", "MaxScore" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.UserLeave), global::Paohuzi.Protobuf.UserLeave.Parser, new[]{ "UserId", "StartState", "IsRemove" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.MessageVideo), global::Paohuzi.Protobuf.MessageVideo.Parser, new[]{ "Records", "Start", "End", "Rules", "RoomId", "MaxRound", "CurRound" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.MessageRecordStart), global::Paohuzi.Protobuf.MessageRecordStart.Parser, new[]{ "Members", "Licensing" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.MessageRecordEnd), global::Paohuzi.Protobuf.MessageRecordEnd.Parser, new[]{ "Settlement", "HandCardIds", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.MessageRecordOperation), global::Paohuzi.Protobuf.MessageRecordOperation.Parser, new[]{ "ShowOperations", "ChiCardIds", "TiList", "UserId", "MessageId", "CardId", "CardAmount", "Huxi", "PaoOrTiType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.MessageRecordShowOperation), global::Paohuzi.Protobuf.MessageRecordShowOperation.Parser, new[]{ "Operations", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.Location), global::Paohuzi.Protobuf.Location.Parser, new[]{ "Longitude", "Latitude", "Location_", "Ip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.UpdateLocation), global::Paohuzi.Protobuf.UpdateLocation.Parser, new[]{ "Location", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paohuzi.Protobuf.DisbandShows), global::Paohuzi.Protobuf.DisbandShows.Parser, new[]{ "Opts", "ApplyUserId", "SurplusTime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 登陆请求
  /// </summary>
  public sealed partial class LoginRequest : pb::IMessage<LoginRequest> {
    private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest(LoginRequest other) : this() {
      key_ = other.key_;
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest Clone() {
      return new LoginRequest(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// 登陆KEY
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 登陆应答
  /// </summary>
  public sealed partial class LoginResp : pb::IMessage<LoginResp> {
    private static readonly pb::MessageParser<LoginResp> _parser = new pb::MessageParser<LoginResp>(() => new LoginResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResp(LoginResp other) : this() {
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResp Clone() {
      return new LoginResp(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    /// 登陆状态 -1连接已经存在 -2连接错误 -3获取用户信息失败 -4验证用户信息失败 -5房间已满 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResp other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 创建房间请求
  /// </summary>
  public sealed partial class CreateRoom : pb::IMessage<CreateRoom> {
    private static readonly pb::MessageParser<CreateRoom> _parser = new pb::MessageParser<CreateRoom>(() => new CreateRoom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoom(CreateRoom other) : this() {
      rules_ = other.rules_ != null ? other.rules_.Clone() : null;
      playerCount_ = other.playerCount_;
      gamePlayType_ = other.gamePlayType_;
      maxRound_ = other.maxRound_;
      maxScore_ = other.maxScore_;
      chongTun_ = other.chongTun_;
      fangZuobi_ = other.fangZuobi_;
      loaction_ = other.loaction_ != null ? other.loaction_.Clone() : null;
      gameId_ = other.gameId_;
      communityId_ = other.communityId_;
      aaType_ = other.aaType_;
      createId_ = other.createId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoom Clone() {
      return new CreateRoom(this);
    }

    /// <summary>Field number for the "rules" field.</summary>
    public const int RulesFieldNumber = 1;
    private global::Paohuzi.Protobuf.Rules rules_;
    /// <summary>
    /// 玩法规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Paohuzi.Protobuf.Rules Rules {
      get { return rules_; }
      set {
        rules_ = value;
      }
    }

    /// <summary>Field number for the "playerCount" field.</summary>
    public const int PlayerCountFieldNumber = 2;
    private int playerCount_;
    /// <summary>
    /// 二人玩法还是三人玩法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerCount {
      get { return playerCount_; }
      set {
        playerCount_ = value;
      }
    }

    /// <summary>Field number for the "gamePlayType" field.</summary>
    public const int GamePlayTypeFieldNumber = 3;
    private int gamePlayType_;
    /// <summary>
    /// 游戏玩法类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GamePlayType {
      get { return gamePlayType_; }
      set {
        gamePlayType_ = value;
      }
    }

    /// <summary>Field number for the "maxRound" field.</summary>
    public const int MaxRoundFieldNumber = 4;
    private int maxRound_;
    /// <summary>
    /// 局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxRound {
      get { return maxRound_; }
      set {
        maxRound_ = value;
      }
    }

    /// <summary>Field number for the "maxScore" field.</summary>
    public const int MaxScoreFieldNumber = 5;
    private int maxScore_;
    /// <summary>
    /// 单局最大积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxScore {
      get { return maxScore_; }
      set {
        maxScore_ = value;
      }
    }

    /// <summary>Field number for the "chongTun" field.</summary>
    public const int ChongTunFieldNumber = 6;
    private int chongTun_;
    /// <summary>
    /// 充囤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChongTun {
      get { return chongTun_; }
      set {
        chongTun_ = value;
      }
    }

    /// <summary>Field number for the "fangZuobi" field.</summary>
    public const int FangZuobiFieldNumber = 7;
    private int fangZuobi_;
    /// <summary>
    /// IP防作弊 0.否 1.是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FangZuobi {
      get { return fangZuobi_; }
      set {
        fangZuobi_ = value;
      }
    }

    /// <summary>Field number for the "loaction" field.</summary>
    public const int LoactionFieldNumber = 8;
    private global::Paohuzi.Protobuf.Location loaction_;
    /// <summary>
    /// 位置信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Paohuzi.Protobuf.Location Loaction {
      get { return loaction_; }
      set {
        loaction_ = value;
      }
    }

    /// <summary>Field number for the "gameId" field.</summary>
    public const int GameIdFieldNumber = 9;
    private int gameId_;
    /// <summary>
    /// 游戏ID 跑胡子游戏ID为4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "communityId" field.</summary>
    public const int CommunityIdFieldNumber = 10;
    private int communityId_;
    /// <summary>
    /// 亲友圈ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CommunityId {
      get { return communityId_; }
      set {
        communityId_ = value;
      }
    }

    /// <summary>Field number for the "aaType" field.</summary>
    public const int AaTypeFieldNumber = 11;
    private int aaType_;
    /// <summary>
    /// AA制创建类型 0.非AA 1.AA均摊 2.AA大赢家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AaType {
      get { return aaType_; }
      set {
        aaType_ = value;
      }
    }

    /// <summary>Field number for the "createId" field.</summary>
    public const int CreateIdFieldNumber = 12;
    private string createId_ = "";
    /// <summary>
    /// 亲友圈牌桌玩法编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateId {
      get { return createId_; }
      set {
        createId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Rules, other.Rules)) return false;
      if (PlayerCount != other.PlayerCount) return false;
      if (GamePlayType != other.GamePlayType) return false;
      if (MaxRound != other.MaxRound) return false;
      if (MaxScore != other.MaxScore) return false;
      if (ChongTun != other.ChongTun) return false;
      if (FangZuobi != other.FangZuobi) return false;
      if (!object.Equals(Loaction, other.Loaction)) return false;
      if (GameId != other.GameId) return false;
      if (CommunityId != other.CommunityId) return false;
      if (AaType != other.AaType) return false;
      if (CreateId != other.CreateId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rules_ != null) hash ^= Rules.GetHashCode();
      if (PlayerCount != 0) hash ^= PlayerCount.GetHashCode();
      if (GamePlayType != 0) hash ^= GamePlayType.GetHashCode();
      if (MaxRound != 0) hash ^= MaxRound.GetHashCode();
      if (MaxScore != 0) hash ^= MaxScore.GetHashCode();
      if (ChongTun != 0) hash ^= ChongTun.GetHashCode();
      if (FangZuobi != 0) hash ^= FangZuobi.GetHashCode();
      if (loaction_ != null) hash ^= Loaction.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (CommunityId != 0) hash ^= CommunityId.GetHashCode();
      if (AaType != 0) hash ^= AaType.GetHashCode();
      if (CreateId.Length != 0) hash ^= CreateId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rules_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Rules);
      }
      if (PlayerCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerCount);
      }
      if (GamePlayType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GamePlayType);
      }
      if (MaxRound != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxRound);
      }
      if (MaxScore != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxScore);
      }
      if (ChongTun != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ChongTun);
      }
      if (FangZuobi != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FangZuobi);
      }
      if (loaction_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Loaction);
      }
      if (GameId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(GameId);
      }
      if (CommunityId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CommunityId);
      }
      if (AaType != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(AaType);
      }
      if (CreateId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CreateId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rules_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rules);
      }
      if (PlayerCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerCount);
      }
      if (GamePlayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GamePlayType);
      }
      if (MaxRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRound);
      }
      if (MaxScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxScore);
      }
      if (ChongTun != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChongTun);
      }
      if (FangZuobi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FangZuobi);
      }
      if (loaction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Loaction);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (CommunityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CommunityId);
      }
      if (AaType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AaType);
      }
      if (CreateId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateRoom other) {
      if (other == null) {
        return;
      }
      if (other.rules_ != null) {
        if (rules_ == null) {
          rules_ = new global::Paohuzi.Protobuf.Rules();
        }
        Rules.MergeFrom(other.Rules);
      }
      if (other.PlayerCount != 0) {
        PlayerCount = other.PlayerCount;
      }
      if (other.GamePlayType != 0) {
        GamePlayType = other.GamePlayType;
      }
      if (other.MaxRound != 0) {
        MaxRound = other.MaxRound;
      }
      if (other.MaxScore != 0) {
        MaxScore = other.MaxScore;
      }
      if (other.ChongTun != 0) {
        ChongTun = other.ChongTun;
      }
      if (other.FangZuobi != 0) {
        FangZuobi = other.FangZuobi;
      }
      if (other.loaction_ != null) {
        if (loaction_ == null) {
          loaction_ = new global::Paohuzi.Protobuf.Location();
        }
        Loaction.MergeFrom(other.Loaction);
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      if (other.CommunityId != 0) {
        CommunityId = other.CommunityId;
      }
      if (other.AaType != 0) {
        AaType = other.AaType;
      }
      if (other.CreateId.Length != 0) {
        CreateId = other.CreateId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rules_ == null) {
              rules_ = new global::Paohuzi.Protobuf.Rules();
            }
            input.ReadMessage(rules_);
            break;
          }
          case 16: {
            PlayerCount = input.ReadInt32();
            break;
          }
          case 24: {
            GamePlayType = input.ReadInt32();
            break;
          }
          case 32: {
            MaxRound = input.ReadInt32();
            break;
          }
          case 40: {
            MaxScore = input.ReadInt32();
            break;
          }
          case 48: {
            ChongTun = input.ReadInt32();
            break;
          }
          case 56: {
            FangZuobi = input.ReadInt32();
            break;
          }
          case 66: {
            if (loaction_ == null) {
              loaction_ = new global::Paohuzi.Protobuf.Location();
            }
            input.ReadMessage(loaction_);
            break;
          }
          case 72: {
            GameId = input.ReadInt32();
            break;
          }
          case 80: {
            CommunityId = input.ReadInt32();
            break;
          }
          case 88: {
            AaType = input.ReadInt32();
            break;
          }
          case 98: {
            CreateId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩法类型
  /// </summary>
  public sealed partial class Play : pb::IMessage<Play> {
    private static readonly pb::MessageParser<Play> _parser = new pb::MessageParser<Play>(() => new Play());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Play> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Play() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Play(Play other) : this() {
      type_ = other.type_;
      flag_ = other.flag_;
      val_ = other.val_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Play Clone() {
      return new Play(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    /// 玩法类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 2;
    private int flag_;
    /// <summary>
    /// 是否选中 0.未选中 1.选中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    /// <summary>Field number for the "val" field.</summary>
    public const int ValFieldNumber = 3;
    private string val_ = "";
    /// <summary>
    /// 属性数字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Val {
      get { return val_; }
      set {
        val_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Play);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Play other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Flag != other.Flag) return false;
      if (Val != other.Val) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Flag != 0) hash ^= Flag.GetHashCode();
      if (Val.Length != 0) hash ^= Val.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Flag != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Flag);
      }
      if (Val.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Val);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Flag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flag);
      }
      if (Val.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Val);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Play other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Flag != 0) {
        Flag = other.Flag;
      }
      if (other.Val.Length != 0) {
        Val = other.Val;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Flag = input.ReadInt32();
            break;
          }
          case 26: {
            Val = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 加入房间 包含登陆请求信息、房间ID
  /// </summary>
  public sealed partial class JoinRoom : pb::IMessage<JoinRoom> {
    private static readonly pb::MessageParser<JoinRoom> _parser = new pb::MessageParser<JoinRoom>(() => new JoinRoom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoom(JoinRoom other) : this() {
      roomId_ = other.roomId_;
      loaction_ = other.loaction_ != null ? other.loaction_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoom Clone() {
      return new JoinRoom(this);
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loaction" field.</summary>
    public const int LoactionFieldNumber = 2;
    private global::Paohuzi.Protobuf.Location loaction_;
    /// <summary>
    /// 位置信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Paohuzi.Protobuf.Location Loaction {
      get { return loaction_; }
      set {
        loaction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (!object.Equals(Loaction, other.Loaction)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (loaction_ != null) hash ^= Loaction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (loaction_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Loaction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (loaction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Loaction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinRoom other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.loaction_ != null) {
        if (loaction_ == null) {
          loaction_ = new global::Paohuzi.Protobuf.Location();
        }
        Loaction.MergeFrom(other.Loaction);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 18: {
            if (loaction_ == null) {
              loaction_ = new global::Paohuzi.Protobuf.Location();
            }
            input.ReadMessage(loaction_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 解散房间玩家操作
  /// </summary>
  public sealed partial class DisbandOp : pb::IMessage<DisbandOp> {
    private static readonly pb::MessageParser<DisbandOp> _parser = new pb::MessageParser<DisbandOp>(() => new DisbandOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisbandOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisbandOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisbandOp(DisbandOp other) : this() {
      opt_ = other.opt_;
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisbandOp Clone() {
      return new DisbandOp(this);
    }

    /// <summary>Field number for the "opt" field.</summary>
    public const int OptFieldNumber = 1;
    private int opt_;
    /// <summary>
    /// 1true 2false 0无操作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Opt {
      get { return opt_; }
      set {
        opt_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisbandOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisbandOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Opt != other.Opt) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Opt != 0) hash ^= Opt.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Opt != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Opt);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Opt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Opt);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisbandOp other) {
      if (other == null) {
        return;
      }
      if (other.Opt != 0) {
        Opt = other.Opt;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Opt = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 房间信息
  /// </summary>
  public sealed partial class RoomInfo : pb::IMessage<RoomInfo> {
    private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => new RoomInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo(RoomInfo other) : this() {
      members_ = other.members_.Clone();
      roomId_ = other.roomId_;
      userId_ = other.userId_;
      nowRound_ = other.nowRound_;
      maxRound_ = other.maxRound_;
      isStart_ = other.isStart_;
      code_ = other.code_;
      gameState_ = other.gameState_;
      playerCount_ = other.playerCount_;
      playType_ = other.playType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo Clone() {
      return new RoomInfo(this);
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Paohuzi.Protobuf.RoomMember> _repeated_members_codec
        = pb::FieldCodec.ForMessage(10, global::Paohuzi.Protobuf.RoomMember.Parser);
    private readonly pbc::RepeatedField<global::Paohuzi.Protobuf.RoomMember> members_ = new pbc::RepeatedField<global::Paohuzi.Protobuf.RoomMember>();
    /// <summary>
    /// 牌桌成员信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paohuzi.Protobuf.RoomMember> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private string roomId_ = "";
    /// <summary>
    /// 房间编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 3;
    private long userId_;
    /// <summary>
    /// 用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "nowRound" field.</summary>
    public const int NowRoundFieldNumber = 4;
    private int nowRound_;
    /// <summary>
    /// 当前局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NowRound {
      get { return nowRound_; }
      set {
        nowRound_ = value;
      }
    }

    /// <summary>Field number for the "maxRound" field.</summary>
    public const int MaxRoundFieldNumber = 5;
    private int maxRound_;
    /// <summary>
    /// 最大局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxRound {
      get { return maxRound_; }
      set {
        maxRound_ = value;
      }
    }

    /// <summary>Field number for the "isStart" field.</summary>
    public const int IsStartFieldNumber = 6;
    private bool isStart_;
    /// <summary>
    /// 游戏是否已经开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStart {
      get { return isStart_; }
      set {
        isStart_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 7;
    private int code_;
    /// <summary>
    /// 加入房间错误码返回 -5房间已满
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "gameState" field.</summary>
    public const int GameStateFieldNumber = 8;
    private bool gameState_;
    /// <summary>
    /// 本局是否开始 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GameState {
      get { return gameState_; }
      set {
        gameState_ = value;
      }
    }

    /// <summary>Field number for the "playerCount" field.</summary>
    public const int PlayerCountFieldNumber = 9;
    private int playerCount_;
    /// <summary>
    /// 几人局
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerCount {
      get { return playerCount_; }
      set {
        playerCount_ = value;
      }
    }

    /// <summary>Field number for the "playType" field.</summary>
    public const int PlayTypeFieldNumber = 10;
    private int playType_;
    /// <summary>
    /// 玩法类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!members_.Equals(other.members_)) return false;
      if (RoomId != other.RoomId) return false;
      if (UserId != other.UserId) return false;
      if (NowRound != other.NowRound) return false;
      if (MaxRound != other.MaxRound) return false;
      if (IsStart != other.IsStart) return false;
      if (Code != other.Code) return false;
      if (GameState != other.GameState) return false;
      if (PlayerCount != other.PlayerCount) return false;
      if (PlayType != other.PlayType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= members_.GetHashCode();
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (NowRound != 0) hash ^= NowRound.GetHashCode();
      if (MaxRound != 0) hash ^= MaxRound.GetHashCode();
      if (IsStart != false) hash ^= IsStart.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (GameState != false) hash ^= GameState.GetHashCode();
      if (PlayerCount != 0) hash ^= PlayerCount.GetHashCode();
      if (PlayType != 0) hash ^= PlayType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      members_.WriteTo(output, _repeated_members_codec);
      if (RoomId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
      if (NowRound != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NowRound);
      }
      if (MaxRound != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxRound);
      }
      if (IsStart != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsStart);
      }
      if (Code != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Code);
      }
      if (GameState != false) {
        output.WriteRawTag(64);
        output.WriteBool(GameState);
      }
      if (PlayerCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(PlayerCount);
      }
      if (PlayType != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(PlayType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += members_.CalculateSize(_repeated_members_codec);
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (NowRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NowRound);
      }
      if (MaxRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRound);
      }
      if (IsStart != false) {
        size += 1 + 1;
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (GameState != false) {
        size += 1 + 1;
      }
      if (PlayerCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerCount);
      }
      if (PlayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomInfo other) {
      if (other == null) {
        return;
      }
      members_.Add(other.members_);
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.NowRound != 0) {
        NowRound = other.NowRound;
      }
      if (other.MaxRound != 0) {
        MaxRound = other.MaxRound;
      }
      if (other.IsStart != false) {
        IsStart = other.IsStart;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.GameState != false) {
        GameState = other.GameState;
      }
      if (other.PlayerCount != 0) {
        PlayerCount = other.PlayerCount;
      }
      if (other.PlayType != 0) {
        PlayType = other.PlayType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 18: {
            RoomId = input.ReadString();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
          case 32: {
            NowRound = input.ReadInt32();
            break;
          }
          case 40: {
            MaxRound = input.ReadInt32();
            break;
          }
          case 48: {
            IsStart = input.ReadBool();
            break;
          }
          case 56: {
            Code = input.ReadInt32();
            break;
          }
          case 64: {
            GameState = input.ReadBool();
            break;
          }
          case 72: {
            PlayerCount = input.ReadInt32();
            break;
          }
          case 80: {
            PlayType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 牌桌成员信息
  /// </summary>
  public sealed partial class RoomMember : pb::IMessage<RoomMember> {
    private static readonly pb::MessageParser<RoomMember> _parser = new pb::MessageParser<RoomMember>(() => new RoomMember());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMember(RoomMember other) : this() {
      headImgUrl_ = other.headImgUrl_;
      name_ = other.name_;
      userId_ = other.userId_;
      huxi_ = other.huxi_;
      score_ = other.score_;
      position_ = other.position_;
      isReady_ = other.isReady_;
      isBanker_ = other.isBanker_;
      maxHuxi_ = other.maxHuxi_;
      hutimes_ = other.hutimes_;
      isLeave_ = other.isLeave_;
      loaction_ = other.loaction_ != null ? other.loaction_.Clone() : null;
      sex_ = other.sex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMember Clone() {
      return new RoomMember(this);
    }

    /// <summary>Field number for the "headImgUrl" field.</summary>
    public const int HeadImgUrlFieldNumber = 1;
    private string headImgUrl_ = "";
    /// <summary>
    /// 头像地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadImgUrl {
      get { return headImgUrl_; }
      set {
        headImgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 用户名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 3;
    private long userId_;
    /// <summary>
    /// 用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "huxi" field.</summary>
    public const int HuxiFieldNumber = 4;
    private int huxi_;
    /// <summary>
    /// 胡息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Huxi {
      get { return huxi_; }
      set {
        huxi_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 5;
    private int score_;
    /// <summary>
    /// 积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 6;
    private int position_;
    /// <summary>
    /// 位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "isReady" field.</summary>
    public const int IsReadyFieldNumber = 7;
    private bool isReady_;
    /// <summary>
    /// 是否已准备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReady {
      get { return isReady_; }
      set {
        isReady_ = value;
      }
    }

    /// <summary>Field number for the "isBanker" field.</summary>
    public const int IsBankerFieldNumber = 8;
    private bool isBanker_;
    /// <summary>
    /// 是否房主
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBanker {
      get { return isBanker_; }
      set {
        isBanker_ = value;
      }
    }

    /// <summary>Field number for the "maxHuxi" field.</summary>
    public const int MaxHuxiFieldNumber = 9;
    private int maxHuxi_;
    /// <summary>
    /// 最高胡息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHuxi {
      get { return maxHuxi_; }
      set {
        maxHuxi_ = value;
      }
    }

    /// <summary>Field number for the "hutimes" field.</summary>
    public const int HutimesFieldNumber = 10;
    private int hutimes_;
    /// <summary>
    /// 胡牌次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hutimes {
      get { return hutimes_; }
      set {
        hutimes_ = value;
      }
    }

    /// <summary>Field number for the "isLeave" field.</summary>
    public const int IsLeaveFieldNumber = 11;
    private bool isLeave_;
    /// <summary>
    /// 是否离开状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLeave {
      get { return isLeave_; }
      set {
        isLeave_ = value;
      }
    }

    /// <summary>Field number for the "loaction" field.</summary>
    public const int LoactionFieldNumber = 12;
    private global::Paohuzi.Protobuf.Location loaction_;
    /// <summary>
    /// 位置信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Paohuzi.Protobuf.Location Loaction {
      get { return loaction_; }
      set {
        loaction_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 13;
    private string sex_ = "";
    /// <summary>
    /// 性别 1男 2女
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sex {
      get { return sex_; }
      set {
        sex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeadImgUrl != other.HeadImgUrl) return false;
      if (Name != other.Name) return false;
      if (UserId != other.UserId) return false;
      if (Huxi != other.Huxi) return false;
      if (Score != other.Score) return false;
      if (Position != other.Position) return false;
      if (IsReady != other.IsReady) return false;
      if (IsBanker != other.IsBanker) return false;
      if (MaxHuxi != other.MaxHuxi) return false;
      if (Hutimes != other.Hutimes) return false;
      if (IsLeave != other.IsLeave) return false;
      if (!object.Equals(Loaction, other.Loaction)) return false;
      if (Sex != other.Sex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeadImgUrl.Length != 0) hash ^= HeadImgUrl.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Huxi != 0) hash ^= Huxi.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      if (IsReady != false) hash ^= IsReady.GetHashCode();
      if (IsBanker != false) hash ^= IsBanker.GetHashCode();
      if (MaxHuxi != 0) hash ^= MaxHuxi.GetHashCode();
      if (Hutimes != 0) hash ^= Hutimes.GetHashCode();
      if (IsLeave != false) hash ^= IsLeave.GetHashCode();
      if (loaction_ != null) hash ^= Loaction.GetHashCode();
      if (Sex.Length != 0) hash ^= Sex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeadImgUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HeadImgUrl);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
      if (Huxi != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Huxi);
      }
      if (Score != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Score);
      }
      if (Position != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Position);
      }
      if (IsReady != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsReady);
      }
      if (IsBanker != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsBanker);
      }
      if (MaxHuxi != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MaxHuxi);
      }
      if (Hutimes != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Hutimes);
      }
      if (IsLeave != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsLeave);
      }
      if (loaction_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Loaction);
      }
      if (Sex.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Sex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeadImgUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadImgUrl);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Huxi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Huxi);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (IsReady != false) {
        size += 1 + 1;
      }
      if (IsBanker != false) {
        size += 1 + 1;
      }
      if (MaxHuxi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHuxi);
      }
      if (Hutimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hutimes);
      }
      if (IsLeave != false) {
        size += 1 + 1;
      }
      if (loaction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Loaction);
      }
      if (Sex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomMember other) {
      if (other == null) {
        return;
      }
      if (other.HeadImgUrl.Length != 0) {
        HeadImgUrl = other.HeadImgUrl;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Huxi != 0) {
        Huxi = other.Huxi;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
      if (other.IsReady != false) {
        IsReady = other.IsReady;
      }
      if (other.IsBanker != false) {
        IsBanker = other.IsBanker;
      }
      if (other.MaxHuxi != 0) {
        MaxHuxi = other.MaxHuxi;
      }
      if (other.Hutimes != 0) {
        Hutimes = other.Hutimes;
      }
      if (other.IsLeave != false) {
        IsLeave = other.IsLeave;
      }
      if (other.loaction_ != null) {
        if (loaction_ == null) {
          loaction_ = new global::Paohuzi.Protobuf.Location();
        }
        Loaction.MergeFrom(other.Loaction);
      }
      if (other.Sex.Length != 0) {
        Sex = other.Sex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            HeadImgUrl = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
          case 32: {
            Huxi = input.ReadInt32();
            break;
          }
          case 40: {
            Score = input.ReadInt32();
            break;
          }
          case 48: {
            Position = input.ReadInt32();
            break;
          }
          case 56: {
            IsReady = input.ReadBool();
            break;
          }
          case 64: {
            IsBanker = input.ReadBool();
            break;
          }
          case 72: {
            MaxHuxi = input.ReadInt32();
            break;
          }
          case 80: {
            Hutimes = input.ReadInt32();
            break;
          }
          case 88: {
            IsLeave = input.ReadBool();
            break;
          }
          case 98: {
            if (loaction_ == null) {
              loaction_ = new global::Paohuzi.Protobuf.Location();
            }
            input.ReadMessage(loaction_);
            break;
          }
          case 106: {
            Sex = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 游戏结束
  /// </summary>
  public sealed partial class GameFinished : pb::IMessage<GameFinished> {
    private static readonly pb::MessageParser<GameFinished> _parser = new pb::MessageParser<GameFinished>(() => new GameFinished());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameFinished> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameFinished() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameFinished(GameFinished other) : this() {
      members_ = other.members_.Clone();
      roomId_ = other.roomId_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      round_ = other.round_;
      maxRound_ = other.maxRound_;
      isForce_ = other.isForce_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameFinished Clone() {
      return new GameFinished(this);
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Paohuzi.Protobuf.RoomMember> _repeated_members_codec
        = pb::FieldCodec.ForMessage(10, global::Paohuzi.Protobuf.RoomMember.Parser);
    private readonly pbc::RepeatedField<global::Paohuzi.Protobuf.RoomMember> members_ = new pbc::RepeatedField<global::Paohuzi.Protobuf.RoomMember>();
    /// <summary>
    /// 成员局内总收支
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paohuzi.Protobuf.RoomMember> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private string roomId_ = "";
    /// <summary>
    /// 房号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 3;
    private long startTime_;
    /// <summary>
    /// 开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private long endTime_;
    /// <summary>
    /// 结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 5;
    private int round_;
    /// <summary>
    /// 进行的局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "maxRound" field.</summary>
    public const int MaxRoundFieldNumber = 6;
    private int maxRound_;
    /// <summary>
    /// 最大局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxRound {
      get { return maxRound_; }
      set {
        maxRound_ = value;
      }
    }

    /// <summary>Field number for the "isForce" field.</summary>
    public const int IsForceFieldNumber = 7;
    private bool isForce_;
    /// <summary>
    /// 是否强制退出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsForce {
      get { return isForce_; }
      set {
        isForce_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameFinished);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameFinished other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!members_.Equals(other.members_)) return false;
      if (RoomId != other.RoomId) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (Round != other.Round) return false;
      if (MaxRound != other.MaxRound) return false;
      if (IsForce != other.IsForce) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= members_.GetHashCode();
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (Round != 0) hash ^= Round.GetHashCode();
      if (MaxRound != 0) hash ^= MaxRound.GetHashCode();
      if (IsForce != false) hash ^= IsForce.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      members_.WriteTo(output, _repeated_members_codec);
      if (RoomId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomId);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(EndTime);
      }
      if (Round != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Round);
      }
      if (MaxRound != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxRound);
      }
      if (IsForce != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsForce);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += members_.CalculateSize(_repeated_members_codec);
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
      }
      if (MaxRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRound);
      }
      if (IsForce != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameFinished other) {
      if (other == null) {
        return;
      }
      members_.Add(other.members_);
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      if (other.Round != 0) {
        Round = other.Round;
      }
      if (other.MaxRound != 0) {
        MaxRound = other.MaxRound;
      }
      if (other.IsForce != false) {
        IsForce = other.IsForce;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 18: {
            RoomId = input.ReadString();
            break;
          }
          case 24: {
            StartTime = input.ReadInt64();
            break;
          }
          case 32: {
            EndTime = input.ReadInt64();
            break;
          }
          case 40: {
            Round = input.ReadInt32();
            break;
          }
          case 48: {
            MaxRound = input.ReadInt32();
            break;
          }
          case 56: {
            IsForce = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 发牌
  /// </summary>
  public sealed partial class Licensing : pb::IMessage<Licensing> {
    private static readonly pb::MessageParser<Licensing> _parser = new pb::MessageParser<Licensing>(() => new Licensing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Licensing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Licensing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Licensing(Licensing other) : this() {
      handCards_ = other.handCards_.Clone();
      surplusCardAmount_ = other.surplusCardAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Licensing Clone() {
      return new Licensing(this);
    }

    /// <summary>Field number for the "handCards" field.</summary>
    public const int HandCardsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_handCards_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> handCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HandCards {
      get { return handCards_; }
    }

    /// <summary>Field number for the "surplusCardAmount" field.</summary>
    public const int SurplusCardAmountFieldNumber = 2;
    private int surplusCardAmount_;
    /// <summary>
    /// 剩余牌堆牌数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SurplusCardAmount {
      get { return surplusCardAmount_; }
      set {
        surplusCardAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Licensing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Licensing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!handCards_.Equals(other.handCards_)) return false;
      if (SurplusCardAmount != other.SurplusCardAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= handCards_.GetHashCode();
      if (SurplusCardAmount != 0) hash ^= SurplusCardAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      handCards_.WriteTo(output, _repeated_handCards_codec);
      if (SurplusCardAmount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SurplusCardAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += handCards_.CalculateSize(_repeated_handCards_codec);
      if (SurplusCardAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SurplusCardAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Licensing other) {
      if (other == null) {
        return;
      }
      handCards_.Add(other.handCards_);
      if (other.SurplusCardAmount != 0) {
        SurplusCardAmount = other.SurplusCardAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            handCards_.AddEntriesFrom(input, _repeated_handCards_codec);
            break;
          }
          case 16: {
            SurplusCardAmount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 牌局显示操作
  /// </summary>
  public sealed partial class ShowOperation : pb::IMessage<ShowOperation> {
    private static readonly pb::MessageParser<ShowOperation> _parser = new pb::MessageParser<ShowOperation>(() => new ShowOperation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShowOperation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowOperation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowOperation(ShowOperation other) : this() {
      chiList_ = other.chiList_.Clone();
      cardId_ = other.cardId_;
      hasPeng_ = other.hasPeng_;
      canHu_ = other.canHu_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowOperation Clone() {
      return new ShowOperation(this);
    }

    /// <summary>Field number for the "chiList" field.</summary>
    public const int ChiListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Paohuzi.Protobuf.BaseChi> _repeated_chiList_codec
        = pb::FieldCodec.ForMessage(10, global::Paohuzi.Protobuf.BaseChi.Parser);
    private readonly pbc::RepeatedField<global::Paohuzi.Protobuf.BaseChi> chiList_ = new pbc::RepeatedField<global::Paohuzi.Protobuf.BaseChi>();
    /// <summary>
    /// 吃列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paohuzi.Protobuf.BaseChi> ChiList {
      get { return chiList_; }
    }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 2;
    private int cardId_;
    /// <summary>
    /// 打出或者摸到的牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "hasPeng" field.</summary>
    public const int HasPengFieldNumber = 4;
    private bool hasPeng_;
    /// <summary>
    /// 是否有碰
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPeng {
      get { return hasPeng_; }
      set {
        hasPeng_ = value;
      }
    }

    /// <summary>Field number for the "canHu" field.</summary>
    public const int CanHuFieldNumber = 6;
    private bool canHu_;
    /// <summary>
    /// 是否可胡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanHu {
      get { return canHu_; }
      set {
        canHu_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShowOperation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShowOperation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!chiList_.Equals(other.chiList_)) return false;
      if (CardId != other.CardId) return false;
      if (HasPeng != other.HasPeng) return false;
      if (CanHu != other.CanHu) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= chiList_.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (HasPeng != false) hash ^= HasPeng.GetHashCode();
      if (CanHu != false) hash ^= CanHu.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      chiList_.WriteTo(output, _repeated_chiList_codec);
      if (CardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CardId);
      }
      if (HasPeng != false) {
        output.WriteRawTag(32);
        output.WriteBool(HasPeng);
      }
      if (CanHu != false) {
        output.WriteRawTag(48);
        output.WriteBool(CanHu);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += chiList_.CalculateSize(_repeated_chiList_codec);
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (HasPeng != false) {
        size += 1 + 1;
      }
      if (CanHu != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShowOperation other) {
      if (other == null) {
        return;
      }
      chiList_.Add(other.chiList_);
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.HasPeng != false) {
        HasPeng = other.HasPeng;
      }
      if (other.CanHu != false) {
        CanHu = other.CanHu;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            chiList_.AddEntriesFrom(input, _repeated_chiList_codec);
            break;
          }
          case 16: {
            CardId = input.ReadInt32();
            break;
          }
          case 32: {
            HasPeng = input.ReadBool();
            break;
          }
          case 48: {
            CanHu = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChiRequest : pb::IMessage<ChiRequest> {
    private static readonly pb::MessageParser<ChiRequest> _parser = new pb::MessageParser<ChiRequest>(() => new ChiRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChiRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChiRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChiRequest(ChiRequest other) : this() {
      chiList_ = other.chiList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChiRequest Clone() {
      return new ChiRequest(this);
    }

    /// <summary>Field number for the "chiList" field.</summary>
    public const int ChiListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Paohuzi.Protobuf.LastChi> _repeated_chiList_codec
        = pb::FieldCodec.ForMessage(10, global::Paohuzi.Protobuf.LastChi.Parser);
    private readonly pbc::RepeatedField<global::Paohuzi.Protobuf.LastChi> chiList_ = new pbc::RepeatedField<global::Paohuzi.Protobuf.LastChi>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paohuzi.Protobuf.LastChi> ChiList {
      get { return chiList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChiRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChiRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!chiList_.Equals(other.chiList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= chiList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      chiList_.WriteTo(output, _repeated_chiList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += chiList_.CalculateSize(_repeated_chiList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChiRequest other) {
      if (other == null) {
        return;
      }
      chiList_.Add(other.chiList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            chiList_.AddEntriesFrom(input, _repeated_chiList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 一级吃
  /// </summary>
  public sealed partial class BaseChi : pb::IMessage<BaseChi> {
    private static readonly pb::MessageParser<BaseChi> _parser = new pb::MessageParser<BaseChi>(() => new BaseChi());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BaseChi> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseChi() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseChi(BaseChi other) : this() {
      nextChiList_ = other.nextChiList_.Clone();
      cardIds_ = other.cardIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseChi Clone() {
      return new BaseChi(this);
    }

    /// <summary>Field number for the "nextChiList" field.</summary>
    public const int NextChiListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Paohuzi.Protobuf.NextChi> _repeated_nextChiList_codec
        = pb::FieldCodec.ForMessage(10, global::Paohuzi.Protobuf.NextChi.Parser);
    private readonly pbc::RepeatedField<global::Paohuzi.Protobuf.NextChi> nextChiList_ = new pbc::RepeatedField<global::Paohuzi.Protobuf.NextChi>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paohuzi.Protobuf.NextChi> NextChiList {
      get { return nextChiList_; }
    }

    /// <summary>Field number for the "cardIds" field.</summary>
    public const int CardIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_cardIds_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> cardIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 吃牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CardIds {
      get { return cardIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BaseChi);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BaseChi other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nextChiList_.Equals(other.nextChiList_)) return false;
      if(!cardIds_.Equals(other.cardIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nextChiList_.GetHashCode();
      hash ^= cardIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nextChiList_.WriteTo(output, _repeated_nextChiList_codec);
      cardIds_.WriteTo(output, _repeated_cardIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nextChiList_.CalculateSize(_repeated_nextChiList_codec);
      size += cardIds_.CalculateSize(_repeated_cardIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BaseChi other) {
      if (other == null) {
        return;
      }
      nextChiList_.Add(other.nextChiList_);
      cardIds_.Add(other.cardIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            nextChiList_.AddEntriesFrom(input, _repeated_nextChiList_codec);
            break;
          }
          case 18:
          case 16: {
            cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 二级吃
  /// </summary>
  public sealed partial class NextChi : pb::IMessage<NextChi> {
    private static readonly pb::MessageParser<NextChi> _parser = new pb::MessageParser<NextChi>(() => new NextChi());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NextChi> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextChi() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextChi(NextChi other) : this() {
      lastChiList_ = other.lastChiList_.Clone();
      cardIds_ = other.cardIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextChi Clone() {
      return new NextChi(this);
    }

    /// <summary>Field number for the "lastChiList" field.</summary>
    public const int LastChiListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Paohuzi.Protobuf.LastChi> _repeated_lastChiList_codec
        = pb::FieldCodec.ForMessage(10, global::Paohuzi.Protobuf.LastChi.Parser);
    private readonly pbc::RepeatedField<global::Paohuzi.Protobuf.LastChi> lastChiList_ = new pbc::RepeatedField<global::Paohuzi.Protobuf.LastChi>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paohuzi.Protobuf.LastChi> LastChiList {
      get { return lastChiList_; }
    }

    /// <summary>Field number for the "cardIds" field.</summary>
    public const int CardIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_cardIds_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> cardIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 吃牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CardIds {
      get { return cardIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NextChi);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NextChi other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lastChiList_.Equals(other.lastChiList_)) return false;
      if(!cardIds_.Equals(other.cardIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= lastChiList_.GetHashCode();
      hash ^= cardIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      lastChiList_.WriteTo(output, _repeated_lastChiList_codec);
      cardIds_.WriteTo(output, _repeated_cardIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += lastChiList_.CalculateSize(_repeated_lastChiList_codec);
      size += cardIds_.CalculateSize(_repeated_cardIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NextChi other) {
      if (other == null) {
        return;
      }
      lastChiList_.Add(other.lastChiList_);
      cardIds_.Add(other.cardIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            lastChiList_.AddEntriesFrom(input, _repeated_lastChiList_codec);
            break;
          }
          case 18:
          case 16: {
            cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 三级吃
  /// </summary>
  public sealed partial class LastChi : pb::IMessage<LastChi> {
    private static readonly pb::MessageParser<LastChi> _parser = new pb::MessageParser<LastChi>(() => new LastChi());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LastChi> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LastChi() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LastChi(LastChi other) : this() {
      cardIds_ = other.cardIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LastChi Clone() {
      return new LastChi(this);
    }

    /// <summary>Field number for the "cardIds" field.</summary>
    public const int CardIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_cardIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> cardIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CardIds {
      get { return cardIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LastChi);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LastChi other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cardIds_.Equals(other.cardIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cardIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cardIds_.WriteTo(output, _repeated_cardIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cardIds_.CalculateSize(_repeated_cardIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LastChi other) {
      if (other == null) {
        return;
      }
      cardIds_.Add(other.cardIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChiResult : pb::IMessage<ChiResult> {
    private static readonly pb::MessageParser<ChiResult> _parser = new pb::MessageParser<ChiResult>(() => new ChiResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChiResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChiResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChiResult(ChiResult other) : this() {
      chiList_ = other.chiList_.Clone();
      userId_ = other.userId_;
      huxi_ = other.huxi_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChiResult Clone() {
      return new ChiResult(this);
    }

    /// <summary>Field number for the "chiList" field.</summary>
    public const int ChiListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Paohuzi.Protobuf.LastChi> _repeated_chiList_codec
        = pb::FieldCodec.ForMessage(10, global::Paohuzi.Protobuf.LastChi.Parser);
    private readonly pbc::RepeatedField<global::Paohuzi.Protobuf.LastChi> chiList_ = new pbc::RepeatedField<global::Paohuzi.Protobuf.LastChi>();
    /// <summary>
    /// 吃牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paohuzi.Protobuf.LastChi> ChiList {
      get { return chiList_; }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "huxi" field.</summary>
    public const int HuxiFieldNumber = 3;
    private int huxi_;
    /// <summary>
    /// 吃二七十或者贰柒拾后的胡息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Huxi {
      get { return huxi_; }
      set {
        huxi_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChiResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChiResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!chiList_.Equals(other.chiList_)) return false;
      if (UserId != other.UserId) return false;
      if (Huxi != other.Huxi) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= chiList_.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Huxi != 0) hash ^= Huxi.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      chiList_.WriteTo(output, _repeated_chiList_codec);
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (Huxi != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Huxi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += chiList_.CalculateSize(_repeated_chiList_codec);
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Huxi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Huxi);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChiResult other) {
      if (other == null) {
        return;
      }
      chiList_.Add(other.chiList_);
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Huxi != 0) {
        Huxi = other.Huxi;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            chiList_.AddEntriesFrom(input, _repeated_chiList_codec);
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 24: {
            Huxi = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Hu : pb::IMessage<Hu> {
    private static readonly pb::MessageParser<Hu> _parser = new pb::MessageParser<Hu>(() => new Hu());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hu> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hu() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hu(Hu other) : this() {
      cards_ = other.cards_.Clone();
      winnerId_ = other.winnerId_;
      cardId_ = other.cardId_;
      isFinished_ = other.isFinished_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hu Clone() {
      return new Hu(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Paohuzi.Protobuf.HandCards> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Paohuzi.Protobuf.HandCards.Parser);
    private readonly pbc::RepeatedField<global::Paohuzi.Protobuf.HandCards> cards_ = new pbc::RepeatedField<global::Paohuzi.Protobuf.HandCards>();
    /// <summary>
    /// 玩家手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paohuzi.Protobuf.HandCards> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "winnerId" field.</summary>
    public const int WinnerIdFieldNumber = 2;
    private long winnerId_;
    /// <summary>
    /// 赢牌玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WinnerId {
      get { return winnerId_; }
      set {
        winnerId_ = value;
      }
    }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 3;
    private int cardId_;
    /// <summary>
    /// 牌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "isFinished" field.</summary>
    public const int IsFinishedFieldNumber = 4;
    private bool isFinished_;
    /// <summary>
    /// 游戏是否结束
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFinished {
      get { return isFinished_; }
      set {
        isFinished_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hu);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hu other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      if (WinnerId != other.WinnerId) return false;
      if (CardId != other.CardId) return false;
      if (IsFinished != other.IsFinished) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (WinnerId != 0L) hash ^= WinnerId.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (IsFinished != false) hash ^= IsFinished.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
      if (WinnerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(WinnerId);
      }
      if (CardId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CardId);
      }
      if (IsFinished != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsFinished);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (WinnerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WinnerId);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (IsFinished != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hu other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      if (other.WinnerId != 0L) {
        WinnerId = other.WinnerId;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.IsFinished != false) {
        IsFinished = other.IsFinished;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 16: {
            WinnerId = input.ReadInt64();
            break;
          }
          case 24: {
            CardId = input.ReadInt32();
            break;
          }
          case 32: {
            IsFinished = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 胡牌或者黄庄玩家的手牌
  /// </summary>
  public sealed partial class HandCards : pb::IMessage<HandCards> {
    private static readonly pb::MessageParser<HandCards> _parser = new pb::MessageParser<HandCards>(() => new HandCards());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HandCards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandCards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandCards(HandCards other) : this() {
      cardIds_ = other.cardIds_.Clone();
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandCards Clone() {
      return new HandCards(this);
    }

    /// <summary>Field number for the "cardIds" field.</summary>
    public const int CardIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_cardIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> cardIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CardIds {
      get { return cardIds_; }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HandCards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HandCards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cardIds_.Equals(other.cardIds_)) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cardIds_.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cardIds_.WriteTo(output, _repeated_cardIds_codec);
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cardIds_.CalculateSize(_repeated_cardIds_codec);
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HandCards other) {
      if (other == null) {
        return;
      }
      cardIds_.Add(other.cardIds_);
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 每局结束后的牌局结算
  /// </summary>
  public sealed partial class BoardSettlement : pb::IMessage<BoardSettlement> {
    private static readonly pb::MessageParser<BoardSettlement> _parser = new pb::MessageParser<BoardSettlement>(() => new BoardSettlement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoardSettlement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoardSettlement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoardSettlement(BoardSettlement other) : this() {
      paixingInfos_ = other.paixingInfos_.Clone();
      mingtangInfos_ = other.mingtangInfos_.Clone();
      settInfos_ = other.settInfos_.Clone();
      diCardIds_ = other.diCardIds_.Clone();
      huCardId_ = other.huCardId_;
      huxi_ = other.huxi_;
      tun_ = other.tun_;
      fan_ = other.fan_;
      isZimo_ = other.isZimo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoardSettlement Clone() {
      return new BoardSettlement(this);
    }

    /// <summary>Field number for the "paixingInfos" field.</summary>
    public const int PaixingInfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Paohuzi.Protobuf.Hupaixing> _repeated_paixingInfos_codec
        = pb::FieldCodec.ForMessage(10, global::Paohuzi.Protobuf.Hupaixing.Parser);
    private readonly pbc::RepeatedField<global::Paohuzi.Protobuf.Hupaixing> paixingInfos_ = new pbc::RepeatedField<global::Paohuzi.Protobuf.Hupaixing>();
    /// <summary>
    /// 牌型信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paohuzi.Protobuf.Hupaixing> PaixingInfos {
      get { return paixingInfos_; }
    }

    /// <summary>Field number for the "mingtangInfos" field.</summary>
    public const int MingtangInfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Paohuzi.Protobuf.MingTang> _repeated_mingtangInfos_codec
        = pb::FieldCodec.ForMessage(18, global::Paohuzi.Protobuf.MingTang.Parser);
    private readonly pbc::RepeatedField<global::Paohuzi.Protobuf.MingTang> mingtangInfos_ = new pbc::RepeatedField<global::Paohuzi.Protobuf.MingTang>();
    /// <summary>
    /// 名堂信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paohuzi.Protobuf.MingTang> MingtangInfos {
      get { return mingtangInfos_; }
    }

    /// <summary>Field number for the "settInfos" field.</summary>
    public const int SettInfosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Paohuzi.Protobuf.Settlement> _repeated_settInfos_codec
        = pb::FieldCodec.ForMessage(26, global::Paohuzi.Protobuf.Settlement.Parser);
    private readonly pbc::RepeatedField<global::Paohuzi.Protobuf.Settlement> settInfos_ = new pbc::RepeatedField<global::Paohuzi.Protobuf.Settlement>();
    /// <summary>
    /// 玩家局内收支
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paohuzi.Protobuf.Settlement> SettInfos {
      get { return settInfos_; }
    }

    /// <summary>Field number for the "diCardIds" field.</summary>
    public const int DiCardIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_diCardIds_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> diCardIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 底牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DiCardIds {
      get { return diCardIds_; }
    }

    /// <summary>Field number for the "huCardId" field.</summary>
    public const int HuCardIdFieldNumber = 5;
    private int huCardId_;
    /// <summary>
    /// 胡牌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HuCardId {
      get { return huCardId_; }
      set {
        huCardId_ = value;
      }
    }

    /// <summary>Field number for the "huxi" field.</summary>
    public const int HuxiFieldNumber = 6;
    private int huxi_;
    /// <summary>
    /// 胡息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Huxi {
      get { return huxi_; }
      set {
        huxi_ = value;
      }
    }

    /// <summary>Field number for the "tun" field.</summary>
    public const int TunFieldNumber = 7;
    private int tun_;
    /// <summary>
    /// 囤数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tun {
      get { return tun_; }
      set {
        tun_ = value;
      }
    }

    /// <summary>Field number for the "fan" field.</summary>
    public const int FanFieldNumber = 8;
    private int fan_;
    /// <summary>
    /// 番
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fan {
      get { return fan_; }
      set {
        fan_ = value;
      }
    }

    /// <summary>Field number for the "isZimo" field.</summary>
    public const int IsZimoFieldNumber = 9;
    private bool isZimo_;
    /// <summary>
    /// 是否自摸
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsZimo {
      get { return isZimo_; }
      set {
        isZimo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoardSettlement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoardSettlement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!paixingInfos_.Equals(other.paixingInfos_)) return false;
      if(!mingtangInfos_.Equals(other.mingtangInfos_)) return false;
      if(!settInfos_.Equals(other.settInfos_)) return false;
      if(!diCardIds_.Equals(other.diCardIds_)) return false;
      if (HuCardId != other.HuCardId) return false;
      if (Huxi != other.Huxi) return false;
      if (Tun != other.Tun) return false;
      if (Fan != other.Fan) return false;
      if (IsZimo != other.IsZimo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= paixingInfos_.GetHashCode();
      hash ^= mingtangInfos_.GetHashCode();
      hash ^= settInfos_.GetHashCode();
      hash ^= diCardIds_.GetHashCode();
      if (HuCardId != 0) hash ^= HuCardId.GetHashCode();
      if (Huxi != 0) hash ^= Huxi.GetHashCode();
      if (Tun != 0) hash ^= Tun.GetHashCode();
      if (Fan != 0) hash ^= Fan.GetHashCode();
      if (IsZimo != false) hash ^= IsZimo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      paixingInfos_.WriteTo(output, _repeated_paixingInfos_codec);
      mingtangInfos_.WriteTo(output, _repeated_mingtangInfos_codec);
      settInfos_.WriteTo(output, _repeated_settInfos_codec);
      diCardIds_.WriteTo(output, _repeated_diCardIds_codec);
      if (HuCardId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HuCardId);
      }
      if (Huxi != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Huxi);
      }
      if (Tun != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Tun);
      }
      if (Fan != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Fan);
      }
      if (IsZimo != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsZimo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += paixingInfos_.CalculateSize(_repeated_paixingInfos_codec);
      size += mingtangInfos_.CalculateSize(_repeated_mingtangInfos_codec);
      size += settInfos_.CalculateSize(_repeated_settInfos_codec);
      size += diCardIds_.CalculateSize(_repeated_diCardIds_codec);
      if (HuCardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HuCardId);
      }
      if (Huxi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Huxi);
      }
      if (Tun != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tun);
      }
      if (Fan != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fan);
      }
      if (IsZimo != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoardSettlement other) {
      if (other == null) {
        return;
      }
      paixingInfos_.Add(other.paixingInfos_);
      mingtangInfos_.Add(other.mingtangInfos_);
      settInfos_.Add(other.settInfos_);
      diCardIds_.Add(other.diCardIds_);
      if (other.HuCardId != 0) {
        HuCardId = other.HuCardId;
      }
      if (other.Huxi != 0) {
        Huxi = other.Huxi;
      }
      if (other.Tun != 0) {
        Tun = other.Tun;
      }
      if (other.Fan != 0) {
        Fan = other.Fan;
      }
      if (other.IsZimo != false) {
        IsZimo = other.IsZimo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            paixingInfos_.AddEntriesFrom(input, _repeated_paixingInfos_codec);
            break;
          }
          case 18: {
            mingtangInfos_.AddEntriesFrom(input, _repeated_mingtangInfos_codec);
            break;
          }
          case 26: {
            settInfos_.AddEntriesFrom(input, _repeated_settInfos_codec);
            break;
          }
          case 34:
          case 32: {
            diCardIds_.AddEntriesFrom(input, _repeated_diCardIds_codec);
            break;
          }
          case 40: {
            HuCardId = input.ReadInt32();
            break;
          }
          case 48: {
            Huxi = input.ReadInt32();
            break;
          }
          case 56: {
            Tun = input.ReadInt32();
            break;
          }
          case 64: {
            Fan = input.ReadInt32();
            break;
          }
          case 72: {
            IsZimo = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 局内结算
  /// </summary>
  public sealed partial class Settlement : pb::IMessage<Settlement> {
    private static readonly pb::MessageParser<Settlement> _parser = new pb::MessageParser<Settlement>(() => new Settlement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Settlement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Settlement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Settlement(Settlement other) : this() {
      userId_ = other.userId_;
      change_ = other.change_;
      score_ = other.score_;
      weiIds_ = other.weiIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Settlement Clone() {
      return new Settlement(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "change" field.</summary>
    public const int ChangeFieldNumber = 2;
    private int change_;
    /// <summary>
    /// 积分变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Change {
      get { return change_; }
      set {
        change_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private int score_;
    /// <summary>
    /// 当前积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "weiIds" field.</summary>
    public const int WeiIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_weiIds_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> weiIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 偎牌ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> WeiIds {
      get { return weiIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Settlement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Settlement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Change != other.Change) return false;
      if (Score != other.Score) return false;
      if(!weiIds_.Equals(other.weiIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Change != 0) hash ^= Change.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      hash ^= weiIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (Change != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Change);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      weiIds_.WriteTo(output, _repeated_weiIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Change != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Change);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      size += weiIds_.CalculateSize(_repeated_weiIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Settlement other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Change != 0) {
        Change = other.Change;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      weiIds_.Add(other.weiIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            Change = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            weiIds_.AddEntriesFrom(input, _repeated_weiIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 名堂信息
  /// </summary>
  public sealed partial class MingTang : pb::IMessage<MingTang> {
    private static readonly pb::MessageParser<MingTang> _parser = new pb::MessageParser<MingTang>(() => new MingTang());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MingTang> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MingTang() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MingTang(MingTang other) : this() {
      name_ = other.name_;
      fan_ = other.fan_;
      tun_ = other.tun_;
      mul_ = other.mul_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MingTang Clone() {
      return new MingTang(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 牌型名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fan" field.</summary>
    public const int FanFieldNumber = 2;
    private int fan_;
    /// <summary>
    /// 番数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fan {
      get { return fan_; }
      set {
        fan_ = value;
      }
    }

    /// <summary>Field number for the "tun" field.</summary>
    public const int TunFieldNumber = 3;
    private int tun_;
    /// <summary>
    /// 囤数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tun {
      get { return tun_; }
      set {
        tun_ = value;
      }
    }

    /// <summary>Field number for the "mul" field.</summary>
    public const int MulFieldNumber = 4;
    private int mul_;
    /// <summary>
    /// 倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mul {
      get { return mul_; }
      set {
        mul_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MingTang);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MingTang other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Fan != other.Fan) return false;
      if (Tun != other.Tun) return false;
      if (Mul != other.Mul) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Fan != 0) hash ^= Fan.GetHashCode();
      if (Tun != 0) hash ^= Tun.GetHashCode();
      if (Mul != 0) hash ^= Mul.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Fan != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Fan);
      }
      if (Tun != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Tun);
      }
      if (Mul != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Mul);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Fan != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fan);
      }
      if (Tun != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tun);
      }
      if (Mul != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mul);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MingTang other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Fan != 0) {
        Fan = other.Fan;
      }
      if (other.Tun != 0) {
        Tun = other.Tun;
      }
      if (other.Mul != 0) {
        Mul = other.Mul;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Fan = input.ReadInt32();
            break;
          }
          case 24: {
            Tun = input.ReadInt32();
            break;
          }
          case 32: {
            Mul = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Hupaixing : pb::IMessage<Hupaixing> {
    private static readonly pb::MessageParser<Hupaixing> _parser = new pb::MessageParser<Hupaixing>(() => new Hupaixing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hupaixing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hupaixing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hupaixing(Hupaixing other) : this() {
      cardIds_ = other.cardIds_.Clone();
      type_ = other.type_;
      cardId_ = other.cardId_;
      huxi_ = other.huxi_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hupaixing Clone() {
      return new Hupaixing(this);
    }

    /// <summary>Field number for the "cardIds" field.</summary>
    public const int CardIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_cardIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> cardIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CardIds {
      get { return cardIds_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    /// 1吃、2碰、3偎、4臭偎、5提、6跑、7将、8坎
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 3;
    private int cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "huxi" field.</summary>
    public const int HuxiFieldNumber = 4;
    private int huxi_;
    /// <summary>
    /// 胡息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Huxi {
      get { return huxi_; }
      set {
        huxi_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hupaixing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hupaixing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cardIds_.Equals(other.cardIds_)) return false;
      if (Type != other.Type) return false;
      if (CardId != other.CardId) return false;
      if (Huxi != other.Huxi) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cardIds_.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (Huxi != 0) hash ^= Huxi.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cardIds_.WriteTo(output, _repeated_cardIds_codec);
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (CardId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CardId);
      }
      if (Huxi != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Huxi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cardIds_.CalculateSize(_repeated_cardIds_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (Huxi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Huxi);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hupaixing other) {
      if (other == null) {
        return;
      }
      cardIds_.Add(other.cardIds_);
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.Huxi != 0) {
        Huxi = other.Huxi;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            CardId = input.ReadInt32();
            break;
          }
          case 32: {
            Huxi = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家返回牌桌
  /// </summary>
  public sealed partial class Return : pb::IMessage<Return> {
    private static readonly pb::MessageParser<Return> _parser = new pb::MessageParser<Return>(() => new Return());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Return> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Return() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Return(Return other) : this() {
      memberInfo_ = other.memberInfo_.Clone();
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      surplusCardAmount_ = other.surplusCardAmount_;
      createdId_ = other.createdId_;
      nowOperationPlayerId_ = other.nowOperationPlayerId_;
      cardId_ = other.cardId_;
      nowOperation_ = other.nowOperation_;
      chongtun_ = other.chongtun_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Return Clone() {
      return new Return(this);
    }

    /// <summary>Field number for the "memberInfo" field.</summary>
    public const int MemberInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Paohuzi.Protobuf.ReturnMemberInfo> _repeated_memberInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Paohuzi.Protobuf.ReturnMemberInfo.Parser);
    private readonly pbc::RepeatedField<global::Paohuzi.Protobuf.ReturnMemberInfo> memberInfo_ = new pbc::RepeatedField<global::Paohuzi.Protobuf.ReturnMemberInfo>();
    /// <summary>
    /// 成员信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paohuzi.Protobuf.ReturnMemberInfo> MemberInfo {
      get { return memberInfo_; }
    }

    /// <summary>Field number for the "roomInfo" field.</summary>
    public const int RoomInfoFieldNumber = 2;
    private global::Paohuzi.Protobuf.RoomInfo roomInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Paohuzi.Protobuf.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    /// <summary>Field number for the "surplusCardAmount" field.</summary>
    public const int SurplusCardAmountFieldNumber = 3;
    private int surplusCardAmount_;
    /// <summary>
    /// 底牌数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SurplusCardAmount {
      get { return surplusCardAmount_; }
      set {
        surplusCardAmount_ = value;
      }
    }

    /// <summary>Field number for the "createdId" field.</summary>
    public const int CreatedIdFieldNumber = 4;
    private long createdId_;
    /// <summary>
    /// 房主ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedId {
      get { return createdId_; }
      set {
        createdId_ = value;
      }
    }

    /// <summary>Field number for the "nowOperationPlayerId" field.</summary>
    public const int NowOperationPlayerIdFieldNumber = 5;
    private long nowOperationPlayerId_;
    /// <summary>
    /// 当前正在操作的玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NowOperationPlayerId {
      get { return nowOperationPlayerId_; }
      set {
        nowOperationPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 6;
    private int cardId_;
    /// <summary>
    /// 当前正在操作的牌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "nowOperation" field.</summary>
    public const int NowOperationFieldNumber = 7;
    private int nowOperation_;
    /// <summary>
    /// 玩家当前正在进行操作 1摸牌 2打牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NowOperation {
      get { return nowOperation_; }
      set {
        nowOperation_ = value;
      }
    }

    /// <summary>Field number for the "chongtun" field.</summary>
    public const int ChongtunFieldNumber = 8;
    private int chongtun_;
    /// <summary>
    /// 充囤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chongtun {
      get { return chongtun_; }
      set {
        chongtun_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Return);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Return other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!memberInfo_.Equals(other.memberInfo_)) return false;
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      if (SurplusCardAmount != other.SurplusCardAmount) return false;
      if (CreatedId != other.CreatedId) return false;
      if (NowOperationPlayerId != other.NowOperationPlayerId) return false;
      if (CardId != other.CardId) return false;
      if (NowOperation != other.NowOperation) return false;
      if (Chongtun != other.Chongtun) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= memberInfo_.GetHashCode();
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (SurplusCardAmount != 0) hash ^= SurplusCardAmount.GetHashCode();
      if (CreatedId != 0L) hash ^= CreatedId.GetHashCode();
      if (NowOperationPlayerId != 0L) hash ^= NowOperationPlayerId.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (NowOperation != 0) hash ^= NowOperation.GetHashCode();
      if (Chongtun != 0) hash ^= Chongtun.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      memberInfo_.WriteTo(output, _repeated_memberInfo_codec);
      if (roomInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoomInfo);
      }
      if (SurplusCardAmount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SurplusCardAmount);
      }
      if (CreatedId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CreatedId);
      }
      if (NowOperationPlayerId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(NowOperationPlayerId);
      }
      if (CardId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CardId);
      }
      if (NowOperation != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NowOperation);
      }
      if (Chongtun != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Chongtun);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += memberInfo_.CalculateSize(_repeated_memberInfo_codec);
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (SurplusCardAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SurplusCardAmount);
      }
      if (CreatedId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedId);
      }
      if (NowOperationPlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NowOperationPlayerId);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (NowOperation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NowOperation);
      }
      if (Chongtun != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chongtun);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Return other) {
      if (other == null) {
        return;
      }
      memberInfo_.Add(other.memberInfo_);
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          roomInfo_ = new global::Paohuzi.Protobuf.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      if (other.SurplusCardAmount != 0) {
        SurplusCardAmount = other.SurplusCardAmount;
      }
      if (other.CreatedId != 0L) {
        CreatedId = other.CreatedId;
      }
      if (other.NowOperationPlayerId != 0L) {
        NowOperationPlayerId = other.NowOperationPlayerId;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.NowOperation != 0) {
        NowOperation = other.NowOperation;
      }
      if (other.Chongtun != 0) {
        Chongtun = other.Chongtun;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            memberInfo_.AddEntriesFrom(input, _repeated_memberInfo_codec);
            break;
          }
          case 18: {
            if (roomInfo_ == null) {
              roomInfo_ = new global::Paohuzi.Protobuf.RoomInfo();
            }
            input.ReadMessage(roomInfo_);
            break;
          }
          case 24: {
            SurplusCardAmount = input.ReadInt32();
            break;
          }
          case 32: {
            CreatedId = input.ReadInt64();
            break;
          }
          case 40: {
            NowOperationPlayerId = input.ReadInt64();
            break;
          }
          case 48: {
            CardId = input.ReadInt32();
            break;
          }
          case 56: {
            NowOperation = input.ReadInt32();
            break;
          }
          case 64: {
            Chongtun = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReturnMemberInfo : pb::IMessage<ReturnMemberInfo> {
    private static readonly pb::MessageParser<ReturnMemberInfo> _parser = new pb::MessageParser<ReturnMemberInfo>(() => new ReturnMemberInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReturnMemberInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnMemberInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnMemberInfo(ReturnMemberInfo other) : this() {
      leftHandPaixing_ = other.leftHandPaixing_.Clone();
      putCardIds_ = other.putCardIds_.Clone();
      handCardIds_ = other.handCardIds_.Clone();
      showOperation_ = other.showOperation_ != null ? other.showOperation_.Clone() : null;
      tingList_ = other.tingList_ != null ? other.tingList_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnMemberInfo Clone() {
      return new ReturnMemberInfo(this);
    }

    /// <summary>Field number for the "leftHandPaixing" field.</summary>
    public const int LeftHandPaixingFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Paohuzi.Protobuf.LeftHandPaixingInfo> _repeated_leftHandPaixing_codec
        = pb::FieldCodec.ForMessage(10, global::Paohuzi.Protobuf.LeftHandPaixingInfo.Parser);
    private readonly pbc::RepeatedField<global::Paohuzi.Protobuf.LeftHandPaixingInfo> leftHandPaixing_ = new pbc::RepeatedField<global::Paohuzi.Protobuf.LeftHandPaixingInfo>();
    /// <summary>
    /// 玩家提、跑、偎、臭偎、碰、吃操作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paohuzi.Protobuf.LeftHandPaixingInfo> LeftHandPaixing {
      get { return leftHandPaixing_; }
    }

    /// <summary>Field number for the "putCardIds" field.</summary>
    public const int PutCardIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_putCardIds_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> putCardIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 打出的牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PutCardIds {
      get { return putCardIds_; }
    }

    /// <summary>Field number for the "handCardIds" field.</summary>
    public const int HandCardIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_handCardIds_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> handCardIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家自己的手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HandCardIds {
      get { return handCardIds_; }
    }

    /// <summary>Field number for the "showOperation" field.</summary>
    public const int ShowOperationFieldNumber = 4;
    private global::Paohuzi.Protobuf.ShowOperation showOperation_;
    /// <summary>
    /// 玩家的显示操作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Paohuzi.Protobuf.ShowOperation ShowOperation {
      get { return showOperation_; }
      set {
        showOperation_ = value;
      }
    }

    /// <summary>Field number for the "tingList" field.</summary>
    public const int TingListFieldNumber = 5;
    private global::Paohuzi.Protobuf.TingList tingList_;
    /// <summary>
    /// 玩家可胡牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Paohuzi.Protobuf.TingList TingList {
      get { return tingList_; }
      set {
        tingList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReturnMemberInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReturnMemberInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!leftHandPaixing_.Equals(other.leftHandPaixing_)) return false;
      if(!putCardIds_.Equals(other.putCardIds_)) return false;
      if(!handCardIds_.Equals(other.handCardIds_)) return false;
      if (!object.Equals(ShowOperation, other.ShowOperation)) return false;
      if (!object.Equals(TingList, other.TingList)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= leftHandPaixing_.GetHashCode();
      hash ^= putCardIds_.GetHashCode();
      hash ^= handCardIds_.GetHashCode();
      if (showOperation_ != null) hash ^= ShowOperation.GetHashCode();
      if (tingList_ != null) hash ^= TingList.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      leftHandPaixing_.WriteTo(output, _repeated_leftHandPaixing_codec);
      putCardIds_.WriteTo(output, _repeated_putCardIds_codec);
      handCardIds_.WriteTo(output, _repeated_handCardIds_codec);
      if (showOperation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ShowOperation);
      }
      if (tingList_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TingList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += leftHandPaixing_.CalculateSize(_repeated_leftHandPaixing_codec);
      size += putCardIds_.CalculateSize(_repeated_putCardIds_codec);
      size += handCardIds_.CalculateSize(_repeated_handCardIds_codec);
      if (showOperation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShowOperation);
      }
      if (tingList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TingList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReturnMemberInfo other) {
      if (other == null) {
        return;
      }
      leftHandPaixing_.Add(other.leftHandPaixing_);
      putCardIds_.Add(other.putCardIds_);
      handCardIds_.Add(other.handCardIds_);
      if (other.showOperation_ != null) {
        if (showOperation_ == null) {
          showOperation_ = new global::Paohuzi.Protobuf.ShowOperation();
        }
        ShowOperation.MergeFrom(other.ShowOperation);
      }
      if (other.tingList_ != null) {
        if (tingList_ == null) {
          tingList_ = new global::Paohuzi.Protobuf.TingList();
        }
        TingList.MergeFrom(other.TingList);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            leftHandPaixing_.AddEntriesFrom(input, _repeated_leftHandPaixing_codec);
            break;
          }
          case 18:
          case 16: {
            putCardIds_.AddEntriesFrom(input, _repeated_putCardIds_codec);
            break;
          }
          case 26:
          case 24: {
            handCardIds_.AddEntriesFrom(input, _repeated_handCardIds_codec);
            break;
          }
          case 34: {
            if (showOperation_ == null) {
              showOperation_ = new global::Paohuzi.Protobuf.ShowOperation();
            }
            input.ReadMessage(showOperation_);
            break;
          }
          case 42: {
            if (tingList_ == null) {
              tingList_ = new global::Paohuzi.Protobuf.TingList();
            }
            input.ReadMessage(tingList_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家提、跑、偎、臭偎、碰、吃信息
  /// </summary>
  public sealed partial class LeftHandPaixingInfo : pb::IMessage<LeftHandPaixingInfo> {
    private static readonly pb::MessageParser<LeftHandPaixingInfo> _parser = new pb::MessageParser<LeftHandPaixingInfo>(() => new LeftHandPaixingInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeftHandPaixingInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeftHandPaixingInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeftHandPaixingInfo(LeftHandPaixingInfo other) : this() {
      cardIds_ = other.cardIds_.Clone();
      type_ = other.type_;
      cardId_ = other.cardId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeftHandPaixingInfo Clone() {
      return new LeftHandPaixingInfo(this);
    }

    /// <summary>Field number for the "cardIds" field.</summary>
    public const int CardIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_cardIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> cardIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CardIds {
      get { return cardIds_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    /// 1吃、2碰、3偎、4臭偎、5提、6跑
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 3;
    private int cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeftHandPaixingInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeftHandPaixingInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cardIds_.Equals(other.cardIds_)) return false;
      if (Type != other.Type) return false;
      if (CardId != other.CardId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cardIds_.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cardIds_.WriteTo(output, _repeated_cardIds_codec);
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (CardId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CardId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cardIds_.CalculateSize(_repeated_cardIds_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeftHandPaixingInfo other) {
      if (other == null) {
        return;
      }
      cardIds_.Add(other.cardIds_);
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            CardId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Ti : pb::IMessage<Ti> {
    private static readonly pb::MessageParser<Ti> _parser = new pb::MessageParser<Ti>(() => new Ti());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ti> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ti() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ti(Ti other) : this() {
      tiIds_ = other.tiIds_.Clone();
      userId_ = other.userId_;
      huxi_ = other.huxi_;
      tiType_ = other.tiType_;
      isChongpao_ = other.isChongpao_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ti Clone() {
      return new Ti(this);
    }

    /// <summary>Field number for the "tiIds" field.</summary>
    public const int TiIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_tiIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> tiIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 提牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TiIds {
      get { return tiIds_; }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    /// 提牌玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "huxi" field.</summary>
    public const int HuxiFieldNumber = 3;
    private int huxi_;
    /// <summary>
    /// 提牌玩家当前胡息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Huxi {
      get { return huxi_; }
      set {
        huxi_ = value;
      }
    }

    /// <summary>Field number for the "tiType" field.</summary>
    public const int TiTypeFieldNumber = 4;
    private int tiType_;
    /// <summary>
    /// 提类型：1.四字提（扣除4张手牌） 2.坎提（扣除三张手牌） 3.偎提（不扣手牌，将偎的牌转为提）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TiType {
      get { return tiType_; }
      set {
        tiType_ = value;
      }
    }

    /// <summary>Field number for the "isChongpao" field.</summary>
    public const int IsChongpaoFieldNumber = 5;
    private bool isChongpao_;
    /// <summary>
    /// 是否重跑（八块）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsChongpao {
      get { return isChongpao_; }
      set {
        isChongpao_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ti);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ti other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tiIds_.Equals(other.tiIds_)) return false;
      if (UserId != other.UserId) return false;
      if (Huxi != other.Huxi) return false;
      if (TiType != other.TiType) return false;
      if (IsChongpao != other.IsChongpao) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tiIds_.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Huxi != 0) hash ^= Huxi.GetHashCode();
      if (TiType != 0) hash ^= TiType.GetHashCode();
      if (IsChongpao != false) hash ^= IsChongpao.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tiIds_.WriteTo(output, _repeated_tiIds_codec);
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (Huxi != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Huxi);
      }
      if (TiType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TiType);
      }
      if (IsChongpao != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsChongpao);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tiIds_.CalculateSize(_repeated_tiIds_codec);
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Huxi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Huxi);
      }
      if (TiType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TiType);
      }
      if (IsChongpao != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ti other) {
      if (other == null) {
        return;
      }
      tiIds_.Add(other.tiIds_);
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Huxi != 0) {
        Huxi = other.Huxi;
      }
      if (other.TiType != 0) {
        TiType = other.TiType;
      }
      if (other.IsChongpao != false) {
        IsChongpao = other.IsChongpao;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            tiIds_.AddEntriesFrom(input, _repeated_tiIds_codec);
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 24: {
            Huxi = input.ReadInt32();
            break;
          }
          case 32: {
            TiType = input.ReadInt32();
            break;
          }
          case 40: {
            IsChongpao = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Pao : pb::IMessage<Pao> {
    private static readonly pb::MessageParser<Pao> _parser = new pb::MessageParser<Pao>(() => new Pao());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pao> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pao() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pao(Pao other) : this() {
      userId_ = other.userId_;
      paoType_ = other.paoType_;
      cardId_ = other.cardId_;
      huxi_ = other.huxi_;
      isChongpao_ = other.isChongpao_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pao Clone() {
      return new Pao(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    /// 跑牌玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "paoType" field.</summary>
    public const int PaoTypeFieldNumber = 2;
    private int paoType_;
    /// <summary>
    /// 跑牌类型 1.坎跑 2.碰跑 3.偎跑
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PaoType {
      get { return paoType_; }
      set {
        paoType_ = value;
      }
    }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 3;
    private int cardId_;
    /// <summary>
    /// 牌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "huxi" field.</summary>
    public const int HuxiFieldNumber = 4;
    private int huxi_;
    /// <summary>
    /// 胡息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Huxi {
      get { return huxi_; }
      set {
        huxi_ = value;
      }
    }

    /// <summary>Field number for the "isChongpao" field.</summary>
    public const int IsChongpaoFieldNumber = 5;
    private bool isChongpao_;
    /// <summary>
    /// 是否重跑（八块）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsChongpao {
      get { return isChongpao_; }
      set {
        isChongpao_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pao);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pao other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (PaoType != other.PaoType) return false;
      if (CardId != other.CardId) return false;
      if (Huxi != other.Huxi) return false;
      if (IsChongpao != other.IsChongpao) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (PaoType != 0) hash ^= PaoType.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (Huxi != 0) hash ^= Huxi.GetHashCode();
      if (IsChongpao != false) hash ^= IsChongpao.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (PaoType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PaoType);
      }
      if (CardId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CardId);
      }
      if (Huxi != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Huxi);
      }
      if (IsChongpao != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsChongpao);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (PaoType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PaoType);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (Huxi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Huxi);
      }
      if (IsChongpao != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pao other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.PaoType != 0) {
        PaoType = other.PaoType;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.Huxi != 0) {
        Huxi = other.Huxi;
      }
      if (other.IsChongpao != false) {
        IsChongpao = other.IsChongpao;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            PaoType = input.ReadInt32();
            break;
          }
          case 24: {
            CardId = input.ReadInt32();
            break;
          }
          case 32: {
            Huxi = input.ReadInt32();
            break;
          }
          case 40: {
            IsChongpao = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 听牌列表
  /// </summary>
  public sealed partial class TingList : pb::IMessage<TingList> {
    private static readonly pb::MessageParser<TingList> _parser = new pb::MessageParser<TingList>(() => new TingList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TingList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TingList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TingList(TingList other) : this() {
      tingList_ = other.tingList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TingList Clone() {
      return new TingList(this);
    }

    /// <summary>Field number for the "tingList" field.</summary>
    public const int TingList_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Paohuzi.Protobuf.TingInfo> _repeated_tingList_codec
        = pb::FieldCodec.ForMessage(10, global::Paohuzi.Protobuf.TingInfo.Parser);
    private readonly pbc::RepeatedField<global::Paohuzi.Protobuf.TingInfo> tingList_ = new pbc::RepeatedField<global::Paohuzi.Protobuf.TingInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paohuzi.Protobuf.TingInfo> TingList_ {
      get { return tingList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TingList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TingList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tingList_.Equals(other.tingList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tingList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tingList_.WriteTo(output, _repeated_tingList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tingList_.CalculateSize(_repeated_tingList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TingList other) {
      if (other == null) {
        return;
      }
      tingList_.Add(other.tingList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tingList_.AddEntriesFrom(input, _repeated_tingList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TingInfo : pb::IMessage<TingInfo> {
    private static readonly pb::MessageParser<TingInfo> _parser = new pb::MessageParser<TingInfo>(() => new TingInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TingInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TingInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TingInfo(TingInfo other) : this() {
      cardId_ = other.cardId_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TingInfo Clone() {
      return new TingInfo(this);
    }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 1;
    private int cardId_;
    /// <summary>
    /// 牌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    /// 0.自摸和非自摸均可胡 1.自摸胡 2.非自摸胡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TingInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TingInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardId != other.CardId) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TingInfo other) {
      if (other == null) {
        return;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CardId = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩法规则
  /// </summary>
  public sealed partial class Rules : pb::IMessage<Rules> {
    private static readonly pb::MessageParser<Rules> _parser = new pb::MessageParser<Rules>(() => new Rules());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rules(Rules other) : this() {
      rules_ = other.rules_.Clone();
      chongtun_ = other.chongtun_;
      maxScore_ = other.maxScore_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rules Clone() {
      return new Rules(this);
    }

    /// <summary>Field number for the "rules" field.</summary>
    public const int Rules_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Paohuzi.Protobuf.Play> _repeated_rules_codec
        = pb::FieldCodec.ForMessage(10, global::Paohuzi.Protobuf.Play.Parser);
    private readonly pbc::RepeatedField<global::Paohuzi.Protobuf.Play> rules_ = new pbc::RepeatedField<global::Paohuzi.Protobuf.Play>();
    /// <summary>
    /// 玩法规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paohuzi.Protobuf.Play> Rules_ {
      get { return rules_; }
    }

    /// <summary>Field number for the "chongtun" field.</summary>
    public const int ChongtunFieldNumber = 2;
    private int chongtun_;
    /// <summary>
    /// 充囤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chongtun {
      get { return chongtun_; }
      set {
        chongtun_ = value;
      }
    }

    /// <summary>Field number for the "maxScore" field.</summary>
    public const int MaxScoreFieldNumber = 3;
    private int maxScore_;
    /// <summary>
    /// 单局最大分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxScore {
      get { return maxScore_; }
      set {
        maxScore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rules_.Equals(other.rules_)) return false;
      if (Chongtun != other.Chongtun) return false;
      if (MaxScore != other.MaxScore) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rules_.GetHashCode();
      if (Chongtun != 0) hash ^= Chongtun.GetHashCode();
      if (MaxScore != 0) hash ^= MaxScore.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rules_.WriteTo(output, _repeated_rules_codec);
      if (Chongtun != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Chongtun);
      }
      if (MaxScore != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxScore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rules_.CalculateSize(_repeated_rules_codec);
      if (Chongtun != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chongtun);
      }
      if (MaxScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxScore);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rules other) {
      if (other == null) {
        return;
      }
      rules_.Add(other.rules_);
      if (other.Chongtun != 0) {
        Chongtun = other.Chongtun;
      }
      if (other.MaxScore != 0) {
        MaxScore = other.MaxScore;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rules_.AddEntriesFrom(input, _repeated_rules_codec);
            break;
          }
          case 16: {
            Chongtun = input.ReadInt32();
            break;
          }
          case 24: {
            MaxScore = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserLeave : pb::IMessage<UserLeave> {
    private static readonly pb::MessageParser<UserLeave> _parser = new pb::MessageParser<UserLeave>(() => new UserLeave());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserLeave> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLeave() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLeave(UserLeave other) : this() {
      userId_ = other.userId_;
      startState_ = other.startState_;
      isRemove_ = other.isRemove_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLeave Clone() {
      return new UserLeave(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "startState" field.</summary>
    public const int StartStateFieldNumber = 2;
    private int startState_;
    /// <summary>
    /// 房间开始状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartState {
      get { return startState_; }
      set {
        startState_ = value;
      }
    }

    /// <summary>Field number for the "isRemove" field.</summary>
    public const int IsRemoveFieldNumber = 3;
    private bool isRemove_;
    /// <summary>
    /// 是否房间内移除
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRemove {
      get { return isRemove_; }
      set {
        isRemove_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserLeave);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserLeave other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (StartState != other.StartState) return false;
      if (IsRemove != other.IsRemove) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (StartState != 0) hash ^= StartState.GetHashCode();
      if (IsRemove != false) hash ^= IsRemove.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (StartState != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StartState);
      }
      if (IsRemove != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsRemove);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (StartState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartState);
      }
      if (IsRemove != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserLeave other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.StartState != 0) {
        StartState = other.StartState;
      }
      if (other.IsRemove != false) {
        IsRemove = other.IsRemove;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            StartState = input.ReadInt32();
            break;
          }
          case 24: {
            IsRemove = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 录像
  /// </summary>
  public sealed partial class MessageVideo : pb::IMessage<MessageVideo> {
    private static readonly pb::MessageParser<MessageVideo> _parser = new pb::MessageParser<MessageVideo>(() => new MessageVideo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageVideo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageVideo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageVideo(MessageVideo other) : this() {
      records_ = other.records_.Clone();
      start_ = other.start_ != null ? other.start_.Clone() : null;
      end_ = other.end_ != null ? other.end_.Clone() : null;
      rules_ = other.rules_ != null ? other.rules_.Clone() : null;
      roomId_ = other.roomId_;
      maxRound_ = other.maxRound_;
      curRound_ = other.curRound_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageVideo Clone() {
      return new MessageVideo(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Paohuzi.Protobuf.MessageRecordOperation> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::Paohuzi.Protobuf.MessageRecordOperation.Parser);
    private readonly pbc::RepeatedField<global::Paohuzi.Protobuf.MessageRecordOperation> records_ = new pbc::RepeatedField<global::Paohuzi.Protobuf.MessageRecordOperation>();
    /// <summary>
    /// 操作列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paohuzi.Protobuf.MessageRecordOperation> Records {
      get { return records_; }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 2;
    private global::Paohuzi.Protobuf.MessageRecordStart start_;
    /// <summary>
    /// 牌局开始数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Paohuzi.Protobuf.MessageRecordStart Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 3;
    private global::Paohuzi.Protobuf.MessageRecordEnd end_;
    /// <summary>
    /// 结算
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Paohuzi.Protobuf.MessageRecordEnd End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    /// <summary>Field number for the "rules" field.</summary>
    public const int RulesFieldNumber = 4;
    private global::Paohuzi.Protobuf.Rules rules_;
    /// <summary>
    /// 玩法规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Paohuzi.Protobuf.Rules Rules {
      get { return rules_; }
      set {
        rules_ = value;
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 5;
    private string roomId_ = "";
    /// <summary>
    /// 房间号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maxRound" field.</summary>
    public const int MaxRoundFieldNumber = 6;
    private int maxRound_;
    /// <summary>
    /// 最大局
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxRound {
      get { return maxRound_; }
      set {
        maxRound_ = value;
      }
    }

    /// <summary>Field number for the "curRound" field.</summary>
    public const int CurRoundFieldNumber = 7;
    private int curRound_;
    /// <summary>
    /// 当前局
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurRound {
      get { return curRound_; }
      set {
        curRound_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageVideo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageVideo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!records_.Equals(other.records_)) return false;
      if (!object.Equals(Start, other.Start)) return false;
      if (!object.Equals(End, other.End)) return false;
      if (!object.Equals(Rules, other.Rules)) return false;
      if (RoomId != other.RoomId) return false;
      if (MaxRound != other.MaxRound) return false;
      if (CurRound != other.CurRound) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= records_.GetHashCode();
      if (start_ != null) hash ^= Start.GetHashCode();
      if (end_ != null) hash ^= End.GetHashCode();
      if (rules_ != null) hash ^= Rules.GetHashCode();
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (MaxRound != 0) hash ^= MaxRound.GetHashCode();
      if (CurRound != 0) hash ^= CurRound.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      records_.WriteTo(output, _repeated_records_codec);
      if (start_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Start);
      }
      if (end_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(End);
      }
      if (rules_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Rules);
      }
      if (RoomId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RoomId);
      }
      if (MaxRound != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxRound);
      }
      if (CurRound != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CurRound);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_repeated_records_codec);
      if (start_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      if (end_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(End);
      }
      if (rules_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rules);
      }
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (MaxRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRound);
      }
      if (CurRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurRound);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageVideo other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
      if (other.start_ != null) {
        if (start_ == null) {
          start_ = new global::Paohuzi.Protobuf.MessageRecordStart();
        }
        Start.MergeFrom(other.Start);
      }
      if (other.end_ != null) {
        if (end_ == null) {
          end_ = new global::Paohuzi.Protobuf.MessageRecordEnd();
        }
        End.MergeFrom(other.End);
      }
      if (other.rules_ != null) {
        if (rules_ == null) {
          rules_ = new global::Paohuzi.Protobuf.Rules();
        }
        Rules.MergeFrom(other.Rules);
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.MaxRound != 0) {
        MaxRound = other.MaxRound;
      }
      if (other.CurRound != 0) {
        CurRound = other.CurRound;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
          case 18: {
            if (start_ == null) {
              start_ = new global::Paohuzi.Protobuf.MessageRecordStart();
            }
            input.ReadMessage(start_);
            break;
          }
          case 26: {
            if (end_ == null) {
              end_ = new global::Paohuzi.Protobuf.MessageRecordEnd();
            }
            input.ReadMessage(end_);
            break;
          }
          case 34: {
            if (rules_ == null) {
              rules_ = new global::Paohuzi.Protobuf.Rules();
            }
            input.ReadMessage(rules_);
            break;
          }
          case 42: {
            RoomId = input.ReadString();
            break;
          }
          case 48: {
            MaxRound = input.ReadInt32();
            break;
          }
          case 56: {
            CurRound = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 牌局开始信息
  /// </summary>
  public sealed partial class MessageRecordStart : pb::IMessage<MessageRecordStart> {
    private static readonly pb::MessageParser<MessageRecordStart> _parser = new pb::MessageParser<MessageRecordStart>(() => new MessageRecordStart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageRecordStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageRecordStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageRecordStart(MessageRecordStart other) : this() {
      members_ = other.members_.Clone();
      licensing_ = other.licensing_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageRecordStart Clone() {
      return new MessageRecordStart(this);
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Paohuzi.Protobuf.RoomMember> _repeated_members_codec
        = pb::FieldCodec.ForMessage(10, global::Paohuzi.Protobuf.RoomMember.Parser);
    private readonly pbc::RepeatedField<global::Paohuzi.Protobuf.RoomMember> members_ = new pbc::RepeatedField<global::Paohuzi.Protobuf.RoomMember>();
    /// <summary>
    /// 玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paohuzi.Protobuf.RoomMember> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "licensing" field.</summary>
    public const int LicensingFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Paohuzi.Protobuf.Licensing> _repeated_licensing_codec
        = pb::FieldCodec.ForMessage(18, global::Paohuzi.Protobuf.Licensing.Parser);
    private readonly pbc::RepeatedField<global::Paohuzi.Protobuf.Licensing> licensing_ = new pbc::RepeatedField<global::Paohuzi.Protobuf.Licensing>();
    /// <summary>
    /// 发牌数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paohuzi.Protobuf.Licensing> Licensing {
      get { return licensing_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageRecordStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageRecordStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!members_.Equals(other.members_)) return false;
      if(!licensing_.Equals(other.licensing_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= members_.GetHashCode();
      hash ^= licensing_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      members_.WriteTo(output, _repeated_members_codec);
      licensing_.WriteTo(output, _repeated_licensing_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += members_.CalculateSize(_repeated_members_codec);
      size += licensing_.CalculateSize(_repeated_licensing_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageRecordStart other) {
      if (other == null) {
        return;
      }
      members_.Add(other.members_);
      licensing_.Add(other.licensing_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 18: {
            licensing_.AddEntriesFrom(input, _repeated_licensing_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 牌局结束信息
  /// </summary>
  public sealed partial class MessageRecordEnd : pb::IMessage<MessageRecordEnd> {
    private static readonly pb::MessageParser<MessageRecordEnd> _parser = new pb::MessageParser<MessageRecordEnd>(() => new MessageRecordEnd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageRecordEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageRecordEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageRecordEnd(MessageRecordEnd other) : this() {
      settlement_ = other.settlement_ != null ? other.settlement_.Clone() : null;
      handCardIds_ = other.handCardIds_.Clone();
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageRecordEnd Clone() {
      return new MessageRecordEnd(this);
    }

    /// <summary>Field number for the "settlement" field.</summary>
    public const int SettlementFieldNumber = 1;
    private global::Paohuzi.Protobuf.BoardSettlement settlement_;
    /// <summary>
    /// 结算信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Paohuzi.Protobuf.BoardSettlement Settlement {
      get { return settlement_; }
      set {
        settlement_ = value;
      }
    }

    /// <summary>Field number for the "handCardIds" field.</summary>
    public const int HandCardIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Paohuzi.Protobuf.HandCards> _repeated_handCardIds_codec
        = pb::FieldCodec.ForMessage(18, global::Paohuzi.Protobuf.HandCards.Parser);
    private readonly pbc::RepeatedField<global::Paohuzi.Protobuf.HandCards> handCardIds_ = new pbc::RepeatedField<global::Paohuzi.Protobuf.HandCards>();
    /// <summary>
    ///  手牌 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paohuzi.Protobuf.HandCards> HandCardIds {
      get { return handCardIds_; }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 3;
    private long userId_;
    /// <summary>
    /// 胡牌玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageRecordEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageRecordEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Settlement, other.Settlement)) return false;
      if(!handCardIds_.Equals(other.handCardIds_)) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (settlement_ != null) hash ^= Settlement.GetHashCode();
      hash ^= handCardIds_.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (settlement_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Settlement);
      }
      handCardIds_.WriteTo(output, _repeated_handCardIds_codec);
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (settlement_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Settlement);
      }
      size += handCardIds_.CalculateSize(_repeated_handCardIds_codec);
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageRecordEnd other) {
      if (other == null) {
        return;
      }
      if (other.settlement_ != null) {
        if (settlement_ == null) {
          settlement_ = new global::Paohuzi.Protobuf.BoardSettlement();
        }
        Settlement.MergeFrom(other.Settlement);
      }
      handCardIds_.Add(other.handCardIds_);
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (settlement_ == null) {
              settlement_ = new global::Paohuzi.Protobuf.BoardSettlement();
            }
            input.ReadMessage(settlement_);
            break;
          }
          case 18: {
            handCardIds_.AddEntriesFrom(input, _repeated_handCardIds_codec);
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家操作
  /// </summary>
  public sealed partial class MessageRecordOperation : pb::IMessage<MessageRecordOperation> {
    private static readonly pb::MessageParser<MessageRecordOperation> _parser = new pb::MessageParser<MessageRecordOperation>(() => new MessageRecordOperation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageRecordOperation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageRecordOperation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageRecordOperation(MessageRecordOperation other) : this() {
      showOperations_ = other.showOperations_.Clone();
      chiCardIds_ = other.chiCardIds_.Clone();
      tiList_ = other.tiList_.Clone();
      userId_ = other.userId_;
      messageId_ = other.messageId_;
      cardId_ = other.cardId_;
      cardAmount_ = other.cardAmount_;
      huxi_ = other.huxi_;
      paoOrTiType_ = other.paoOrTiType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageRecordOperation Clone() {
      return new MessageRecordOperation(this);
    }

    /// <summary>Field number for the "showOperations" field.</summary>
    public const int ShowOperationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Paohuzi.Protobuf.MessageRecordShowOperation> _repeated_showOperations_codec
        = pb::FieldCodec.ForMessage(10, global::Paohuzi.Protobuf.MessageRecordShowOperation.Parser);
    private readonly pbc::RepeatedField<global::Paohuzi.Protobuf.MessageRecordShowOperation> showOperations_ = new pbc::RepeatedField<global::Paohuzi.Protobuf.MessageRecordShowOperation>();
    /// <summary>
    /// 玩家显示操作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paohuzi.Protobuf.MessageRecordShowOperation> ShowOperations {
      get { return showOperations_; }
    }

    /// <summary>Field number for the "chiCardIds" field.</summary>
    public const int ChiCardIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Paohuzi.Protobuf.LastChi> _repeated_chiCardIds_codec
        = pb::FieldCodec.ForMessage(18, global::Paohuzi.Protobuf.LastChi.Parser);
    private readonly pbc::RepeatedField<global::Paohuzi.Protobuf.LastChi> chiCardIds_ = new pbc::RepeatedField<global::Paohuzi.Protobuf.LastChi>();
    /// <summary>
    /// 玩家吃、比牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paohuzi.Protobuf.LastChi> ChiCardIds {
      get { return chiCardIds_; }
    }

    /// <summary>Field number for the "tiList" field.</summary>
    public const int TiListFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_tiList_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> tiList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 提牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TiList {
      get { return tiList_; }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 4;
    private long userId_;
    /// <summary>
    /// 操作玩家ID 当玩家显示操作时userId、chiCardIds、tiList、cardAmount、huxi均不生效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "messageId" field.</summary>
    public const int MessageIdFieldNumber = 5;
    private int messageId_;
    /// <summary>
    /// 消息标号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MessageId {
      get { return messageId_; }
      set {
        messageId_ = value;
      }
    }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 6;
    private int cardId_;
    /// <summary>
    /// 发挡底牌、获得挡底牌、摸牌、打牌、碰牌、胡牌、偎牌、臭偎、跑牌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "cardAmount" field.</summary>
    public const int CardAmountFieldNumber = 7;
    private int cardAmount_;
    /// <summary>
    /// 剩余牌数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardAmount {
      get { return cardAmount_; }
      set {
        cardAmount_ = value;
      }
    }

    /// <summary>Field number for the "huxi" field.</summary>
    public const int HuxiFieldNumber = 8;
    private int huxi_;
    /// <summary>
    /// 当前胡息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Huxi {
      get { return huxi_; }
      set {
        huxi_ = value;
      }
    }

    /// <summary>Field number for the "paoOrTiType" field.</summary>
    public const int PaoOrTiTypeFieldNumber = 9;
    private int paoOrTiType_;
    /// <summary>
    /// 提/跑类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PaoOrTiType {
      get { return paoOrTiType_; }
      set {
        paoOrTiType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageRecordOperation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageRecordOperation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!showOperations_.Equals(other.showOperations_)) return false;
      if(!chiCardIds_.Equals(other.chiCardIds_)) return false;
      if(!tiList_.Equals(other.tiList_)) return false;
      if (UserId != other.UserId) return false;
      if (MessageId != other.MessageId) return false;
      if (CardId != other.CardId) return false;
      if (CardAmount != other.CardAmount) return false;
      if (Huxi != other.Huxi) return false;
      if (PaoOrTiType != other.PaoOrTiType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= showOperations_.GetHashCode();
      hash ^= chiCardIds_.GetHashCode();
      hash ^= tiList_.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (MessageId != 0) hash ^= MessageId.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (CardAmount != 0) hash ^= CardAmount.GetHashCode();
      if (Huxi != 0) hash ^= Huxi.GetHashCode();
      if (PaoOrTiType != 0) hash ^= PaoOrTiType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      showOperations_.WriteTo(output, _repeated_showOperations_codec);
      chiCardIds_.WriteTo(output, _repeated_chiCardIds_codec);
      tiList_.WriteTo(output, _repeated_tiList_codec);
      if (UserId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UserId);
      }
      if (MessageId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MessageId);
      }
      if (CardId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CardId);
      }
      if (CardAmount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CardAmount);
      }
      if (Huxi != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Huxi);
      }
      if (PaoOrTiType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(PaoOrTiType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += showOperations_.CalculateSize(_repeated_showOperations_codec);
      size += chiCardIds_.CalculateSize(_repeated_chiCardIds_codec);
      size += tiList_.CalculateSize(_repeated_tiList_codec);
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (MessageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageId);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (CardAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardAmount);
      }
      if (Huxi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Huxi);
      }
      if (PaoOrTiType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PaoOrTiType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageRecordOperation other) {
      if (other == null) {
        return;
      }
      showOperations_.Add(other.showOperations_);
      chiCardIds_.Add(other.chiCardIds_);
      tiList_.Add(other.tiList_);
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.MessageId != 0) {
        MessageId = other.MessageId;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.CardAmount != 0) {
        CardAmount = other.CardAmount;
      }
      if (other.Huxi != 0) {
        Huxi = other.Huxi;
      }
      if (other.PaoOrTiType != 0) {
        PaoOrTiType = other.PaoOrTiType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            showOperations_.AddEntriesFrom(input, _repeated_showOperations_codec);
            break;
          }
          case 18: {
            chiCardIds_.AddEntriesFrom(input, _repeated_chiCardIds_codec);
            break;
          }
          case 26:
          case 24: {
            tiList_.AddEntriesFrom(input, _repeated_tiList_codec);
            break;
          }
          case 32: {
            UserId = input.ReadInt64();
            break;
          }
          case 40: {
            MessageId = input.ReadInt32();
            break;
          }
          case 48: {
            CardId = input.ReadInt32();
            break;
          }
          case 56: {
            CardAmount = input.ReadInt32();
            break;
          }
          case 64: {
            Huxi = input.ReadInt32();
            break;
          }
          case 72: {
            PaoOrTiType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家的胡、碰、吃、过操作
  /// </summary>
  public sealed partial class MessageRecordShowOperation : pb::IMessage<MessageRecordShowOperation> {
    private static readonly pb::MessageParser<MessageRecordShowOperation> _parser = new pb::MessageParser<MessageRecordShowOperation>(() => new MessageRecordShowOperation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageRecordShowOperation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageRecordShowOperation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageRecordShowOperation(MessageRecordShowOperation other) : this() {
      operations_ = other.operations_.Clone();
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageRecordShowOperation Clone() {
      return new MessageRecordShowOperation(this);
    }

    /// <summary>Field number for the "operations" field.</summary>
    public const int OperationsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_operations_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> operations_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 长度为4的数组。数组第0/1/2/3位分别表示胡、碰、吃、过操作，例如[1,1,1,1]表示显示胡、碰、吃、过操作按钮
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Operations {
      get { return operations_; }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageRecordShowOperation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageRecordShowOperation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!operations_.Equals(other.operations_)) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= operations_.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      operations_.WriteTo(output, _repeated_operations_codec);
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += operations_.CalculateSize(_repeated_operations_codec);
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageRecordShowOperation other) {
      if (other == null) {
        return;
      }
      operations_.Add(other.operations_);
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            operations_.AddEntriesFrom(input, _repeated_operations_codec);
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家位置信息
  /// </summary>
  public sealed partial class Location : pb::IMessage<Location> {
    private static readonly pb::MessageParser<Location> _parser = new pb::MessageParser<Location>(() => new Location());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Location> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location(Location other) : this() {
      longitude_ = other.longitude_;
      latitude_ = other.latitude_;
      location_ = other.location_;
      ip_ = other.ip_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location Clone() {
      return new Location(this);
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 2;
    private string longitude_ = "";
    /// <summary>
    /// 经度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Longitude {
      get { return longitude_; }
      set {
        longitude_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 3;
    private string latitude_ = "";
    /// <summary>
    /// 纬度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Latitude {
      get { return latitude_; }
      set {
        latitude_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int Location_FieldNumber = 4;
    private string location_ = "";
    /// <summary>
    /// 位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location_ {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 5;
    private string ip_ = "";
    /// <summary>
    /// IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Location);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Location other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Longitude != other.Longitude) return false;
      if (Latitude != other.Latitude) return false;
      if (Location_ != other.Location_) return false;
      if (Ip != other.Ip) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Longitude.Length != 0) hash ^= Longitude.GetHashCode();
      if (Latitude.Length != 0) hash ^= Latitude.GetHashCode();
      if (Location_.Length != 0) hash ^= Location_.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Longitude.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Longitude);
      }
      if (Latitude.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Latitude);
      }
      if (Location_.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Location_);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Ip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Longitude.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Longitude);
      }
      if (Latitude.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Latitude);
      }
      if (Location_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location_);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Location other) {
      if (other == null) {
        return;
      }
      if (other.Longitude.Length != 0) {
        Longitude = other.Longitude;
      }
      if (other.Latitude.Length != 0) {
        Latitude = other.Latitude;
      }
      if (other.Location_.Length != 0) {
        Location_ = other.Location_;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            Longitude = input.ReadString();
            break;
          }
          case 26: {
            Latitude = input.ReadString();
            break;
          }
          case 34: {
            Location_ = input.ReadString();
            break;
          }
          case 42: {
            Ip = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateLocation : pb::IMessage<UpdateLocation> {
    private static readonly pb::MessageParser<UpdateLocation> _parser = new pb::MessageParser<UpdateLocation>(() => new UpdateLocation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateLocation(UpdateLocation other) : this() {
      location_ = other.location_ != null ? other.location_.Clone() : null;
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateLocation Clone() {
      return new UpdateLocation(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private global::Paohuzi.Protobuf.Location location_;
    /// <summary>
    /// 位置信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Paohuzi.Protobuf.Location Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Location, other.Location)) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (location_ != null) hash ^= Location.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateLocation other) {
      if (other == null) {
        return;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::Paohuzi.Protobuf.Location();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (location_ == null) {
              location_ = new global::Paohuzi.Protobuf.Location();
            }
            input.ReadMessage(location_);
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家下线后返回游戏显示当前房间的解散状态
  /// </summary>
  public sealed partial class DisbandShows : pb::IMessage<DisbandShows> {
    private static readonly pb::MessageParser<DisbandShows> _parser = new pb::MessageParser<DisbandShows>(() => new DisbandShows());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisbandShows> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paohuzi.Protobuf.PhzroomReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisbandShows() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisbandShows(DisbandShows other) : this() {
      opts_ = other.opts_.Clone();
      applyUserId_ = other.applyUserId_;
      surplusTime_ = other.surplusTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisbandShows Clone() {
      return new DisbandShows(this);
    }

    /// <summary>Field number for the "opts" field.</summary>
    public const int OptsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Paohuzi.Protobuf.DisbandOp> _repeated_opts_codec
        = pb::FieldCodec.ForMessage(10, global::Paohuzi.Protobuf.DisbandOp.Parser);
    private readonly pbc::RepeatedField<global::Paohuzi.Protobuf.DisbandOp> opts_ = new pbc::RepeatedField<global::Paohuzi.Protobuf.DisbandOp>();
    /// <summary>
    /// 玩家的解散房间状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paohuzi.Protobuf.DisbandOp> Opts {
      get { return opts_; }
    }

    /// <summary>Field number for the "applyUserId" field.</summary>
    public const int ApplyUserIdFieldNumber = 2;
    private long applyUserId_;
    /// <summary>
    /// 申请解散房间的用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ApplyUserId {
      get { return applyUserId_; }
      set {
        applyUserId_ = value;
      }
    }

    /// <summary>Field number for the "surplusTime" field.</summary>
    public const int SurplusTimeFieldNumber = 3;
    private int surplusTime_;
    /// <summary>
    /// 倒计时剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SurplusTime {
      get { return surplusTime_; }
      set {
        surplusTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisbandShows);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisbandShows other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!opts_.Equals(other.opts_)) return false;
      if (ApplyUserId != other.ApplyUserId) return false;
      if (SurplusTime != other.SurplusTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= opts_.GetHashCode();
      if (ApplyUserId != 0L) hash ^= ApplyUserId.GetHashCode();
      if (SurplusTime != 0) hash ^= SurplusTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      opts_.WriteTo(output, _repeated_opts_codec);
      if (ApplyUserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ApplyUserId);
      }
      if (SurplusTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SurplusTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += opts_.CalculateSize(_repeated_opts_codec);
      if (ApplyUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ApplyUserId);
      }
      if (SurplusTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SurplusTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisbandShows other) {
      if (other == null) {
        return;
      }
      opts_.Add(other.opts_);
      if (other.ApplyUserId != 0L) {
        ApplyUserId = other.ApplyUserId;
      }
      if (other.SurplusTime != 0) {
        SurplusTime = other.SurplusTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            opts_.AddEntriesFrom(input, _repeated_opts_codec);
            break;
          }
          case 16: {
            ApplyUserId = input.ReadInt64();
            break;
          }
          case 24: {
            SurplusTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
