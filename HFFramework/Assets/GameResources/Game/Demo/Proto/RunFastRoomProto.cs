// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: runFastRoomProto.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Newddz.RoomProto {

  /// <summary>Holder for reflection information generated from runFastRoomProto.proto</summary>
  public static partial class RunFastRoomProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for runFastRoomProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RunFastRoomProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZydW5GYXN0Um9vbVByb3RvLnByb3RvEhBuZXdkZHouUm9vbVByb3RvGgxj",
            "b21tb24ucHJvdG8iGQoGUm9vbUlkEg8KB3Jvb21faWQYASABKAMiKgoGVHlw",
            "ZUlkEhAKCGdyb3VwX2lkGAEgASgFEg4KBnN1Yl9pZBgCIAEoBSIrCgtQbGF5",
            "ZXJQb2ludBINCgVwb3NfeBgBIAEoARINCgVwb3NfeRgCIAEoASItCgdSb29t",
            "UG9zEg8KB3Jvb21faWQYASABKAMSEQoJcG9zX2luZGV4GAIgASgFIlQKEFJv",
            "b21Qb3NDb3VudERvd24SDwoHcm9vbV9pZBgBIAEoAxIRCglwb3NfaW5kZXgY",
            "AiABKAUSDgoGbWlsbGlzGAMgASgDEgwKBHR5cGUYBCABKAUiVwoMUm9vbVBv",
            "c0NhcmRzEg8KB3Jvb21faWQYASABKAMSEQoJcG9zX2luZGV4GAIgASgFEg0K",
            "BWNhcmRzGAMgAygFEhQKDGZpcnN0UHVzaFBvcxgEIAEoBSL+AQoKUGxheWVy",
            "SW5mbxIPCgdyb29tX2lkGAEgASgDEhEKCXBvc19pbmRleBgCIAEoBRIPCgd1",
            "c2VyX2lkGAMgASgDEhEKCXVzZXJfbmFtZRgEIAEoCRIUCgxoZWFkX2ltZ191",
            "cmwYBSABKAkSDAoEZ29sZBgGIAEoAxILCgNzZXgYByABKAkSDQoFY2FyZHMY",
            "CCADKAUSDQoFc3RhdGUYCSABKAUSEgoKaXNfbWFuYWdlZBgKIAEoCBIMCgRy",
            "b2xlGAsgASgFEhQKDGNhbGxNdWx0aXBsZRgMIAEoBRIRCglsYXN0Q2FyZHMY",
            "DSADKAUSDgoGdGltZXJzGA4gASgDIvoCCghSb29tSW5mbxIPCgdyb29tX2lk",
            "GAEgASgDEg8KB3R5cGVfaWQYAiABKAMSEQoJcG9zX2luZGV4GAMgASgFEhIK",
            "CnJvb21fc3RhZ2UYBCABKAUSEAoIbXVsdGlwbGUYBSABKAMSLQoHcGxheWVy",
            "cxgGIAMoCzIcLm5ld2Rkei5Sb29tUHJvdG8uUGxheWVySW5mbxIRCgliYXNl",
            "X2dvbGQYByABKAMSEgoKaG9sZV9jYXJkcxgIIAMoBRIXCg9qb2luUm9vbU1p",
            "bkdvbGQYCSABKAMSEQoJY3VySW5uaW5nGAogASgFEhYKDmN1clRvdGFsSW5u",
            "aW5nGAsgASgFEjEKCmNyZWF0ZUluZm8YDCABKAsyHS5jZW50ZXJzZGsucHJv",
            "dG9idWYuUGFvRGVLdWFpEhEKCWxhc3RDYXJkcxgNIAMoBRIPCgdsYXN0UG9z",
            "GA4gASgFEhQKDGZpcnN0UHVzaFBvcxgPIAEoBRIMCgR0aW1lGBAgASgDIlwK",
            "CVNraWxsSXRlbRIPCgdyb29tX2lkGAEgASgDEg8KB3VzZXJfaWQYAiABKAMS",
            "DwoHaXRlbV9pZBgDIAEoAxINCgVwb3NfeBgEIAEoARINCgVwb3NfeRgFIAEo",
            "ASJ/CgpSb29tUmVzdWx0Eg8KB3Jvb21faWQYASABKAMSDAoEdHlwZRgCIAEo",
            "BRIMCgRnb2xkGAMgAygDEjEKBWluZm9zGAQgAygLMiIubmV3ZGR6LlJvb21Q",
            "cm90by5TaW1wbGVSZXN1bHRJbmZvEhEKCWZpbmlzaF9qdhgFIAEoBSKHAQoK",
            "Um9vbUFjdGlvbhIPCgdyb29tX2lkGAEgASgDEhEKCXBvc19pbmRleBgCIAEo",
            "BRITCgthY3Rpb25fdHlwZRgDIAEoBRIQCghtdWx0aXBsZRgEIAEoBRINCgVj",
            "YXJkcxgFIAMoBRIMCgRyYW5rGAYgASgFEhEKCWNhcmRzTGVmdBgHIAEoBSJE",
            "CgxSb29tTXVsdGlwbGUSDwoHcm9vbV9pZBgBIAEoAxIRCgliYXNlX2dvbGQY",
            "AiABKAMSEAoIbXVsdGlwbGUYAyABKAMiWQoLUm9vbU1pc3Npb24SDwoHcm9v",
            "bV9pZBgBIAEoAxISCgpyb29tX2xldmVsGAIgASgFEhIKCm1pc3Npb25faWQY",
            "AyABKAMSEQoJaXNfZmluaXNoGAQgASgIIqIBCg5Sb29tTHVja3lXaGVlbBIP",
            "Cgdyb29tX2lkGAEgASgDEhIKCnJvb21fbGV2ZWwYAiABKAUSDwoHaW5uaW5n",
            "cxgDIAEoBRIYChBpbm5pbmdzX3RvX2JvbnVzGAQgASgFEhEKCWJvbnVzX2lk",
            "cxgFIAMoBRIUCgxib251c19jb3VudHMYBiADKAUSFwoPYm9udXNfbXVsdGlw",
            "bGVzGAcgAygFImQKE1Jvb21MdWNreVdoZWVsQm9udXMSDwoHcm9vbV9pZBgB",
            "IAEoAxISCgpyb29tX2xldmVsGAIgASgFEhAKCGlkX2luZGV4GAMgASgFEhYK",
            "Dm11bHRpcGxlX2luZGV4GAQgASgFIn0KCVJvb21Sb2JvdBIPCgdyb29tX2lk",
            "GAEgASgDEg8KB3R5cGVfaWQYAiABKAUSDwoHdXNlcl9pZBgDIAEoAxIMCgRu",
            "YW1lGAQgASgJEhQKDGhlYWRfaW1nX3VybBgFIAEoCRILCgNzZXgYBiABKAkS",
            "DAoEZ29sZBgHIAEoAyKdAQoQU2ltcGxlUmVzdWx0SW5mbxIPCgd1c2VyX2lk",
            "GAEgASgDEhAKCHVzZXJOYW1lGAIgASgJEhQKDGhlYWRfaW1nX3VybBgDIAEo",
            "CRIPCgdwaWFvRmVuGAQgASgFEg4KBnpoYWRhbhgFIAEoBRIQCgh0b3RhbFdp",
            "bhgGIAEoBRINCgVjYXJkcxgHIAMoBRIOCgZyZWRUZW4YCCABKAgirgEKD1Jl",
            "c3VsdFBhbmVsSW5mbxIPCgd1c2VyX2lkGAEgASgDEhAKCHVzZXJOYW1lGAIg",
            "ASgJEhQKDGhlYWRfaW1nX3VybBgDIAEoCRIMCgRnb2xkGAQgASgFEg8KB3Bp",
            "YW9GZW4YBSABKAUSDgoGemhhZGFuGAYgASgFEhAKCHRvdGFsV2luGAcgASgF",
            "Eg4KBm1heFdpbhgIIAEoBRIRCgl3aW5Mb3NlSnYYCSABKAkirAEKDUFsbFJl",
            "c3VsdEluZm8SDwoHcm9vbV9pZBgBIAEoBRIRCglmaW5pc2hfanYYAiABKAUS",
            "EQoJc3RhcnRUaW1lGAMgASgJEg8KB2VuZFRpbWUYBCABKAkSMAoFaW5mb3MY",
            "BSADKAsyIS5uZXdkZHouUm9vbVByb3RvLlJlc3VsdFBhbmVsSW5mbxIRCgl2",
            "aWRlb0NvZGUYBiABKAUSDgoGaXNPcGVuGAcgASgFImsKB0Rlc1Jvb20SDwoH",
            "cm9vbV9pZBgBIAEoAxIOCgZ1c2VySWQYAiABKAMSEAoIdXNlck5hbWUYAyAB",
            "KAkSLQoHcGxheWVycxgEIAMoCzIcLm5ld2Rkei5Sb29tUHJvdG8uUGxheWVy",
            "SW5mbyJyCg1CYXR0bGVSZWNvcmRzEjAKCnBsYXllckluZm8YASADKAsyHC5u",
            "ZXdkZHouUm9vbVByb3RvLlBsYXllckluZm8SLwoHcmVjb3JkcxgCIAMoCzIe",
            "Lm5ld2Rkei5Sb29tUHJvdG8uQmF0dGxlUmVjb3JkIjEKDEJhdHRsZVJlY29y",
            "ZBIQCghpc1JlZFRlbhgEIAMoCBIPCgd3aW5MaXN0GAUgAygFIkwKEFNob3dC",
            "YXR0bGVSZWNvcmQSOAoIYmFSZWNvcmQYASADKAsyJi5uZXdkZHouUm9vbVBy",
            "b3RvLkRldGFpbGVkQmF0dGxlUmVjb3JkIv0BChREZXRhaWxlZEJhdHRsZVJl",
            "Y29yZBIvCgVjYXJkcxgBIAMoCzIgLm5ld2Rkei5Sb29tUHJvdG8uUmVjb3Jk",
            "Q2FyZERhdGESEgoKcmVtYWluQ2FyZBgCIAEoBRIOCgZ6aGFEYW4YAyABKAUS",
            "DwoHcGlhb0ZlbhgEIAEoBRISCgpwaWFvZmVuV2luGAUgASgFEhYKDmZpcnN0",
            "UHVzaENhcmRzGAYgASgDEjAKCnBsYXllckluZm8YByABKAsyHC5uZXdkZHou",
            "Um9vbVByb3RvLlBsYXllckluZm8SDwoHd2luR29sZBgIIAEoBRIQCghpc1Jl",
            "ZFRlbhgJIAEoCCIyCg5SZWNvcmRDYXJkRGF0YRIRCgloYW5kVGltZXMYASAB",
            "KAUSDQoFY2FyZHMYAiADKAUimQEKDVBsYXllckdQU0luZm8SEQoJaXNPcGVu",
            "R1BTGAEgASgIEiwKBXBvaW50GAIgASgLMh0ubmV3ZGR6LlJvb21Qcm90by5Q",
            "bGF5ZXJQb2ludBIRCglsb2NhbE5hbWUYAyABKAkSEAoIcGxheWVySXAYBCAB",
            "KAkSEgoKcGxheWVyX3BvcxgFIAEoBRIOCgZyb29tSWQYBiABKAMiZAoOUGxh",
            "eWVyR1BTSW5mb3MSLQoEaW5mbxgBIAMoCzIfLm5ld2Rkei5Sb29tUHJvdG8u",
            "UGxheWVyR1BTSW5mbxIPCgdyb29tX2lkGAIgASgDEhIKCnJvb21fc3RhZ2UY",
            "AyABKAVCMQodY29tLmhvb2xhaS5jZW50ZXJzZGsucHJvdG9idWZCEFJ1bkZh",
            "c3RSb29tUHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Centersdk.Protobuf.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.RoomId), global::Newddz.RoomProto.RoomId.Parser, new[]{ "RoomId_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.TypeId), global::Newddz.RoomProto.TypeId.Parser, new[]{ "GroupId", "SubId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.PlayerPoint), global::Newddz.RoomProto.PlayerPoint.Parser, new[]{ "PosX", "PosY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.RoomPos), global::Newddz.RoomProto.RoomPos.Parser, new[]{ "RoomId", "PosIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.RoomPosCountDown), global::Newddz.RoomProto.RoomPosCountDown.Parser, new[]{ "RoomId", "PosIndex", "Millis", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.RoomPosCards), global::Newddz.RoomProto.RoomPosCards.Parser, new[]{ "RoomId", "PosIndex", "Cards", "FirstPushPos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.PlayerInfo), global::Newddz.RoomProto.PlayerInfo.Parser, new[]{ "RoomId", "PosIndex", "UserId", "UserName", "HeadImgUrl", "Gold", "Sex", "Cards", "State", "IsManaged", "Role", "CallMultiple", "LastCards", "Timers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.RoomInfo), global::Newddz.RoomProto.RoomInfo.Parser, new[]{ "RoomId", "TypeId", "PosIndex", "RoomStage", "Multiple", "Players", "BaseGold", "HoleCards", "JoinRoomMinGold", "CurInning", "CurTotalInning", "CreateInfo", "LastCards", "LastPos", "FirstPushPos", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.SkillItem), global::Newddz.RoomProto.SkillItem.Parser, new[]{ "RoomId", "UserId", "ItemId", "PosX", "PosY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.RoomResult), global::Newddz.RoomProto.RoomResult.Parser, new[]{ "RoomId", "Type", "Gold", "Infos", "FinishJv" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.RoomAction), global::Newddz.RoomProto.RoomAction.Parser, new[]{ "RoomId", "PosIndex", "ActionType", "Multiple", "Cards", "Rank", "CardsLeft" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.RoomMultiple), global::Newddz.RoomProto.RoomMultiple.Parser, new[]{ "RoomId", "BaseGold", "Multiple" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.RoomMission), global::Newddz.RoomProto.RoomMission.Parser, new[]{ "RoomId", "RoomLevel", "MissionId", "IsFinish" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.RoomLuckyWheel), global::Newddz.RoomProto.RoomLuckyWheel.Parser, new[]{ "RoomId", "RoomLevel", "Innings", "InningsToBonus", "BonusIds", "BonusCounts", "BonusMultiples" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.RoomLuckyWheelBonus), global::Newddz.RoomProto.RoomLuckyWheelBonus.Parser, new[]{ "RoomId", "RoomLevel", "IdIndex", "MultipleIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.RoomRobot), global::Newddz.RoomProto.RoomRobot.Parser, new[]{ "RoomId", "TypeId", "UserId", "Name", "HeadImgUrl", "Sex", "Gold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.SimpleResultInfo), global::Newddz.RoomProto.SimpleResultInfo.Parser, new[]{ "UserId", "UserName", "HeadImgUrl", "PiaoFen", "Zhadan", "TotalWin", "Cards", "RedTen" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.ResultPanelInfo), global::Newddz.RoomProto.ResultPanelInfo.Parser, new[]{ "UserId", "UserName", "HeadImgUrl", "Gold", "PiaoFen", "Zhadan", "TotalWin", "MaxWin", "WinLoseJv" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.AllResultInfo), global::Newddz.RoomProto.AllResultInfo.Parser, new[]{ "RoomId", "FinishJv", "StartTime", "EndTime", "Infos", "VideoCode", "IsOpen" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.DesRoom), global::Newddz.RoomProto.DesRoom.Parser, new[]{ "RoomId", "UserId", "UserName", "Players" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.BattleRecords), global::Newddz.RoomProto.BattleRecords.Parser, new[]{ "PlayerInfo", "Records" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.BattleRecord), global::Newddz.RoomProto.BattleRecord.Parser, new[]{ "IsRedTen", "WinList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.ShowBattleRecord), global::Newddz.RoomProto.ShowBattleRecord.Parser, new[]{ "BaRecord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.DetailedBattleRecord), global::Newddz.RoomProto.DetailedBattleRecord.Parser, new[]{ "Cards", "RemainCard", "ZhaDan", "PiaoFen", "PiaofenWin", "FirstPushCards", "PlayerInfo", "WinGold", "IsRedTen" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.RecordCardData), global::Newddz.RoomProto.RecordCardData.Parser, new[]{ "HandTimes", "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.PlayerGPSInfo), global::Newddz.RoomProto.PlayerGPSInfo.Parser, new[]{ "IsOpenGPS", "Point", "LocalName", "PlayerIp", "PlayerPos", "RoomId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Newddz.RoomProto.PlayerGPSInfos), global::Newddz.RoomProto.PlayerGPSInfos.Parser, new[]{ "Info", "RoomId", "RoomStage" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 房间ID
  /// </summary>
  public sealed partial class RoomId : pb::IMessage<RoomId> {
    private static readonly pb::MessageParser<RoomId> _parser = new pb::MessageParser<RoomId>(() => new RoomId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomId(RoomId other) : this() {
      roomId_ = other.roomId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomId Clone() {
      return new RoomId(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomId_FieldNumber = 1;
    private long roomId_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId_ {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId_ != other.RoomId_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId_ != 0L) hash ^= RoomId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId_ != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId_ != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomId other) {
      if (other == null) {
        return;
      }
      if (other.RoomId_ != 0L) {
        RoomId_ = other.RoomId_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId_ = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 房间类型ID，由配置表配置
  /// </summary>
  public sealed partial class TypeId : pb::IMessage<TypeId> {
    private static readonly pb::MessageParser<TypeId> _parser = new pb::MessageParser<TypeId>(() => new TypeId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TypeId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeId(TypeId other) : this() {
      groupId_ = other.groupId_;
      subId_ = other.subId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeId Clone() {
      return new TypeId(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private int groupId_;
    /// <summary>
    /// 玩法内部ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "sub_id" field.</summary>
    public const int SubIdFieldNumber = 2;
    private int subId_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubId {
      get { return subId_; }
      set {
        subId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TypeId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TypeId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (SubId != other.SubId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (SubId != 0) hash ^= SubId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GroupId);
      }
      if (SubId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SubId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
      }
      if (SubId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TypeId other) {
      if (other == null) {
        return;
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      if (other.SubId != 0) {
        SubId = other.SubId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupId = input.ReadInt32();
            break;
          }
          case 16: {
            SubId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerPoint : pb::IMessage<PlayerPoint> {
    private static readonly pb::MessageParser<PlayerPoint> _parser = new pb::MessageParser<PlayerPoint>(() => new PlayerPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPoint(PlayerPoint other) : this() {
      posX_ = other.posX_;
      posY_ = other.posY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPoint Clone() {
      return new PlayerPoint(this);
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 1;
    private double posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 2;
    private double posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PosY, other.PosY)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PosX != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PosY);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PosX != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(PosX);
      }
      if (PosY != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(PosY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosX != 0D) {
        size += 1 + 8;
      }
      if (PosY != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerPoint other) {
      if (other == null) {
        return;
      }
      if (other.PosX != 0D) {
        PosX = other.PosX;
      }
      if (other.PosY != 0D) {
        PosY = other.PosY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            PosX = input.ReadDouble();
            break;
          }
          case 17: {
            PosY = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 位置
  /// </summary>
  public sealed partial class RoomPos : pb::IMessage<RoomPos> {
    private static readonly pb::MessageParser<RoomPos> _parser = new pb::MessageParser<RoomPos>(() => new RoomPos());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPos(RoomPos other) : this() {
      roomId_ = other.roomId_;
      posIndex_ = other.posIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPos Clone() {
      return new RoomPos(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private long roomId_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "pos_index" field.</summary>
    public const int PosIndexFieldNumber = 2;
    private int posIndex_;
    /// <summary>
    /// 座位索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosIndex {
      get { return posIndex_; }
      set {
        posIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (PosIndex != other.PosIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (PosIndex != 0) hash ^= PosIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (PosIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PosIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (PosIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPos other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.PosIndex != 0) {
        PosIndex = other.PosIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            PosIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomPosCountDown : pb::IMessage<RoomPosCountDown> {
    private static readonly pb::MessageParser<RoomPosCountDown> _parser = new pb::MessageParser<RoomPosCountDown>(() => new RoomPosCountDown());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPosCountDown> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPosCountDown() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPosCountDown(RoomPosCountDown other) : this() {
      roomId_ = other.roomId_;
      posIndex_ = other.posIndex_;
      millis_ = other.millis_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPosCountDown Clone() {
      return new RoomPosCountDown(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private long roomId_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "pos_index" field.</summary>
    public const int PosIndexFieldNumber = 2;
    private int posIndex_;
    /// <summary>
    /// 座位索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosIndex {
      get { return posIndex_; }
      set {
        posIndex_ = value;
      }
    }

    /// <summary>Field number for the "millis" field.</summary>
    public const int MillisFieldNumber = 3;
    private long millis_;
    /// <summary>
    /// 倒计时时长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Millis {
      get { return millis_; }
      set {
        millis_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private int type_;
    /// <summary>
    /// 倒计时原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPosCountDown);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPosCountDown other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (PosIndex != other.PosIndex) return false;
      if (Millis != other.Millis) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (PosIndex != 0) hash ^= PosIndex.GetHashCode();
      if (Millis != 0L) hash ^= Millis.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (PosIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PosIndex);
      }
      if (Millis != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Millis);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (PosIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosIndex);
      }
      if (Millis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Millis);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPosCountDown other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.PosIndex != 0) {
        PosIndex = other.PosIndex;
      }
      if (other.Millis != 0L) {
        Millis = other.Millis;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            PosIndex = input.ReadInt32();
            break;
          }
          case 24: {
            Millis = input.ReadInt64();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 位置和牌
  /// </summary>
  public sealed partial class RoomPosCards : pb::IMessage<RoomPosCards> {
    private static readonly pb::MessageParser<RoomPosCards> _parser = new pb::MessageParser<RoomPosCards>(() => new RoomPosCards());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPosCards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPosCards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPosCards(RoomPosCards other) : this() {
      roomId_ = other.roomId_;
      posIndex_ = other.posIndex_;
      cards_ = other.cards_.Clone();
      firstPushPos_ = other.firstPushPos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPosCards Clone() {
      return new RoomPosCards(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private long roomId_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "pos_index" field.</summary>
    public const int PosIndexFieldNumber = 2;
    private int posIndex_;
    /// <summary>
    /// 座位索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosIndex {
      get { return posIndex_; }
      set {
        posIndex_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "firstPushPos" field.</summary>
    public const int FirstPushPosFieldNumber = 4;
    private int firstPushPos_;
    /// <summary>
    /// 先出牌的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstPushPos {
      get { return firstPushPos_; }
      set {
        firstPushPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPosCards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPosCards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (PosIndex != other.PosIndex) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if (FirstPushPos != other.FirstPushPos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (PosIndex != 0) hash ^= PosIndex.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (FirstPushPos != 0) hash ^= FirstPushPos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (PosIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PosIndex);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (FirstPushPos != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FirstPushPos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (PosIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosIndex);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (FirstPushPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstPushPos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPosCards other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.PosIndex != 0) {
        PosIndex = other.PosIndex;
      }
      cards_.Add(other.cards_);
      if (other.FirstPushPos != 0) {
        FirstPushPos = other.FirstPushPos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            PosIndex = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 32: {
            FirstPushPos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 某个玩家的详细信息，用户进入房间时使用
  /// </summary>
  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      roomId_ = other.roomId_;
      posIndex_ = other.posIndex_;
      userId_ = other.userId_;
      userName_ = other.userName_;
      headImgUrl_ = other.headImgUrl_;
      gold_ = other.gold_;
      sex_ = other.sex_;
      cards_ = other.cards_.Clone();
      state_ = other.state_;
      isManaged_ = other.isManaged_;
      role_ = other.role_;
      callMultiple_ = other.callMultiple_;
      lastCards_ = other.lastCards_.Clone();
      timers_ = other.timers_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private long roomId_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "pos_index" field.</summary>
    public const int PosIndexFieldNumber = 2;
    private int posIndex_;
    /// <summary>
    /// 座位索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosIndex {
      get { return posIndex_; }
      set {
        posIndex_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 3;
    private long userId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 4;
    private string userName_ = "";
    /// <summary>
    /// 玩家昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "head_img_url" field.</summary>
    public const int HeadImgUrlFieldNumber = 5;
    private string headImgUrl_ = "";
    /// <summary>
    /// 玩家头像URL
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadImgUrl {
      get { return headImgUrl_; }
      set {
        headImgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 6;
    private long gold_;
    /// <summary>
    /// 玩家金币数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 7;
    private string sex_ = "";
    /// <summary>
    /// 玩家性别，0代表女 1代表男 2代表未知
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sex {
      get { return sex_; }
      set {
        sex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 9;
    private int state_;
    /// <summary>
    /// 玩家状态，参看Constants.PLAYER_STATE_*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "is_managed" field.</summary>
    public const int IsManagedFieldNumber = 10;
    private bool isManaged_;
    /// <summary>
    /// 是否处于托管状态，只在恢复游戏时有用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsManaged {
      get { return isManaged_; }
      set {
        isManaged_ = value;
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 11;
    private int role_;
    /// <summary>
    /// 玩家角色，参看Constants.PLAYER_ROLE_*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "callMultiple" field.</summary>
    public const int CallMultipleFieldNumber = 12;
    private int callMultiple_;
    /// <summary>
    /// 叫地主的倍数 0 是不叫(重连用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CallMultiple {
      get { return callMultiple_; }
      set {
        callMultiple_ = value;
      }
    }

    /// <summary>Field number for the "lastCards" field.</summary>
    public const int LastCardsFieldNumber = 13;
    private static readonly pb::FieldCodec<int> _repeated_lastCards_codec
        = pb::FieldCodec.ForInt32(106);
    private readonly pbc::RepeatedField<int> lastCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 上一轮出牌(重连用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LastCards {
      get { return lastCards_; }
    }

    /// <summary>Field number for the "timers" field.</summary>
    public const int TimersFieldNumber = 14;
    private long timers_;
    /// <summary>
    /// 本次出牌剩余时间(重连用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timers {
      get { return timers_; }
      set {
        timers_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (PosIndex != other.PosIndex) return false;
      if (UserId != other.UserId) return false;
      if (UserName != other.UserName) return false;
      if (HeadImgUrl != other.HeadImgUrl) return false;
      if (Gold != other.Gold) return false;
      if (Sex != other.Sex) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if (State != other.State) return false;
      if (IsManaged != other.IsManaged) return false;
      if (Role != other.Role) return false;
      if (CallMultiple != other.CallMultiple) return false;
      if(!lastCards_.Equals(other.lastCards_)) return false;
      if (Timers != other.Timers) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (PosIndex != 0) hash ^= PosIndex.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (HeadImgUrl.Length != 0) hash ^= HeadImgUrl.GetHashCode();
      if (Gold != 0L) hash ^= Gold.GetHashCode();
      if (Sex.Length != 0) hash ^= Sex.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (IsManaged != false) hash ^= IsManaged.GetHashCode();
      if (Role != 0) hash ^= Role.GetHashCode();
      if (CallMultiple != 0) hash ^= CallMultiple.GetHashCode();
      hash ^= lastCards_.GetHashCode();
      if (Timers != 0L) hash ^= Timers.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (PosIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PosIndex);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserName);
      }
      if (HeadImgUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(HeadImgUrl);
      }
      if (Gold != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Gold);
      }
      if (Sex.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Sex);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (State != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(State);
      }
      if (IsManaged != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsManaged);
      }
      if (Role != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Role);
      }
      if (CallMultiple != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CallMultiple);
      }
      lastCards_.WriteTo(output, _repeated_lastCards_codec);
      if (Timers != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(Timers);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (PosIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosIndex);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (HeadImgUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadImgUrl);
      }
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (Sex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sex);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (IsManaged != false) {
        size += 1 + 1;
      }
      if (Role != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Role);
      }
      if (CallMultiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CallMultiple);
      }
      size += lastCards_.CalculateSize(_repeated_lastCards_codec);
      if (Timers != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timers);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.PosIndex != 0) {
        PosIndex = other.PosIndex;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.HeadImgUrl.Length != 0) {
        HeadImgUrl = other.HeadImgUrl;
      }
      if (other.Gold != 0L) {
        Gold = other.Gold;
      }
      if (other.Sex.Length != 0) {
        Sex = other.Sex;
      }
      cards_.Add(other.cards_);
      if (other.State != 0) {
        State = other.State;
      }
      if (other.IsManaged != false) {
        IsManaged = other.IsManaged;
      }
      if (other.Role != 0) {
        Role = other.Role;
      }
      if (other.CallMultiple != 0) {
        CallMultiple = other.CallMultiple;
      }
      lastCards_.Add(other.lastCards_);
      if (other.Timers != 0L) {
        Timers = other.Timers;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            PosIndex = input.ReadInt32();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
          case 34: {
            UserName = input.ReadString();
            break;
          }
          case 42: {
            HeadImgUrl = input.ReadString();
            break;
          }
          case 48: {
            Gold = input.ReadInt64();
            break;
          }
          case 58: {
            Sex = input.ReadString();
            break;
          }
          case 66:
          case 64: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 72: {
            State = input.ReadInt32();
            break;
          }
          case 80: {
            IsManaged = input.ReadBool();
            break;
          }
          case 88: {
            Role = input.ReadInt32();
            break;
          }
          case 96: {
            CallMultiple = input.ReadInt32();
            break;
          }
          case 106:
          case 104: {
            lastCards_.AddEntriesFrom(input, _repeated_lastCards_codec);
            break;
          }
          case 112: {
            Timers = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 房间中比较全面的信息，用户刚进入房间时使用
  /// </summary>
  public sealed partial class RoomInfo : pb::IMessage<RoomInfo> {
    private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => new RoomInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo(RoomInfo other) : this() {
      roomId_ = other.roomId_;
      typeId_ = other.typeId_;
      posIndex_ = other.posIndex_;
      roomStage_ = other.roomStage_;
      multiple_ = other.multiple_;
      players_ = other.players_.Clone();
      baseGold_ = other.baseGold_;
      holeCards_ = other.holeCards_.Clone();
      joinRoomMinGold_ = other.joinRoomMinGold_;
      curInning_ = other.curInning_;
      curTotalInning_ = other.curTotalInning_;
      createInfo_ = other.createInfo_ != null ? other.createInfo_.Clone() : null;
      lastCards_ = other.lastCards_.Clone();
      lastPos_ = other.lastPos_;
      firstPushPos_ = other.firstPushPos_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo Clone() {
      return new RoomInfo(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private long roomId_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "type_id" field.</summary>
    public const int TypeIdFieldNumber = 2;
    private long typeId_;
    /// <summary>
    /// 房间类型ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TypeId {
      get { return typeId_; }
      set {
        typeId_ = value;
      }
    }

    /// <summary>Field number for the "pos_index" field.</summary>
    public const int PosIndexFieldNumber = 3;
    private int posIndex_;
    /// <summary>
    /// 玩家座位索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosIndex {
      get { return posIndex_; }
      set {
        posIndex_ = value;
      }
    }

    /// <summary>Field number for the "room_stage" field.</summary>
    public const int RoomStageFieldNumber = 4;
    private int roomStage_;
    /// <summary>
    /// 当前房间所处阶段，在Constants中定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomStage {
      get { return roomStage_; }
      set {
        roomStage_ = value;
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 5;
    private long multiple_;
    /// <summary>
    /// 当前房间倍数，只在恢复游戏时有用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Newddz.RoomProto.PlayerInfo> _repeated_players_codec
        = pb::FieldCodec.ForMessage(50, global::Newddz.RoomProto.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Newddz.RoomProto.PlayerInfo> players_ = new pbc::RepeatedField<global::Newddz.RoomProto.PlayerInfo>();
    /// <summary>
    /// 加入前已经存在的玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Newddz.RoomProto.PlayerInfo> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "base_gold" field.</summary>
    public const int BaseGoldFieldNumber = 7;
    private long baseGold_;
    /// <summary>
    /// 房间底分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BaseGold {
      get { return baseGold_; }
      set {
        baseGold_ = value;
      }
    }

    /// <summary>Field number for the "hole_cards" field.</summary>
    public const int HoleCardsFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_holeCards_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> holeCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 房间底牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HoleCards {
      get { return holeCards_; }
    }

    /// <summary>Field number for the "joinRoomMinGold" field.</summary>
    public const int JoinRoomMinGoldFieldNumber = 9;
    private long joinRoomMinGold_;
    /// <summary>
    /// 加入房间最低筹码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long JoinRoomMinGold {
      get { return joinRoomMinGold_; }
      set {
        joinRoomMinGold_ = value;
      }
    }

    /// <summary>Field number for the "curInning" field.</summary>
    public const int CurInningFieldNumber = 10;
    private int curInning_;
    /// <summary>
    /// 当前局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurInning {
      get { return curInning_; }
      set {
        curInning_ = value;
      }
    }

    /// <summary>Field number for the "curTotalInning" field.</summary>
    public const int CurTotalInningFieldNumber = 11;
    private int curTotalInning_;
    /// <summary>
    /// 总局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurTotalInning {
      get { return curTotalInning_; }
      set {
        curTotalInning_ = value;
      }
    }

    /// <summary>Field number for the "createInfo" field.</summary>
    public const int CreateInfoFieldNumber = 12;
    private global::Centersdk.Protobuf.PaoDeKuai createInfo_;
    /// <summary>
    /// 房间创建信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Centersdk.Protobuf.PaoDeKuai CreateInfo {
      get { return createInfo_; }
      set {
        createInfo_ = value;
      }
    }

    /// <summary>Field number for the "lastCards" field.</summary>
    public const int LastCardsFieldNumber = 13;
    private static readonly pb::FieldCodec<int> _repeated_lastCards_codec
        = pb::FieldCodec.ForInt32(106);
    private readonly pbc::RepeatedField<int> lastCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 重连之前之后一个人出的牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LastCards {
      get { return lastCards_; }
    }

    /// <summary>Field number for the "lastPos" field.</summary>
    public const int LastPosFieldNumber = 14;
    private int lastPos_;
    /// <summary>
    /// 最后出牌人的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastPos {
      get { return lastPos_; }
      set {
        lastPos_ = value;
      }
    }

    /// <summary>Field number for the "firstPushPos" field.</summary>
    public const int FirstPushPosFieldNumber = 15;
    private int firstPushPos_;
    /// <summary>
    /// 先出牌的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstPushPos {
      get { return firstPushPos_; }
      set {
        firstPushPos_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 16;
    private long time_;
    /// <summary>
    /// 解散剩余倒计时(毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (TypeId != other.TypeId) return false;
      if (PosIndex != other.PosIndex) return false;
      if (RoomStage != other.RoomStage) return false;
      if (Multiple != other.Multiple) return false;
      if(!players_.Equals(other.players_)) return false;
      if (BaseGold != other.BaseGold) return false;
      if(!holeCards_.Equals(other.holeCards_)) return false;
      if (JoinRoomMinGold != other.JoinRoomMinGold) return false;
      if (CurInning != other.CurInning) return false;
      if (CurTotalInning != other.CurTotalInning) return false;
      if (!object.Equals(CreateInfo, other.CreateInfo)) return false;
      if(!lastCards_.Equals(other.lastCards_)) return false;
      if (LastPos != other.LastPos) return false;
      if (FirstPushPos != other.FirstPushPos) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (TypeId != 0L) hash ^= TypeId.GetHashCode();
      if (PosIndex != 0) hash ^= PosIndex.GetHashCode();
      if (RoomStage != 0) hash ^= RoomStage.GetHashCode();
      if (Multiple != 0L) hash ^= Multiple.GetHashCode();
      hash ^= players_.GetHashCode();
      if (BaseGold != 0L) hash ^= BaseGold.GetHashCode();
      hash ^= holeCards_.GetHashCode();
      if (JoinRoomMinGold != 0L) hash ^= JoinRoomMinGold.GetHashCode();
      if (CurInning != 0) hash ^= CurInning.GetHashCode();
      if (CurTotalInning != 0) hash ^= CurTotalInning.GetHashCode();
      if (createInfo_ != null) hash ^= CreateInfo.GetHashCode();
      hash ^= lastCards_.GetHashCode();
      if (LastPos != 0) hash ^= LastPos.GetHashCode();
      if (FirstPushPos != 0) hash ^= FirstPushPos.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (TypeId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TypeId);
      }
      if (PosIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PosIndex);
      }
      if (RoomStage != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RoomStage);
      }
      if (Multiple != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Multiple);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (BaseGold != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(BaseGold);
      }
      holeCards_.WriteTo(output, _repeated_holeCards_codec);
      if (JoinRoomMinGold != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(JoinRoomMinGold);
      }
      if (CurInning != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CurInning);
      }
      if (CurTotalInning != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(CurTotalInning);
      }
      if (createInfo_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(CreateInfo);
      }
      lastCards_.WriteTo(output, _repeated_lastCards_codec);
      if (LastPos != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(LastPos);
      }
      if (FirstPushPos != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(FirstPushPos);
      }
      if (Time != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (TypeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TypeId);
      }
      if (PosIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosIndex);
      }
      if (RoomStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomStage);
      }
      if (Multiple != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Multiple);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (BaseGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BaseGold);
      }
      size += holeCards_.CalculateSize(_repeated_holeCards_codec);
      if (JoinRoomMinGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(JoinRoomMinGold);
      }
      if (CurInning != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurInning);
      }
      if (CurTotalInning != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurTotalInning);
      }
      if (createInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateInfo);
      }
      size += lastCards_.CalculateSize(_repeated_lastCards_codec);
      if (LastPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastPos);
      }
      if (FirstPushPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstPushPos);
      }
      if (Time != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.TypeId != 0L) {
        TypeId = other.TypeId;
      }
      if (other.PosIndex != 0) {
        PosIndex = other.PosIndex;
      }
      if (other.RoomStage != 0) {
        RoomStage = other.RoomStage;
      }
      if (other.Multiple != 0L) {
        Multiple = other.Multiple;
      }
      players_.Add(other.players_);
      if (other.BaseGold != 0L) {
        BaseGold = other.BaseGold;
      }
      holeCards_.Add(other.holeCards_);
      if (other.JoinRoomMinGold != 0L) {
        JoinRoomMinGold = other.JoinRoomMinGold;
      }
      if (other.CurInning != 0) {
        CurInning = other.CurInning;
      }
      if (other.CurTotalInning != 0) {
        CurTotalInning = other.CurTotalInning;
      }
      if (other.createInfo_ != null) {
        if (createInfo_ == null) {
          createInfo_ = new global::Centersdk.Protobuf.PaoDeKuai();
        }
        CreateInfo.MergeFrom(other.CreateInfo);
      }
      lastCards_.Add(other.lastCards_);
      if (other.LastPos != 0) {
        LastPos = other.LastPos;
      }
      if (other.FirstPushPos != 0) {
        FirstPushPos = other.FirstPushPos;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            TypeId = input.ReadInt64();
            break;
          }
          case 24: {
            PosIndex = input.ReadInt32();
            break;
          }
          case 32: {
            RoomStage = input.ReadInt32();
            break;
          }
          case 40: {
            Multiple = input.ReadInt64();
            break;
          }
          case 50: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 56: {
            BaseGold = input.ReadInt64();
            break;
          }
          case 66:
          case 64: {
            holeCards_.AddEntriesFrom(input, _repeated_holeCards_codec);
            break;
          }
          case 72: {
            JoinRoomMinGold = input.ReadInt64();
            break;
          }
          case 80: {
            CurInning = input.ReadInt32();
            break;
          }
          case 88: {
            CurTotalInning = input.ReadInt32();
            break;
          }
          case 98: {
            if (createInfo_ == null) {
              createInfo_ = new global::Centersdk.Protobuf.PaoDeKuai();
            }
            input.ReadMessage(createInfo_);
            break;
          }
          case 106:
          case 104: {
            lastCards_.AddEntriesFrom(input, _repeated_lastCards_codec);
            break;
          }
          case 112: {
            LastPos = input.ReadInt32();
            break;
          }
          case 120: {
            FirstPushPos = input.ReadInt32();
            break;
          }
          case 128: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 这个消息主要针对房间内使用技能道具，和普通道具使用（例如开宝箱）不一样。
  /// 斗地主暂时没有使用
  /// </summary>
  public sealed partial class SkillItem : pb::IMessage<SkillItem> {
    private static readonly pb::MessageParser<SkillItem> _parser = new pb::MessageParser<SkillItem>(() => new SkillItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillItem(SkillItem other) : this() {
      roomId_ = other.roomId_;
      userId_ = other.userId_;
      itemId_ = other.itemId_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillItem Clone() {
      return new SkillItem(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private long roomId_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 3;
    private long itemId_;
    /// <summary>
    /// 使用的技能道具ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 4;
    private double posX_;
    /// <summary>
    /// 道具投放的x坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 5;
    private double posY_;
    /// <summary>
    /// 道具投放的y坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (UserId != other.UserId) return false;
      if (ItemId != other.ItemId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PosY, other.PosY)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (ItemId != 0L) hash ^= ItemId.GetHashCode();
      if (PosX != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PosY);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (ItemId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ItemId);
      }
      if (PosX != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(PosX);
      }
      if (PosY != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(PosY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (ItemId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ItemId);
      }
      if (PosX != 0D) {
        size += 1 + 8;
      }
      if (PosY != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillItem other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.ItemId != 0L) {
        ItemId = other.ItemId;
      }
      if (other.PosX != 0D) {
        PosX = other.PosX;
      }
      if (other.PosY != 0D) {
        PosY = other.PosY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 24: {
            ItemId = input.ReadInt64();
            break;
          }
          case 33: {
            PosX = input.ReadDouble();
            break;
          }
          case 41: {
            PosY = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 最终结果，以及每个人金币变化
  /// </summary>
  public sealed partial class RoomResult : pb::IMessage<RoomResult> {
    private static readonly pb::MessageParser<RoomResult> _parser = new pb::MessageParser<RoomResult>(() => new RoomResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomResult(RoomResult other) : this() {
      roomId_ = other.roomId_;
      type_ = other.type_;
      gold_ = other.gold_.Clone();
      infos_ = other.infos_.Clone();
      finishJv_ = other.finishJv_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomResult Clone() {
      return new RoomResult(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private long roomId_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    /// 0=普通 1=春天 2=反春天
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 3;
    private static readonly pb::FieldCodec<long> _repeated_gold_codec
        = pb::FieldCodec.ForInt64(26);
    private readonly pbc::RepeatedField<long> gold_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 所有人金币变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Gold {
      get { return gold_; }
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Newddz.RoomProto.SimpleResultInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(34, global::Newddz.RoomProto.SimpleResultInfo.Parser);
    private readonly pbc::RepeatedField<global::Newddz.RoomProto.SimpleResultInfo> infos_ = new pbc::RepeatedField<global::Newddz.RoomProto.SimpleResultInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Newddz.RoomProto.SimpleResultInfo> Infos {
      get { return infos_; }
    }

    /// <summary>Field number for the "finish_jv" field.</summary>
    public const int FinishJvFieldNumber = 5;
    private int finishJv_;
    /// <summary>
    /// 完成局数  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinishJv {
      get { return finishJv_; }
      set {
        finishJv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (Type != other.Type) return false;
      if(!gold_.Equals(other.gold_)) return false;
      if(!infos_.Equals(other.infos_)) return false;
      if (FinishJv != other.FinishJv) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= gold_.GetHashCode();
      hash ^= infos_.GetHashCode();
      if (FinishJv != 0) hash ^= FinishJv.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      gold_.WriteTo(output, _repeated_gold_codec);
      infos_.WriteTo(output, _repeated_infos_codec);
      if (FinishJv != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FinishJv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      size += gold_.CalculateSize(_repeated_gold_codec);
      size += infos_.CalculateSize(_repeated_infos_codec);
      if (FinishJv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinishJv);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomResult other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      gold_.Add(other.gold_);
      infos_.Add(other.infos_);
      if (other.FinishJv != 0) {
        FinishJv = other.FinishJv;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            gold_.AddEntriesFrom(input, _repeated_gold_codec);
            break;
          }
          case 34: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
          case 40: {
            FinishJv = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 房间的动作，包括准备，叫地主、明牌、出牌，过牌等
  /// </summary>
  public sealed partial class RoomAction : pb::IMessage<RoomAction> {
    private static readonly pb::MessageParser<RoomAction> _parser = new pb::MessageParser<RoomAction>(() => new RoomAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomAction(RoomAction other) : this() {
      roomId_ = other.roomId_;
      posIndex_ = other.posIndex_;
      actionType_ = other.actionType_;
      multiple_ = other.multiple_;
      cards_ = other.cards_.Clone();
      rank_ = other.rank_;
      cardsLeft_ = other.cardsLeft_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomAction Clone() {
      return new RoomAction(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private long roomId_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "pos_index" field.</summary>
    public const int PosIndexFieldNumber = 2;
    private int posIndex_;
    /// <summary>
    /// 座位索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosIndex {
      get { return posIndex_; }
      set {
        posIndex_ = value;
      }
    }

    /// <summary>Field number for the "action_type" field.</summary>
    public const int ActionTypeFieldNumber = 3;
    private int actionType_;
    /// <summary>
    /// 动作类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionType {
      get { return actionType_; }
      set {
        actionType_ = value;
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 4;
    private int multiple_;
    /// <summary>
    /// 倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 6;
    private int rank_;
    /// <summary>
    /// 牌力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "cardsLeft" field.</summary>
    public const int CardsLeftFieldNumber = 7;
    private int cardsLeft_;
    /// <summary>
    /// 手里剩下牌的张数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardsLeft {
      get { return cardsLeft_; }
      set {
        cardsLeft_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (PosIndex != other.PosIndex) return false;
      if (ActionType != other.ActionType) return false;
      if (Multiple != other.Multiple) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if (Rank != other.Rank) return false;
      if (CardsLeft != other.CardsLeft) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (PosIndex != 0) hash ^= PosIndex.GetHashCode();
      if (ActionType != 0) hash ^= ActionType.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (CardsLeft != 0) hash ^= CardsLeft.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (PosIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PosIndex);
      }
      if (ActionType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActionType);
      }
      if (Multiple != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Multiple);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (Rank != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Rank);
      }
      if (CardsLeft != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CardsLeft);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (PosIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosIndex);
      }
      if (ActionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionType);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (CardsLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardsLeft);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomAction other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.PosIndex != 0) {
        PosIndex = other.PosIndex;
      }
      if (other.ActionType != 0) {
        ActionType = other.ActionType;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
      cards_.Add(other.cards_);
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.CardsLeft != 0) {
        CardsLeft = other.CardsLeft;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            PosIndex = input.ReadInt32();
            break;
          }
          case 24: {
            ActionType = input.ReadInt32();
            break;
          }
          case 32: {
            Multiple = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 48: {
            Rank = input.ReadInt32();
            break;
          }
          case 56: {
            CardsLeft = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomMultiple : pb::IMessage<RoomMultiple> {
    private static readonly pb::MessageParser<RoomMultiple> _parser = new pb::MessageParser<RoomMultiple>(() => new RoomMultiple());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomMultiple> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMultiple() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMultiple(RoomMultiple other) : this() {
      roomId_ = other.roomId_;
      baseGold_ = other.baseGold_;
      multiple_ = other.multiple_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMultiple Clone() {
      return new RoomMultiple(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private long roomId_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "base_gold" field.</summary>
    public const int BaseGoldFieldNumber = 2;
    private long baseGold_;
    /// <summary>
    /// 房间底分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BaseGold {
      get { return baseGold_; }
      set {
        baseGold_ = value;
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 3;
    private long multiple_;
    /// <summary>
    /// 当前倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomMultiple);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomMultiple other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (BaseGold != other.BaseGold) return false;
      if (Multiple != other.Multiple) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (BaseGold != 0L) hash ^= BaseGold.GetHashCode();
      if (Multiple != 0L) hash ^= Multiple.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (BaseGold != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BaseGold);
      }
      if (Multiple != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Multiple);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (BaseGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BaseGold);
      }
      if (Multiple != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Multiple);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomMultiple other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.BaseGold != 0L) {
        BaseGold = other.BaseGold;
      }
      if (other.Multiple != 0L) {
        Multiple = other.Multiple;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            BaseGold = input.ReadInt64();
            break;
          }
          case 24: {
            Multiple = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomMission : pb::IMessage<RoomMission> {
    private static readonly pb::MessageParser<RoomMission> _parser = new pb::MessageParser<RoomMission>(() => new RoomMission());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomMission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMission(RoomMission other) : this() {
      roomId_ = other.roomId_;
      roomLevel_ = other.roomLevel_;
      missionId_ = other.missionId_;
      isFinish_ = other.isFinish_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMission Clone() {
      return new RoomMission(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private long roomId_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "room_level" field.</summary>
    public const int RoomLevelFieldNumber = 2;
    private int roomLevel_;
    /// <summary>
    /// 房间等级, 1=初级，2=中级，3=高级，4=精英，5=大师
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomLevel {
      get { return roomLevel_; }
      set {
        roomLevel_ = value;
      }
    }

    /// <summary>Field number for the "mission_id" field.</summary>
    public const int MissionIdFieldNumber = 3;
    private long missionId_;
    /// <summary>
    /// 任务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MissionId {
      get { return missionId_; }
      set {
        missionId_ = value;
      }
    }

    /// <summary>Field number for the "is_finish" field.</summary>
    public const int IsFinishFieldNumber = 4;
    private bool isFinish_;
    /// <summary>
    /// 任务是否已完成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFinish {
      get { return isFinish_; }
      set {
        isFinish_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomMission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomMission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (RoomLevel != other.RoomLevel) return false;
      if (MissionId != other.MissionId) return false;
      if (IsFinish != other.IsFinish) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (RoomLevel != 0) hash ^= RoomLevel.GetHashCode();
      if (MissionId != 0L) hash ^= MissionId.GetHashCode();
      if (IsFinish != false) hash ^= IsFinish.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (RoomLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomLevel);
      }
      if (MissionId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(MissionId);
      }
      if (IsFinish != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsFinish);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (RoomLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomLevel);
      }
      if (MissionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MissionId);
      }
      if (IsFinish != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomMission other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.RoomLevel != 0) {
        RoomLevel = other.RoomLevel;
      }
      if (other.MissionId != 0L) {
        MissionId = other.MissionId;
      }
      if (other.IsFinish != false) {
        IsFinish = other.IsFinish;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            RoomLevel = input.ReadInt32();
            break;
          }
          case 24: {
            MissionId = input.ReadInt64();
            break;
          }
          case 32: {
            IsFinish = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomLuckyWheel : pb::IMessage<RoomLuckyWheel> {
    private static readonly pb::MessageParser<RoomLuckyWheel> _parser = new pb::MessageParser<RoomLuckyWheel>(() => new RoomLuckyWheel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomLuckyWheel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomLuckyWheel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomLuckyWheel(RoomLuckyWheel other) : this() {
      roomId_ = other.roomId_;
      roomLevel_ = other.roomLevel_;
      innings_ = other.innings_;
      inningsToBonus_ = other.inningsToBonus_;
      bonusIds_ = other.bonusIds_.Clone();
      bonusCounts_ = other.bonusCounts_.Clone();
      bonusMultiples_ = other.bonusMultiples_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomLuckyWheel Clone() {
      return new RoomLuckyWheel(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private long roomId_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "room_level" field.</summary>
    public const int RoomLevelFieldNumber = 2;
    private int roomLevel_;
    /// <summary>
    /// 房间等级, 1=初级，2=中级，3=高级，4=精英，5=大师
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomLevel {
      get { return roomLevel_; }
      set {
        roomLevel_ = value;
      }
    }

    /// <summary>Field number for the "innings" field.</summary>
    public const int InningsFieldNumber = 3;
    private int innings_;
    /// <summary>
    /// 游戏局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Innings {
      get { return innings_; }
      set {
        innings_ = value;
      }
    }

    /// <summary>Field number for the "innings_to_bonus" field.</summary>
    public const int InningsToBonusFieldNumber = 4;
    private int inningsToBonus_;
    /// <summary>
    /// 再玩多少局数可抽奖，-1表示今天已经抽完所有奖，0表示当前有未抽的奖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InningsToBonus {
      get { return inningsToBonus_; }
      set {
        inningsToBonus_ = value;
      }
    }

    /// <summary>Field number for the "bonus_ids" field.</summary>
    public const int BonusIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_bonusIds_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> bonusIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 奖品ID，-1表示元宝
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BonusIds {
      get { return bonusIds_; }
    }

    /// <summary>Field number for the "bonus_counts" field.</summary>
    public const int BonusCountsFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_bonusCounts_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> bonusCounts_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 奖品数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BonusCounts {
      get { return bonusCounts_; }
    }

    /// <summary>Field number for the "bonus_multiples" field.</summary>
    public const int BonusMultiplesFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_bonusMultiples_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> bonusMultiples_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 奖品倍数，内圈
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BonusMultiples {
      get { return bonusMultiples_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomLuckyWheel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomLuckyWheel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (RoomLevel != other.RoomLevel) return false;
      if (Innings != other.Innings) return false;
      if (InningsToBonus != other.InningsToBonus) return false;
      if(!bonusIds_.Equals(other.bonusIds_)) return false;
      if(!bonusCounts_.Equals(other.bonusCounts_)) return false;
      if(!bonusMultiples_.Equals(other.bonusMultiples_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (RoomLevel != 0) hash ^= RoomLevel.GetHashCode();
      if (Innings != 0) hash ^= Innings.GetHashCode();
      if (InningsToBonus != 0) hash ^= InningsToBonus.GetHashCode();
      hash ^= bonusIds_.GetHashCode();
      hash ^= bonusCounts_.GetHashCode();
      hash ^= bonusMultiples_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (RoomLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomLevel);
      }
      if (Innings != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Innings);
      }
      if (InningsToBonus != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(InningsToBonus);
      }
      bonusIds_.WriteTo(output, _repeated_bonusIds_codec);
      bonusCounts_.WriteTo(output, _repeated_bonusCounts_codec);
      bonusMultiples_.WriteTo(output, _repeated_bonusMultiples_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (RoomLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomLevel);
      }
      if (Innings != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Innings);
      }
      if (InningsToBonus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InningsToBonus);
      }
      size += bonusIds_.CalculateSize(_repeated_bonusIds_codec);
      size += bonusCounts_.CalculateSize(_repeated_bonusCounts_codec);
      size += bonusMultiples_.CalculateSize(_repeated_bonusMultiples_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomLuckyWheel other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.RoomLevel != 0) {
        RoomLevel = other.RoomLevel;
      }
      if (other.Innings != 0) {
        Innings = other.Innings;
      }
      if (other.InningsToBonus != 0) {
        InningsToBonus = other.InningsToBonus;
      }
      bonusIds_.Add(other.bonusIds_);
      bonusCounts_.Add(other.bonusCounts_);
      bonusMultiples_.Add(other.bonusMultiples_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            RoomLevel = input.ReadInt32();
            break;
          }
          case 24: {
            Innings = input.ReadInt32();
            break;
          }
          case 32: {
            InningsToBonus = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            bonusIds_.AddEntriesFrom(input, _repeated_bonusIds_codec);
            break;
          }
          case 50:
          case 48: {
            bonusCounts_.AddEntriesFrom(input, _repeated_bonusCounts_codec);
            break;
          }
          case 58:
          case 56: {
            bonusMultiples_.AddEntriesFrom(input, _repeated_bonusMultiples_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomLuckyWheelBonus : pb::IMessage<RoomLuckyWheelBonus> {
    private static readonly pb::MessageParser<RoomLuckyWheelBonus> _parser = new pb::MessageParser<RoomLuckyWheelBonus>(() => new RoomLuckyWheelBonus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomLuckyWheelBonus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomLuckyWheelBonus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomLuckyWheelBonus(RoomLuckyWheelBonus other) : this() {
      roomId_ = other.roomId_;
      roomLevel_ = other.roomLevel_;
      idIndex_ = other.idIndex_;
      multipleIndex_ = other.multipleIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomLuckyWheelBonus Clone() {
      return new RoomLuckyWheelBonus(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private long roomId_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "room_level" field.</summary>
    public const int RoomLevelFieldNumber = 2;
    private int roomLevel_;
    /// <summary>
    /// 房间等级, 1=初级，2=中级，3=高级，4=精英，5=大师
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomLevel {
      get { return roomLevel_; }
      set {
        roomLevel_ = value;
      }
    }

    /// <summary>Field number for the "id_index" field.</summary>
    public const int IdIndexFieldNumber = 3;
    private int idIndex_;
    /// <summary>
    /// 奖品索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdIndex {
      get { return idIndex_; }
      set {
        idIndex_ = value;
      }
    }

    /// <summary>Field number for the "multiple_index" field.</summary>
    public const int MultipleIndexFieldNumber = 4;
    private int multipleIndex_;
    /// <summary>
    /// 倍数索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MultipleIndex {
      get { return multipleIndex_; }
      set {
        multipleIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomLuckyWheelBonus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomLuckyWheelBonus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (RoomLevel != other.RoomLevel) return false;
      if (IdIndex != other.IdIndex) return false;
      if (MultipleIndex != other.MultipleIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (RoomLevel != 0) hash ^= RoomLevel.GetHashCode();
      if (IdIndex != 0) hash ^= IdIndex.GetHashCode();
      if (MultipleIndex != 0) hash ^= MultipleIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (RoomLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomLevel);
      }
      if (IdIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IdIndex);
      }
      if (MultipleIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MultipleIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (RoomLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomLevel);
      }
      if (IdIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdIndex);
      }
      if (MultipleIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MultipleIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomLuckyWheelBonus other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.RoomLevel != 0) {
        RoomLevel = other.RoomLevel;
      }
      if (other.IdIndex != 0) {
        IdIndex = other.IdIndex;
      }
      if (other.MultipleIndex != 0) {
        MultipleIndex = other.MultipleIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            RoomLevel = input.ReadInt32();
            break;
          }
          case 24: {
            IdIndex = input.ReadInt32();
            break;
          }
          case 32: {
            MultipleIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomRobot : pb::IMessage<RoomRobot> {
    private static readonly pb::MessageParser<RoomRobot> _parser = new pb::MessageParser<RoomRobot>(() => new RoomRobot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomRobot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomRobot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomRobot(RoomRobot other) : this() {
      roomId_ = other.roomId_;
      typeId_ = other.typeId_;
      userId_ = other.userId_;
      name_ = other.name_;
      headImgUrl_ = other.headImgUrl_;
      sex_ = other.sex_;
      gold_ = other.gold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomRobot Clone() {
      return new RoomRobot(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private long roomId_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "type_id" field.</summary>
    public const int TypeIdFieldNumber = 2;
    private int typeId_;
    /// <summary>
    /// 房间类型ID，蕴含玩法和等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeId {
      get { return typeId_; }
      set {
        typeId_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 3;
    private long userId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    /// 玩家昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "head_img_url" field.</summary>
    public const int HeadImgUrlFieldNumber = 5;
    private string headImgUrl_ = "";
    /// <summary>
    /// 头像URL地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadImgUrl {
      get { return headImgUrl_; }
      set {
        headImgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 6;
    private string sex_ = "";
    /// <summary>
    /// 玩家性别 0代表女 1代表男 2代表未知
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sex {
      get { return sex_; }
      set {
        sex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 7;
    private long gold_;
    /// <summary>
    /// 用户拥有金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomRobot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomRobot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (TypeId != other.TypeId) return false;
      if (UserId != other.UserId) return false;
      if (Name != other.Name) return false;
      if (HeadImgUrl != other.HeadImgUrl) return false;
      if (Sex != other.Sex) return false;
      if (Gold != other.Gold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (TypeId != 0) hash ^= TypeId.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (HeadImgUrl.Length != 0) hash ^= HeadImgUrl.GetHashCode();
      if (Sex.Length != 0) hash ^= Sex.GetHashCode();
      if (Gold != 0L) hash ^= Gold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (TypeId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TypeId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (HeadImgUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(HeadImgUrl);
      }
      if (Sex.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Sex);
      }
      if (Gold != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Gold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (TypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HeadImgUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadImgUrl);
      }
      if (Sex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sex);
      }
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomRobot other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.TypeId != 0) {
        TypeId = other.TypeId;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.HeadImgUrl.Length != 0) {
        HeadImgUrl = other.HeadImgUrl;
      }
      if (other.Sex.Length != 0) {
        Sex = other.Sex;
      }
      if (other.Gold != 0L) {
        Gold = other.Gold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            TypeId = input.ReadInt32();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            HeadImgUrl = input.ReadString();
            break;
          }
          case 50: {
            Sex = input.ReadString();
            break;
          }
          case 56: {
            Gold = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 单局结算
  /// </summary>
  public sealed partial class SimpleResultInfo : pb::IMessage<SimpleResultInfo> {
    private static readonly pb::MessageParser<SimpleResultInfo> _parser = new pb::MessageParser<SimpleResultInfo>(() => new SimpleResultInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleResultInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleResultInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleResultInfo(SimpleResultInfo other) : this() {
      userId_ = other.userId_;
      userName_ = other.userName_;
      headImgUrl_ = other.headImgUrl_;
      piaoFen_ = other.piaoFen_;
      zhadan_ = other.zhadan_;
      totalWin_ = other.totalWin_;
      cards_ = other.cards_.Clone();
      redTen_ = other.redTen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleResultInfo Clone() {
      return new SimpleResultInfo(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    /// 用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    /// <summary>
    /// 用户名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "head_img_url" field.</summary>
    public const int HeadImgUrlFieldNumber = 3;
    private string headImgUrl_ = "";
    /// <summary>
    /// 头像地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadImgUrl {
      get { return headImgUrl_; }
      set {
        headImgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "piaoFen" field.</summary>
    public const int PiaoFenFieldNumber = 4;
    private int piaoFen_;
    /// <summary>
    /// 飘分输赢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PiaoFen {
      get { return piaoFen_; }
      set {
        piaoFen_ = value;
      }
    }

    /// <summary>Field number for the "zhadan" field.</summary>
    public const int ZhadanFieldNumber = 5;
    private int zhadan_;
    /// <summary>
    /// 炸弹输赢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Zhadan {
      get { return zhadan_; }
      set {
        zhadan_ = value;
      }
    }

    /// <summary>Field number for the "totalWin" field.</summary>
    public const int TotalWinFieldNumber = 6;
    private int totalWin_;
    /// <summary>
    /// 牌局输赢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家剩余牌数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "redTen" field.</summary>
    public const int RedTenFieldNumber = 8;
    private bool redTen_;
    /// <summary>
    /// 是否有红十
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RedTen {
      get { return redTen_; }
      set {
        redTen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleResultInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleResultInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (UserName != other.UserName) return false;
      if (HeadImgUrl != other.HeadImgUrl) return false;
      if (PiaoFen != other.PiaoFen) return false;
      if (Zhadan != other.Zhadan) return false;
      if (TotalWin != other.TotalWin) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if (RedTen != other.RedTen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (HeadImgUrl.Length != 0) hash ^= HeadImgUrl.GetHashCode();
      if (PiaoFen != 0) hash ^= PiaoFen.GetHashCode();
      if (Zhadan != 0) hash ^= Zhadan.GetHashCode();
      if (TotalWin != 0) hash ^= TotalWin.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (RedTen != false) hash ^= RedTen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (HeadImgUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HeadImgUrl);
      }
      if (PiaoFen != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PiaoFen);
      }
      if (Zhadan != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Zhadan);
      }
      if (TotalWin != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TotalWin);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (RedTen != false) {
        output.WriteRawTag(64);
        output.WriteBool(RedTen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (HeadImgUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadImgUrl);
      }
      if (PiaoFen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PiaoFen);
      }
      if (Zhadan != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Zhadan);
      }
      if (TotalWin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalWin);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (RedTen != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleResultInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.HeadImgUrl.Length != 0) {
        HeadImgUrl = other.HeadImgUrl;
      }
      if (other.PiaoFen != 0) {
        PiaoFen = other.PiaoFen;
      }
      if (other.Zhadan != 0) {
        Zhadan = other.Zhadan;
      }
      if (other.TotalWin != 0) {
        TotalWin = other.TotalWin;
      }
      cards_.Add(other.cards_);
      if (other.RedTen != false) {
        RedTen = other.RedTen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 26: {
            HeadImgUrl = input.ReadString();
            break;
          }
          case 32: {
            PiaoFen = input.ReadInt32();
            break;
          }
          case 40: {
            Zhadan = input.ReadInt32();
            break;
          }
          case 48: {
            TotalWin = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 64: {
            RedTen = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 单人总结算
  /// </summary>
  public sealed partial class ResultPanelInfo : pb::IMessage<ResultPanelInfo> {
    private static readonly pb::MessageParser<ResultPanelInfo> _parser = new pb::MessageParser<ResultPanelInfo>(() => new ResultPanelInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResultPanelInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultPanelInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultPanelInfo(ResultPanelInfo other) : this() {
      userId_ = other.userId_;
      userName_ = other.userName_;
      headImgUrl_ = other.headImgUrl_;
      gold_ = other.gold_;
      piaoFen_ = other.piaoFen_;
      zhadan_ = other.zhadan_;
      totalWin_ = other.totalWin_;
      maxWin_ = other.maxWin_;
      winLoseJv_ = other.winLoseJv_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultPanelInfo Clone() {
      return new ResultPanelInfo(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    /// 用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    /// <summary>
    /// 用户名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "head_img_url" field.</summary>
    public const int HeadImgUrlFieldNumber = 3;
    private string headImgUrl_ = "";
    /// <summary>
    /// 头像地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadImgUrl {
      get { return headImgUrl_; }
      set {
        headImgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 4;
    private int gold_;
    /// <summary>
    /// 最后一局输赢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "piaoFen" field.</summary>
    public const int PiaoFenFieldNumber = 5;
    private int piaoFen_;
    /// <summary>
    /// 飘分输赢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PiaoFen {
      get { return piaoFen_; }
      set {
        piaoFen_ = value;
      }
    }

    /// <summary>Field number for the "zhadan" field.</summary>
    public const int ZhadanFieldNumber = 6;
    private int zhadan_;
    /// <summary>
    /// 炸弹输赢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Zhadan {
      get { return zhadan_; }
      set {
        zhadan_ = value;
      }
    }

    /// <summary>Field number for the "totalWin" field.</summary>
    public const int TotalWinFieldNumber = 7;
    private int totalWin_;
    /// <summary>
    /// 牌局输赢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    /// <summary>Field number for the "maxWin" field.</summary>
    public const int MaxWinFieldNumber = 8;
    private int maxWin_;
    /// <summary>
    /// 单局最高赢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxWin {
      get { return maxWin_; }
      set {
        maxWin_ = value;
      }
    }

    /// <summary>Field number for the "winLoseJv" field.</summary>
    public const int WinLoseJvFieldNumber = 9;
    private string winLoseJv_ = "";
    /// <summary>
    /// 胜负局数  赢:输
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WinLoseJv {
      get { return winLoseJv_; }
      set {
        winLoseJv_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResultPanelInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResultPanelInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (UserName != other.UserName) return false;
      if (HeadImgUrl != other.HeadImgUrl) return false;
      if (Gold != other.Gold) return false;
      if (PiaoFen != other.PiaoFen) return false;
      if (Zhadan != other.Zhadan) return false;
      if (TotalWin != other.TotalWin) return false;
      if (MaxWin != other.MaxWin) return false;
      if (WinLoseJv != other.WinLoseJv) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (HeadImgUrl.Length != 0) hash ^= HeadImgUrl.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (PiaoFen != 0) hash ^= PiaoFen.GetHashCode();
      if (Zhadan != 0) hash ^= Zhadan.GetHashCode();
      if (TotalWin != 0) hash ^= TotalWin.GetHashCode();
      if (MaxWin != 0) hash ^= MaxWin.GetHashCode();
      if (WinLoseJv.Length != 0) hash ^= WinLoseJv.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (HeadImgUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HeadImgUrl);
      }
      if (Gold != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Gold);
      }
      if (PiaoFen != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PiaoFen);
      }
      if (Zhadan != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Zhadan);
      }
      if (TotalWin != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TotalWin);
      }
      if (MaxWin != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MaxWin);
      }
      if (WinLoseJv.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(WinLoseJv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (HeadImgUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadImgUrl);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (PiaoFen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PiaoFen);
      }
      if (Zhadan != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Zhadan);
      }
      if (TotalWin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalWin);
      }
      if (MaxWin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxWin);
      }
      if (WinLoseJv.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WinLoseJv);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResultPanelInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.HeadImgUrl.Length != 0) {
        HeadImgUrl = other.HeadImgUrl;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.PiaoFen != 0) {
        PiaoFen = other.PiaoFen;
      }
      if (other.Zhadan != 0) {
        Zhadan = other.Zhadan;
      }
      if (other.TotalWin != 0) {
        TotalWin = other.TotalWin;
      }
      if (other.MaxWin != 0) {
        MaxWin = other.MaxWin;
      }
      if (other.WinLoseJv.Length != 0) {
        WinLoseJv = other.WinLoseJv;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 26: {
            HeadImgUrl = input.ReadString();
            break;
          }
          case 32: {
            Gold = input.ReadInt32();
            break;
          }
          case 40: {
            PiaoFen = input.ReadInt32();
            break;
          }
          case 48: {
            Zhadan = input.ReadInt32();
            break;
          }
          case 56: {
            TotalWin = input.ReadInt32();
            break;
          }
          case 64: {
            MaxWin = input.ReadInt32();
            break;
          }
          case 74: {
            WinLoseJv = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 
  /// </summary>
  public sealed partial class AllResultInfo : pb::IMessage<AllResultInfo> {
    private static readonly pb::MessageParser<AllResultInfo> _parser = new pb::MessageParser<AllResultInfo>(() => new AllResultInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllResultInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllResultInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllResultInfo(AllResultInfo other) : this() {
      roomId_ = other.roomId_;
      finishJv_ = other.finishJv_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      infos_ = other.infos_.Clone();
      videoCode_ = other.videoCode_;
      isOpen_ = other.isOpen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllResultInfo Clone() {
      return new AllResultInfo(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private int roomId_;
    /// <summary>
    /// 房间号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "finish_jv" field.</summary>
    public const int FinishJvFieldNumber = 2;
    private int finishJv_;
    /// <summary>
    /// 完成局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinishJv {
      get { return finishJv_; }
      set {
        finishJv_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 3;
    private string startTime_ = "";
    /// <summary>
    /// 开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartTime {
      get { return startTime_; }
      set {
        startTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private string endTime_ = "";
    /// <summary>
    /// 结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndTime {
      get { return endTime_; }
      set {
        endTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Newddz.RoomProto.ResultPanelInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(42, global::Newddz.RoomProto.ResultPanelInfo.Parser);
    private readonly pbc::RepeatedField<global::Newddz.RoomProto.ResultPanelInfo> infos_ = new pbc::RepeatedField<global::Newddz.RoomProto.ResultPanelInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Newddz.RoomProto.ResultPanelInfo> Infos {
      get { return infos_; }
    }

    /// <summary>Field number for the "videoCode" field.</summary>
    public const int VideoCodeFieldNumber = 6;
    private int videoCode_;
    /// <summary>
    /// 录像码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VideoCode {
      get { return videoCode_; }
      set {
        videoCode_ = value;
      }
    }

    /// <summary>Field number for the "isOpen" field.</summary>
    public const int IsOpenFieldNumber = 7;
    private int isOpen_;
    /// <summary>
    /// 是否打开结算面板 0 打开 1 不打开
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllResultInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllResultInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (FinishJv != other.FinishJv) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if(!infos_.Equals(other.infos_)) return false;
      if (VideoCode != other.VideoCode) return false;
      if (IsOpen != other.IsOpen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (FinishJv != 0) hash ^= FinishJv.GetHashCode();
      if (StartTime.Length != 0) hash ^= StartTime.GetHashCode();
      if (EndTime.Length != 0) hash ^= EndTime.GetHashCode();
      hash ^= infos_.GetHashCode();
      if (VideoCode != 0) hash ^= VideoCode.GetHashCode();
      if (IsOpen != 0) hash ^= IsOpen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomId);
      }
      if (FinishJv != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FinishJv);
      }
      if (StartTime.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StartTime);
      }
      if (EndTime.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EndTime);
      }
      infos_.WriteTo(output, _repeated_infos_codec);
      if (VideoCode != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(VideoCode);
      }
      if (IsOpen != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(IsOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (FinishJv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinishJv);
      }
      if (StartTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartTime);
      }
      if (EndTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndTime);
      }
      size += infos_.CalculateSize(_repeated_infos_codec);
      if (VideoCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VideoCode);
      }
      if (IsOpen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsOpen);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllResultInfo other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.FinishJv != 0) {
        FinishJv = other.FinishJv;
      }
      if (other.StartTime.Length != 0) {
        StartTime = other.StartTime;
      }
      if (other.EndTime.Length != 0) {
        EndTime = other.EndTime;
      }
      infos_.Add(other.infos_);
      if (other.VideoCode != 0) {
        VideoCode = other.VideoCode;
      }
      if (other.IsOpen != 0) {
        IsOpen = other.IsOpen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = input.ReadInt32();
            break;
          }
          case 16: {
            FinishJv = input.ReadInt32();
            break;
          }
          case 26: {
            StartTime = input.ReadString();
            break;
          }
          case 34: {
            EndTime = input.ReadString();
            break;
          }
          case 42: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
          case 48: {
            VideoCode = input.ReadInt32();
            break;
          }
          case 56: {
            IsOpen = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 解散房间消息
  /// </summary>
  public sealed partial class DesRoom : pb::IMessage<DesRoom> {
    private static readonly pb::MessageParser<DesRoom> _parser = new pb::MessageParser<DesRoom>(() => new DesRoom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DesRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesRoom(DesRoom other) : this() {
      roomId_ = other.roomId_;
      userId_ = other.userId_;
      userName_ = other.userName_;
      players_ = other.players_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesRoom Clone() {
      return new DesRoom(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private long roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    ///发起人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 3;
    private string userName_ = "";
    /// <summary>
    /// 名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Newddz.RoomProto.PlayerInfo> _repeated_players_codec
        = pb::FieldCodec.ForMessage(34, global::Newddz.RoomProto.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Newddz.RoomProto.PlayerInfo> players_ = new pbc::RepeatedField<global::Newddz.RoomProto.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Newddz.RoomProto.PlayerInfo> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DesRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DesRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (UserId != other.UserId) return false;
      if (UserName != other.UserName) return false;
      if(!players_.Equals(other.players_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      hash ^= players_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserName);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DesRoom other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      players_.Add(other.players_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 26: {
            UserName = input.ReadString();
            break;
          }
          case 34: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战绩表
  /// </summary>
  public sealed partial class BattleRecords : pb::IMessage<BattleRecords> {
    private static readonly pb::MessageParser<BattleRecords> _parser = new pb::MessageParser<BattleRecords>(() => new BattleRecords());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleRecords> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleRecords() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleRecords(BattleRecords other) : this() {
      playerInfo_ = other.playerInfo_.Clone();
      records_ = other.records_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleRecords Clone() {
      return new BattleRecords(this);
    }

    /// <summary>Field number for the "playerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Newddz.RoomProto.PlayerInfo> _repeated_playerInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Newddz.RoomProto.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Newddz.RoomProto.PlayerInfo> playerInfo_ = new pbc::RepeatedField<global::Newddz.RoomProto.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Newddz.RoomProto.PlayerInfo> PlayerInfo {
      get { return playerInfo_; }
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Newddz.RoomProto.BattleRecord> _repeated_records_codec
        = pb::FieldCodec.ForMessage(18, global::Newddz.RoomProto.BattleRecord.Parser);
    private readonly pbc::RepeatedField<global::Newddz.RoomProto.BattleRecord> records_ = new pbc::RepeatedField<global::Newddz.RoomProto.BattleRecord>();
    /// <summary>
    /// 战绩
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Newddz.RoomProto.BattleRecord> Records {
      get { return records_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleRecords);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleRecords other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerInfo_.Equals(other.playerInfo_)) return false;
      if(!records_.Equals(other.records_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerInfo_.GetHashCode();
      hash ^= records_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerInfo_.WriteTo(output, _repeated_playerInfo_codec);
      records_.WriteTo(output, _repeated_records_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerInfo_.CalculateSize(_repeated_playerInfo_codec);
      size += records_.CalculateSize(_repeated_records_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleRecords other) {
      if (other == null) {
        return;
      }
      playerInfo_.Add(other.playerInfo_);
      records_.Add(other.records_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            playerInfo_.AddEntriesFrom(input, _repeated_playerInfo_codec);
            break;
          }
          case 18: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 个人战绩
  /// </summary>
  public sealed partial class BattleRecord : pb::IMessage<BattleRecord> {
    private static readonly pb::MessageParser<BattleRecord> _parser = new pb::MessageParser<BattleRecord>(() => new BattleRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleRecord(BattleRecord other) : this() {
      isRedTen_ = other.isRedTen_.Clone();
      winList_ = other.winList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleRecord Clone() {
      return new BattleRecord(this);
    }

    /// <summary>Field number for the "isRedTen" field.</summary>
    public const int IsRedTenFieldNumber = 4;
    private static readonly pb::FieldCodec<bool> _repeated_isRedTen_codec
        = pb::FieldCodec.ForBool(34);
    private readonly pbc::RepeatedField<bool> isRedTen_ = new pbc::RepeatedField<bool>();
    /// <summary>
    /// 是否扎鸟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> IsRedTen {
      get { return isRedTen_; }
    }

    /// <summary>Field number for the "winList" field.</summary>
    public const int WinListFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_winList_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> winList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 每一局的输赢集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> WinList {
      get { return winList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!isRedTen_.Equals(other.isRedTen_)) return false;
      if(!winList_.Equals(other.winList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= isRedTen_.GetHashCode();
      hash ^= winList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      isRedTen_.WriteTo(output, _repeated_isRedTen_codec);
      winList_.WriteTo(output, _repeated_winList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += isRedTen_.CalculateSize(_repeated_isRedTen_codec);
      size += winList_.CalculateSize(_repeated_winList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleRecord other) {
      if (other == null) {
        return;
      }
      isRedTen_.Add(other.isRedTen_);
      winList_.Add(other.winList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 34:
          case 32: {
            isRedTen_.AddEntriesFrom(input, _repeated_isRedTen_codec);
            break;
          }
          case 42:
          case 40: {
            winList_.AddEntriesFrom(input, _repeated_winList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 查看详细战绩
  /// </summary>
  public sealed partial class ShowBattleRecord : pb::IMessage<ShowBattleRecord> {
    private static readonly pb::MessageParser<ShowBattleRecord> _parser = new pb::MessageParser<ShowBattleRecord>(() => new ShowBattleRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShowBattleRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowBattleRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowBattleRecord(ShowBattleRecord other) : this() {
      baRecord_ = other.baRecord_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowBattleRecord Clone() {
      return new ShowBattleRecord(this);
    }

    /// <summary>Field number for the "baRecord" field.</summary>
    public const int BaRecordFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Newddz.RoomProto.DetailedBattleRecord> _repeated_baRecord_codec
        = pb::FieldCodec.ForMessage(10, global::Newddz.RoomProto.DetailedBattleRecord.Parser);
    private readonly pbc::RepeatedField<global::Newddz.RoomProto.DetailedBattleRecord> baRecord_ = new pbc::RepeatedField<global::Newddz.RoomProto.DetailedBattleRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Newddz.RoomProto.DetailedBattleRecord> BaRecord {
      get { return baRecord_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShowBattleRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShowBattleRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!baRecord_.Equals(other.baRecord_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= baRecord_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      baRecord_.WriteTo(output, _repeated_baRecord_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += baRecord_.CalculateSize(_repeated_baRecord_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShowBattleRecord other) {
      if (other == null) {
        return;
      }
      baRecord_.Add(other.baRecord_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            baRecord_.AddEntriesFrom(input, _repeated_baRecord_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 详细战绩
  /// </summary>
  public sealed partial class DetailedBattleRecord : pb::IMessage<DetailedBattleRecord> {
    private static readonly pb::MessageParser<DetailedBattleRecord> _parser = new pb::MessageParser<DetailedBattleRecord>(() => new DetailedBattleRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DetailedBattleRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetailedBattleRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetailedBattleRecord(DetailedBattleRecord other) : this() {
      cards_ = other.cards_.Clone();
      remainCard_ = other.remainCard_;
      zhaDan_ = other.zhaDan_;
      piaoFen_ = other.piaoFen_;
      piaofenWin_ = other.piaofenWin_;
      firstPushCards_ = other.firstPushCards_;
      playerInfo_ = other.playerInfo_ != null ? other.playerInfo_.Clone() : null;
      winGold_ = other.winGold_;
      isRedTen_ = other.isRedTen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetailedBattleRecord Clone() {
      return new DetailedBattleRecord(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Newddz.RoomProto.RecordCardData> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Newddz.RoomProto.RecordCardData.Parser);
    private readonly pbc::RepeatedField<global::Newddz.RoomProto.RecordCardData> cards_ = new pbc::RepeatedField<global::Newddz.RoomProto.RecordCardData>();
    /// <summary>
    /// 出牌顺序以及牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Newddz.RoomProto.RecordCardData> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "remainCard" field.</summary>
    public const int RemainCardFieldNumber = 2;
    private int remainCard_;
    /// <summary>
    /// 剩余牌数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainCard {
      get { return remainCard_; }
      set {
        remainCard_ = value;
      }
    }

    /// <summary>Field number for the "zhaDan" field.</summary>
    public const int ZhaDanFieldNumber = 3;
    private int zhaDan_;
    /// <summary>
    /// 炸弹输赢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZhaDan {
      get { return zhaDan_; }
      set {
        zhaDan_ = value;
      }
    }

    /// <summary>Field number for the "piaoFen" field.</summary>
    public const int PiaoFenFieldNumber = 4;
    private int piaoFen_;
    /// <summary>
    /// 飘分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PiaoFen {
      get { return piaoFen_; }
      set {
        piaoFen_ = value;
      }
    }

    /// <summary>Field number for the "piaofenWin" field.</summary>
    public const int PiaofenWinFieldNumber = 5;
    private int piaofenWin_;
    /// <summary>
    /// 飘分输赢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PiaofenWin {
      get { return piaofenWin_; }
      set {
        piaofenWin_ = value;
      }
    }

    /// <summary>Field number for the "firstPushCards" field.</summary>
    public const int FirstPushCardsFieldNumber = 6;
    private long firstPushCards_;
    /// <summary>
    /// 第一个出牌的人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FirstPushCards {
      get { return firstPushCards_; }
      set {
        firstPushCards_ = value;
      }
    }

    /// <summary>Field number for the "playerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 7;
    private global::Newddz.RoomProto.PlayerInfo playerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Newddz.RoomProto.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "winGold" field.</summary>
    public const int WinGoldFieldNumber = 8;
    private int winGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinGold {
      get { return winGold_; }
      set {
        winGold_ = value;
      }
    }

    /// <summary>Field number for the "isRedTen" field.</summary>
    public const int IsRedTenFieldNumber = 9;
    private bool isRedTen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRedTen {
      get { return isRedTen_; }
      set {
        isRedTen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DetailedBattleRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DetailedBattleRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      if (RemainCard != other.RemainCard) return false;
      if (ZhaDan != other.ZhaDan) return false;
      if (PiaoFen != other.PiaoFen) return false;
      if (PiaofenWin != other.PiaofenWin) return false;
      if (FirstPushCards != other.FirstPushCards) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (WinGold != other.WinGold) return false;
      if (IsRedTen != other.IsRedTen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (RemainCard != 0) hash ^= RemainCard.GetHashCode();
      if (ZhaDan != 0) hash ^= ZhaDan.GetHashCode();
      if (PiaoFen != 0) hash ^= PiaoFen.GetHashCode();
      if (PiaofenWin != 0) hash ^= PiaofenWin.GetHashCode();
      if (FirstPushCards != 0L) hash ^= FirstPushCards.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (WinGold != 0) hash ^= WinGold.GetHashCode();
      if (IsRedTen != false) hash ^= IsRedTen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
      if (RemainCard != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RemainCard);
      }
      if (ZhaDan != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ZhaDan);
      }
      if (PiaoFen != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PiaoFen);
      }
      if (PiaofenWin != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PiaofenWin);
      }
      if (FirstPushCards != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(FirstPushCards);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PlayerInfo);
      }
      if (WinGold != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(WinGold);
      }
      if (IsRedTen != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsRedTen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (RemainCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainCard);
      }
      if (ZhaDan != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZhaDan);
      }
      if (PiaoFen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PiaoFen);
      }
      if (PiaofenWin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PiaofenWin);
      }
      if (FirstPushCards != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FirstPushCards);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (WinGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinGold);
      }
      if (IsRedTen != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DetailedBattleRecord other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      if (other.RemainCard != 0) {
        RemainCard = other.RemainCard;
      }
      if (other.ZhaDan != 0) {
        ZhaDan = other.ZhaDan;
      }
      if (other.PiaoFen != 0) {
        PiaoFen = other.PiaoFen;
      }
      if (other.PiaofenWin != 0) {
        PiaofenWin = other.PiaofenWin;
      }
      if (other.FirstPushCards != 0L) {
        FirstPushCards = other.FirstPushCards;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          playerInfo_ = new global::Newddz.RoomProto.PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.WinGold != 0) {
        WinGold = other.WinGold;
      }
      if (other.IsRedTen != false) {
        IsRedTen = other.IsRedTen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 16: {
            RemainCard = input.ReadInt32();
            break;
          }
          case 24: {
            ZhaDan = input.ReadInt32();
            break;
          }
          case 32: {
            PiaoFen = input.ReadInt32();
            break;
          }
          case 40: {
            PiaofenWin = input.ReadInt32();
            break;
          }
          case 48: {
            FirstPushCards = input.ReadInt64();
            break;
          }
          case 58: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::Newddz.RoomProto.PlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 64: {
            WinGold = input.ReadInt32();
            break;
          }
          case 72: {
            IsRedTen = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 出牌顺序记录
  /// </summary>
  public sealed partial class RecordCardData : pb::IMessage<RecordCardData> {
    private static readonly pb::MessageParser<RecordCardData> _parser = new pb::MessageParser<RecordCardData>(() => new RecordCardData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordCardData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordCardData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordCardData(RecordCardData other) : this() {
      handTimes_ = other.handTimes_;
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordCardData Clone() {
      return new RecordCardData(this);
    }

    /// <summary>Field number for the "handTimes" field.</summary>
    public const int HandTimesFieldNumber = 1;
    private int handTimes_;
    /// <summary>
    ///第几手
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HandTimes {
      get { return handTimes_; }
      set {
        handTimes_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 出的牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordCardData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordCardData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HandTimes != other.HandTimes) return false;
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HandTimes != 0) hash ^= HandTimes.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HandTimes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HandTimes);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HandTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HandTimes);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordCardData other) {
      if (other == null) {
        return;
      }
      if (other.HandTimes != 0) {
        HandTimes = other.HandTimes;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HandTimes = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerGPSInfo : pb::IMessage<PlayerGPSInfo> {
    private static readonly pb::MessageParser<PlayerGPSInfo> _parser = new pb::MessageParser<PlayerGPSInfo>(() => new PlayerGPSInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerGPSInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerGPSInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerGPSInfo(PlayerGPSInfo other) : this() {
      isOpenGPS_ = other.isOpenGPS_;
      point_ = other.point_ != null ? other.point_.Clone() : null;
      localName_ = other.localName_;
      playerIp_ = other.playerIp_;
      playerPos_ = other.playerPos_;
      roomId_ = other.roomId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerGPSInfo Clone() {
      return new PlayerGPSInfo(this);
    }

    /// <summary>Field number for the "isOpenGPS" field.</summary>
    public const int IsOpenGPSFieldNumber = 1;
    private bool isOpenGPS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpenGPS {
      get { return isOpenGPS_; }
      set {
        isOpenGPS_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private global::Newddz.RoomProto.PlayerPoint point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Newddz.RoomProto.PlayerPoint Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "localName" field.</summary>
    public const int LocalNameFieldNumber = 3;
    private string localName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocalName {
      get { return localName_; }
      set {
        localName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerIp" field.</summary>
    public const int PlayerIpFieldNumber = 4;
    private string playerIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerIp {
      get { return playerIp_; }
      set {
        playerIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_pos" field.</summary>
    public const int PlayerPosFieldNumber = 5;
    private int playerPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerPos {
      get { return playerPos_; }
      set {
        playerPos_ = value;
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 6;
    private long roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerGPSInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerGPSInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsOpenGPS != other.IsOpenGPS) return false;
      if (!object.Equals(Point, other.Point)) return false;
      if (LocalName != other.LocalName) return false;
      if (PlayerIp != other.PlayerIp) return false;
      if (PlayerPos != other.PlayerPos) return false;
      if (RoomId != other.RoomId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsOpenGPS != false) hash ^= IsOpenGPS.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (LocalName.Length != 0) hash ^= LocalName.GetHashCode();
      if (PlayerIp.Length != 0) hash ^= PlayerIp.GetHashCode();
      if (PlayerPos != 0) hash ^= PlayerPos.GetHashCode();
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsOpenGPS != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOpenGPS);
      }
      if (point_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Point);
      }
      if (LocalName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LocalName);
      }
      if (PlayerIp.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PlayerIp);
      }
      if (PlayerPos != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PlayerPos);
      }
      if (RoomId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsOpenGPS != false) {
        size += 1 + 1;
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (LocalName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalName);
      }
      if (PlayerIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerIp);
      }
      if (PlayerPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerPos);
      }
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerGPSInfo other) {
      if (other == null) {
        return;
      }
      if (other.IsOpenGPS != false) {
        IsOpenGPS = other.IsOpenGPS;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          point_ = new global::Newddz.RoomProto.PlayerPoint();
        }
        Point.MergeFrom(other.Point);
      }
      if (other.LocalName.Length != 0) {
        LocalName = other.LocalName;
      }
      if (other.PlayerIp.Length != 0) {
        PlayerIp = other.PlayerIp;
      }
      if (other.PlayerPos != 0) {
        PlayerPos = other.PlayerPos;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsOpenGPS = input.ReadBool();
            break;
          }
          case 18: {
            if (point_ == null) {
              point_ = new global::Newddz.RoomProto.PlayerPoint();
            }
            input.ReadMessage(point_);
            break;
          }
          case 26: {
            LocalName = input.ReadString();
            break;
          }
          case 34: {
            PlayerIp = input.ReadString();
            break;
          }
          case 40: {
            PlayerPos = input.ReadInt32();
            break;
          }
          case 48: {
            RoomId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerGPSInfos : pb::IMessage<PlayerGPSInfos> {
    private static readonly pb::MessageParser<PlayerGPSInfos> _parser = new pb::MessageParser<PlayerGPSInfos>(() => new PlayerGPSInfos());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerGPSInfos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Newddz.RoomProto.RunFastRoomProtoReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerGPSInfos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerGPSInfos(PlayerGPSInfos other) : this() {
      info_ = other.info_.Clone();
      roomId_ = other.roomId_;
      roomStage_ = other.roomStage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerGPSInfos Clone() {
      return new PlayerGPSInfos(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Newddz.RoomProto.PlayerGPSInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::Newddz.RoomProto.PlayerGPSInfo.Parser);
    private readonly pbc::RepeatedField<global::Newddz.RoomProto.PlayerGPSInfo> info_ = new pbc::RepeatedField<global::Newddz.RoomProto.PlayerGPSInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Newddz.RoomProto.PlayerGPSInfo> Info {
      get { return info_; }
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private long roomId_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "room_stage" field.</summary>
    public const int RoomStageFieldNumber = 3;
    private int roomStage_;
    /// <summary>
    /// 当前房间所处阶段，在Constants中定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomStage {
      get { return roomStage_; }
      set {
        roomStage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerGPSInfos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerGPSInfos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!info_.Equals(other.info_)) return false;
      if (RoomId != other.RoomId) return false;
      if (RoomStage != other.RoomStage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= info_.GetHashCode();
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (RoomStage != 0) hash ^= RoomStage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _repeated_info_codec);
      if (RoomId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoomId);
      }
      if (RoomStage != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoomStage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += info_.CalculateSize(_repeated_info_codec);
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (RoomStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomStage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerGPSInfos other) {
      if (other == null) {
        return;
      }
      info_.Add(other.info_);
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.RoomStage != 0) {
        RoomStage = other.RoomStage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
          case 16: {
            RoomId = input.ReadInt64();
            break;
          }
          case 24: {
            RoomStage = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
