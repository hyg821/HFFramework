// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: community_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Communityservice.Protobuf {

  /// <summary>Holder for reflection information generated from community_service.proto</summary>
  public static partial class CommunityServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for community_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommunityServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chdjb21tdW5pdHlfc2VydmljZS5wcm90bxIZY29tbXVuaXR5c2VydmljZS5w",
            "cm90b2J1ZhoMY29tbW9uLnByb3RvGg1waHpyb29tLnByb3RvIlAKDUNvbW11",
            "bml0eUxpc3QSPwoNY29tbXVuaXR5aW5mbxgBIAMoCzIoLmNvbW11bml0eXNl",
            "cnZpY2UucHJvdG9idWYuQ29tbXVuaXR5SW5mbyLyAgoNQ29tbXVuaXR5SW5m",
            "bxIQCgh1bmlxdWVJZBgBIAEoBRIMCgRuYW1lGAIgASgJEg4KBnVzZXJJZBgD",
            "IAEoAxIQCgh1c2VyTmFtZRgEIAEoCRISCgpoZWFkSW1nVXJsGAUgASgJEg0K",
            "BXN0YXRlGAYgASgFEhIKCmdhbWVJZExpc3QYByADKAUSDQoFSXNUb3AYCCAB",
            "KAUSEgoKT25saW5lRGVzaxgJIAEoBRItCgR1c2VyGAogAygLMh8uY29tbXVu",
            "aXR5c2VydmljZS5wcm90b2J1Zi5Vc2VyEhEKCWlzU2hvd1JlZBgLIAEoCBIR",
            "Cglpc0pvaW5TZXQYDCABKAgSEAoIaXNPdXRTZXQYDSABKAgSFQoNaXNEaXNz",
            "b2x2ZVNldBgOIAEoCBIUCgxpc1Nob3dNZW1iZXIYDyABKAgSFAoMaXNTaG93",
            "UmVjb3JkGBAgASgIEg0KBW5vdGljGBEgASgJEgwKBGlzQUEYEiABKAgiRAoJ",
            "QXBwbHlMaXN0EjcKCWFwcGx5TGlzdBgBIAMoCzIkLmNvbW11bml0eXNlcnZp",
            "Y2UucHJvdG9idWYuQXBwbHlJbmZvIsYBCglBcHBseUluZm8SDgoGdXNlcklk",
            "GAEgASgDEgwKBHRpbWUYAiABKAMSDwoHaXNBZ3JlZRgDIAEoCBIMCgR0eXBl",
            "GAQgASgFEhAKCHVuaXF1ZUlkGAUgASgFEhIKCnVuaXF1ZU5hbWUYBiABKAkS",
            "EAoIdXNlck5hbWUYByABKAkSEgoKaGVhZEltZ1VybBgIIAEoCRIQCghOZXdz",
            "VHlwZRgJIAEoBRIRCglpc1Nob3dSZWQYCiABKAgSCwoDc2V0GAsgASgIIpgB",
            "CglUYWJsZUxpc3QSPwoNY29tbXVuaXR5SW5mbxgBIAEoCzIoLmNvbW11bml0",
            "eXNlcnZpY2UucHJvdG9idWYuQ29tbXVuaXR5SW5mbxI3Cgl0YWJsZWluZm8Y",
            "AiADKAsyJC5jb21tdW5pdHlzZXJ2aWNlLnByb3RvYnVmLlRhYmxlSW5mbxIR",
            "Cglpc1Nob3dSZWQYAyABKAgiOQoIVXNlckxpc3QSLQoEdXNlchgBIAMoCzIf",
            "LmNvbW11bml0eXNlcnZpY2UucHJvdG9idWYuVXNlciKQAwoJVGFibGVJbmZv",
            "EhAKCHVuaXF1ZUlkGAEgASgFEg4KBnJvb21JZBgCIAEoCRIOCgZnYW1lSWQY",
            "AyABKAUSDQoFc3RhdGUYBCABKAUSDAoEdHlwZRgFIAEoBRIQCghwYXNzd29y",
            "ZBgGIAEoCRItCgR1c2VyGAcgAygLMh8uY29tbXVuaXR5c2VydmljZS5wcm90",
            "b2J1Zi5Vc2VyEjAKCXBhb2Rla3VhaRgIIAEoCzIdLmNlbnRlcnNkay5wcm90",
            "b2J1Zi5QYW9EZUt1YWkSEQoJZ2FtZUNvdW50GAkgASgFEhQKDG9ubGluZVBl",
            "b3BsZRgKIAEoBRIRCgl6b25nQ291bnQYCyABKAUSDgoGcGVvcGxlGAwgASgF",
            "Ei0KB3Bhb2h1emkYDSABKAsyHC5wYW9odXppLnByb3RvYnVmLkNyZWF0ZVJv",
            "b20SMgoHbWFqaWFuZxgOIAEoCzIhLmNlbnRlcnNkay5wcm90b2J1Zi5QYXJh",
            "bXNNYUppYW5nEhIKCmNyZWF0ZVRpbWUYDyABKAMi0AMKBFVzZXISDgoGdXNl",
            "cklkGAEgASgDEhAKCHVzZXJOYW1lGAIgASgJEhMKC3VzZXJIZWFkVXJsGAMg",
            "ASgJEg0KBXN0YXRlGAQgASgFEg0KBWNvdW50GAUgASgFEhYKDkJpZ3BsYXll",
            "ckNvdW50GAYgASgFEhkKEVByb2hpYml0VGFibGVMaXN0GAcgAygDEhAKCFJl",
            "bWFya3MxGAggASgJEhAKCFJlbWFya3MyGAkgASgJEhAKCEpvaW5UaW1lGAog",
            "ASgDEgwKBGR1dHkYCyABKAUSEwoLT25saW5lU3RhdGUYDCABKAkSEQoJaXND",
            "YW5QbGF5GA0gASgIEhMKC2NvbW11bml0eUlkGA4gASgFEhAKCElzT25saW5l",
            "GA8gASgFEhcKD0JlbG9uZVRvUGFydG5lchgQIAEoAxIbChNCZWxvbmVUb1Bh",
            "cnRuZXJOYW1lGBEgASgJEhEKCWlzUGFydG5lchgSIAEoCBIQCghVc2VyVHlw",
            "ZRgTIAEoBRIWCg5CaWdwbGF5ZXJTY29yZRgUIAEoBRIRCgl6b25nU2NvcmUY",
            "FSABKAUSEgoKb3BlblRhYmxlcxgWIAEoBRITCgtleHBlbmRNb25leRgXIAEo",
            "BSJSCghDaGF0TGlzdBI2CgRjaGF0GAEgAygLMiguY29tbXVuaXR5c2Vydmlj",
            "ZS5wcm90b2J1Zi5Db21tdW5pdHlDaGF0Eg4KBm5vdGljZRgCIAEoCSK/AQoN",
            "Q29tbXVuaXR5Q2hhdBIQCgh1bmlxdWVJZBgBIAEoBRITCgtkZXNjcmlwdGlv",
            "bhgCIAEoCRIMCgR0eXBlGAMgASgFEg4KBnVzZXJJZBgEIAEoAxIQCgh1c2Vy",
            "TmFtZRgFIAEoCRITCgt1c2VySGVhZFVybBgGIAEoCRIMCgR0aW1lGAcgASgD",
            "Eg8KB3ZvaWNlSWQYCCABKAkSEgoKdm9pY2VUaW1lcxgJIAEoBRIPCgdpbWFn",
            "ZUlkGAogASgJQjYKHWNvbS5ob29sYWkuY2VudGVyc2RrLnByb3RvYnVmQhVD",
            "b21tdW5pdHlTZXJ2aWNlUHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Centersdk.Protobuf.CommonReflection.Descriptor, global::Paohuzi.Protobuf.PhzroomReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Communityservice.Protobuf.CommunityList), global::Communityservice.Protobuf.CommunityList.Parser, new[]{ "Communityinfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Communityservice.Protobuf.CommunityInfo), global::Communityservice.Protobuf.CommunityInfo.Parser, new[]{ "UniqueId", "Name", "UserId", "UserName", "HeadImgUrl", "State", "GameIdList", "IsTop", "OnlineDesk", "User", "IsShowRed", "IsJoinSet", "IsOutSet", "IsDissolveSet", "IsShowMember", "IsShowRecord", "Notic", "IsAA" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Communityservice.Protobuf.ApplyList), global::Communityservice.Protobuf.ApplyList.Parser, new[]{ "ApplyList_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Communityservice.Protobuf.ApplyInfo), global::Communityservice.Protobuf.ApplyInfo.Parser, new[]{ "UserId", "Time", "IsAgree", "Type", "UniqueId", "UniqueName", "UserName", "HeadImgUrl", "NewsType", "IsShowRed", "Set" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Communityservice.Protobuf.TableList), global::Communityservice.Protobuf.TableList.Parser, new[]{ "CommunityInfo", "Tableinfo", "IsShowRed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Communityservice.Protobuf.UserList), global::Communityservice.Protobuf.UserList.Parser, new[]{ "User" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Communityservice.Protobuf.TableInfo), global::Communityservice.Protobuf.TableInfo.Parser, new[]{ "UniqueId", "RoomId", "GameId", "State", "Type", "Password", "User", "Paodekuai", "GameCount", "OnlinePeople", "ZongCount", "People", "Paohuzi", "Majiang", "CreateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Communityservice.Protobuf.User), global::Communityservice.Protobuf.User.Parser, new[]{ "UserId", "UserName", "UserHeadUrl", "State", "Count", "BigplayerCount", "ProhibitTableList", "Remarks1", "Remarks2", "JoinTime", "Duty", "OnlineState", "IsCanPlay", "CommunityId", "IsOnline", "BeloneToPartner", "BeloneToPartnerName", "IsPartner", "UserType", "BigplayerScore", "ZongScore", "OpenTables", "ExpendMoney" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Communityservice.Protobuf.ChatList), global::Communityservice.Protobuf.ChatList.Parser, new[]{ "Chat", "Notice" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Communityservice.Protobuf.CommunityChat), global::Communityservice.Protobuf.CommunityChat.Parser, new[]{ "UniqueId", "Description", "Type", "UserId", "UserName", "UserHeadUrl", "Time", "VoiceId", "VoiceTimes", "ImageId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///亲友圈列表
  /// </summary>
  public sealed partial class CommunityList : pb::IMessage<CommunityList> {
    private static readonly pb::MessageParser<CommunityList> _parser = new pb::MessageParser<CommunityList>(() => new CommunityList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommunityList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Communityservice.Protobuf.CommunityServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunityList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunityList(CommunityList other) : this() {
      communityinfo_ = other.communityinfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunityList Clone() {
      return new CommunityList(this);
    }

    /// <summary>Field number for the "communityinfo" field.</summary>
    public const int CommunityinfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Communityservice.Protobuf.CommunityInfo> _repeated_communityinfo_codec
        = pb::FieldCodec.ForMessage(10, global::Communityservice.Protobuf.CommunityInfo.Parser);
    private readonly pbc::RepeatedField<global::Communityservice.Protobuf.CommunityInfo> communityinfo_ = new pbc::RepeatedField<global::Communityservice.Protobuf.CommunityInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Communityservice.Protobuf.CommunityInfo> Communityinfo {
      get { return communityinfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommunityList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommunityList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!communityinfo_.Equals(other.communityinfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= communityinfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      communityinfo_.WriteTo(output, _repeated_communityinfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += communityinfo_.CalculateSize(_repeated_communityinfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommunityList other) {
      if (other == null) {
        return;
      }
      communityinfo_.Add(other.communityinfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            communityinfo_.AddEntriesFrom(input, _repeated_communityinfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///亲友圈
  /// </summary>
  public sealed partial class CommunityInfo : pb::IMessage<CommunityInfo> {
    private static readonly pb::MessageParser<CommunityInfo> _parser = new pb::MessageParser<CommunityInfo>(() => new CommunityInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommunityInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Communityservice.Protobuf.CommunityServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunityInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunityInfo(CommunityInfo other) : this() {
      uniqueId_ = other.uniqueId_;
      name_ = other.name_;
      userId_ = other.userId_;
      userName_ = other.userName_;
      headImgUrl_ = other.headImgUrl_;
      state_ = other.state_;
      gameIdList_ = other.gameIdList_.Clone();
      isTop_ = other.isTop_;
      onlineDesk_ = other.onlineDesk_;
      user_ = other.user_.Clone();
      isShowRed_ = other.isShowRed_;
      isJoinSet_ = other.isJoinSet_;
      isOutSet_ = other.isOutSet_;
      isDissolveSet_ = other.isDissolveSet_;
      isShowMember_ = other.isShowMember_;
      isShowRecord_ = other.isShowRecord_;
      notic_ = other.notic_;
      isAA_ = other.isAA_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunityInfo Clone() {
      return new CommunityInfo(this);
    }

    /// <summary>Field number for the "uniqueId" field.</summary>
    public const int UniqueIdFieldNumber = 1;
    private int uniqueId_;
    /// <summary>
    /// 亲友圈id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 亲友圈名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 3;
    private long userId_;
    /// <summary>
    ///创建人id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 4;
    private string userName_ = "";
    /// <summary>
    ///创建人name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headImgUrl" field.</summary>
    public const int HeadImgUrlFieldNumber = 5;
    private string headImgUrl_ = "";
    /// <summary>
    ///创建人头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadImgUrl {
      get { return headImgUrl_; }
      set {
        headImgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 6;
    private int state_;
    /// <summary>
    /// 亲友圈状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "gameIdList" field.</summary>
    public const int GameIdListFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_gameIdList_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> gameIdList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///游戏列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GameIdList {
      get { return gameIdList_; }
    }

    /// <summary>Field number for the "IsTop" field.</summary>
    public const int IsTopFieldNumber = 8;
    private int isTop_;
    /// <summary>
    ///是否置顶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsTop {
      get { return isTop_; }
      set {
        isTop_ = value;
      }
    }

    /// <summary>Field number for the "OnlineDesk" field.</summary>
    public const int OnlineDeskFieldNumber = 9;
    private int onlineDesk_;
    /// <summary>
    /// 在线桌子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OnlineDesk {
      get { return onlineDesk_; }
      set {
        onlineDesk_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Communityservice.Protobuf.User> _repeated_user_codec
        = pb::FieldCodec.ForMessage(82, global::Communityservice.Protobuf.User.Parser);
    private readonly pbc::RepeatedField<global::Communityservice.Protobuf.User> user_ = new pbc::RepeatedField<global::Communityservice.Protobuf.User>();
    /// <summary>
    ///用户列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Communityservice.Protobuf.User> User {
      get { return user_; }
    }

    /// <summary>Field number for the "isShowRed" field.</summary>
    public const int IsShowRedFieldNumber = 11;
    private bool isShowRed_;
    /// <summary>
    ///是否显示红点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShowRed {
      get { return isShowRed_; }
      set {
        isShowRed_ = value;
      }
    }

    /// <summary>Field number for the "isJoinSet" field.</summary>
    public const int IsJoinSetFieldNumber = 12;
    private bool isJoinSet_;
    /// <summary>
    ///是否设置加入设置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsJoinSet {
      get { return isJoinSet_; }
      set {
        isJoinSet_ = value;
      }
    }

    /// <summary>Field number for the "isOutSet" field.</summary>
    public const int IsOutSetFieldNumber = 13;
    private bool isOutSet_;
    /// <summary>
    ///是否设置退出设置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOutSet {
      get { return isOutSet_; }
      set {
        isOutSet_ = value;
      }
    }

    /// <summary>Field number for the "isDissolveSet" field.</summary>
    public const int IsDissolveSetFieldNumber = 14;
    private bool isDissolveSet_;
    /// <summary>
    ///是否设置解散设置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDissolveSet {
      get { return isDissolveSet_; }
      set {
        isDissolveSet_ = value;
      }
    }

    /// <summary>Field number for the "isShowMember" field.</summary>
    public const int IsShowMemberFieldNumber = 15;
    private bool isShowMember_;
    /// <summary>
    ///是否显示成员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShowMember {
      get { return isShowMember_; }
      set {
        isShowMember_ = value;
      }
    }

    /// <summary>Field number for the "isShowRecord" field.</summary>
    public const int IsShowRecordFieldNumber = 16;
    private bool isShowRecord_;
    /// <summary>
    ///是否显示战绩
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShowRecord {
      get { return isShowRecord_; }
      set {
        isShowRecord_ = value;
      }
    }

    /// <summary>Field number for the "notic" field.</summary>
    public const int NoticFieldNumber = 17;
    private string notic_ = "";
    /// <summary>
    ///公告
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Notic {
      get { return notic_; }
      set {
        notic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isAA" field.</summary>
    public const int IsAAFieldNumber = 18;
    private bool isAA_;
    /// <summary>
    ///是否AA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAA {
      get { return isAA_; }
      set {
        isAA_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommunityInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommunityInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueId != other.UniqueId) return false;
      if (Name != other.Name) return false;
      if (UserId != other.UserId) return false;
      if (UserName != other.UserName) return false;
      if (HeadImgUrl != other.HeadImgUrl) return false;
      if (State != other.State) return false;
      if(!gameIdList_.Equals(other.gameIdList_)) return false;
      if (IsTop != other.IsTop) return false;
      if (OnlineDesk != other.OnlineDesk) return false;
      if(!user_.Equals(other.user_)) return false;
      if (IsShowRed != other.IsShowRed) return false;
      if (IsJoinSet != other.IsJoinSet) return false;
      if (IsOutSet != other.IsOutSet) return false;
      if (IsDissolveSet != other.IsDissolveSet) return false;
      if (IsShowMember != other.IsShowMember) return false;
      if (IsShowRecord != other.IsShowRecord) return false;
      if (Notic != other.Notic) return false;
      if (IsAA != other.IsAA) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueId != 0) hash ^= UniqueId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (HeadImgUrl.Length != 0) hash ^= HeadImgUrl.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      hash ^= gameIdList_.GetHashCode();
      if (IsTop != 0) hash ^= IsTop.GetHashCode();
      if (OnlineDesk != 0) hash ^= OnlineDesk.GetHashCode();
      hash ^= user_.GetHashCode();
      if (IsShowRed != false) hash ^= IsShowRed.GetHashCode();
      if (IsJoinSet != false) hash ^= IsJoinSet.GetHashCode();
      if (IsOutSet != false) hash ^= IsOutSet.GetHashCode();
      if (IsDissolveSet != false) hash ^= IsDissolveSet.GetHashCode();
      if (IsShowMember != false) hash ^= IsShowMember.GetHashCode();
      if (IsShowRecord != false) hash ^= IsShowRecord.GetHashCode();
      if (Notic.Length != 0) hash ^= Notic.GetHashCode();
      if (IsAA != false) hash ^= IsAA.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UniqueId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserName);
      }
      if (HeadImgUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(HeadImgUrl);
      }
      if (State != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(State);
      }
      gameIdList_.WriteTo(output, _repeated_gameIdList_codec);
      if (IsTop != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(IsTop);
      }
      if (OnlineDesk != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(OnlineDesk);
      }
      user_.WriteTo(output, _repeated_user_codec);
      if (IsShowRed != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsShowRed);
      }
      if (IsJoinSet != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsJoinSet);
      }
      if (IsOutSet != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsOutSet);
      }
      if (IsDissolveSet != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsDissolveSet);
      }
      if (IsShowMember != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsShowMember);
      }
      if (IsShowRecord != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsShowRecord);
      }
      if (Notic.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Notic);
      }
      if (IsAA != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsAA);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UniqueId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (HeadImgUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadImgUrl);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      size += gameIdList_.CalculateSize(_repeated_gameIdList_codec);
      if (IsTop != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsTop);
      }
      if (OnlineDesk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnlineDesk);
      }
      size += user_.CalculateSize(_repeated_user_codec);
      if (IsShowRed != false) {
        size += 1 + 1;
      }
      if (IsJoinSet != false) {
        size += 1 + 1;
      }
      if (IsOutSet != false) {
        size += 1 + 1;
      }
      if (IsDissolveSet != false) {
        size += 1 + 1;
      }
      if (IsShowMember != false) {
        size += 1 + 1;
      }
      if (IsShowRecord != false) {
        size += 2 + 1;
      }
      if (Notic.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Notic);
      }
      if (IsAA != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommunityInfo other) {
      if (other == null) {
        return;
      }
      if (other.UniqueId != 0) {
        UniqueId = other.UniqueId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.HeadImgUrl.Length != 0) {
        HeadImgUrl = other.HeadImgUrl;
      }
      if (other.State != 0) {
        State = other.State;
      }
      gameIdList_.Add(other.gameIdList_);
      if (other.IsTop != 0) {
        IsTop = other.IsTop;
      }
      if (other.OnlineDesk != 0) {
        OnlineDesk = other.OnlineDesk;
      }
      user_.Add(other.user_);
      if (other.IsShowRed != false) {
        IsShowRed = other.IsShowRed;
      }
      if (other.IsJoinSet != false) {
        IsJoinSet = other.IsJoinSet;
      }
      if (other.IsOutSet != false) {
        IsOutSet = other.IsOutSet;
      }
      if (other.IsDissolveSet != false) {
        IsDissolveSet = other.IsDissolveSet;
      }
      if (other.IsShowMember != false) {
        IsShowMember = other.IsShowMember;
      }
      if (other.IsShowRecord != false) {
        IsShowRecord = other.IsShowRecord;
      }
      if (other.Notic.Length != 0) {
        Notic = other.Notic;
      }
      if (other.IsAA != false) {
        IsAA = other.IsAA;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UniqueId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
          case 34: {
            UserName = input.ReadString();
            break;
          }
          case 42: {
            HeadImgUrl = input.ReadString();
            break;
          }
          case 48: {
            State = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            gameIdList_.AddEntriesFrom(input, _repeated_gameIdList_codec);
            break;
          }
          case 64: {
            IsTop = input.ReadInt32();
            break;
          }
          case 72: {
            OnlineDesk = input.ReadInt32();
            break;
          }
          case 82: {
            user_.AddEntriesFrom(input, _repeated_user_codec);
            break;
          }
          case 88: {
            IsShowRed = input.ReadBool();
            break;
          }
          case 96: {
            IsJoinSet = input.ReadBool();
            break;
          }
          case 104: {
            IsOutSet = input.ReadBool();
            break;
          }
          case 112: {
            IsDissolveSet = input.ReadBool();
            break;
          }
          case 120: {
            IsShowMember = input.ReadBool();
            break;
          }
          case 128: {
            IsShowRecord = input.ReadBool();
            break;
          }
          case 138: {
            Notic = input.ReadString();
            break;
          }
          case 144: {
            IsAA = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApplyList : pb::IMessage<ApplyList> {
    private static readonly pb::MessageParser<ApplyList> _parser = new pb::MessageParser<ApplyList>(() => new ApplyList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplyList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Communityservice.Protobuf.CommunityServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyList(ApplyList other) : this() {
      applyList_ = other.applyList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyList Clone() {
      return new ApplyList(this);
    }

    /// <summary>Field number for the "applyList" field.</summary>
    public const int ApplyList_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Communityservice.Protobuf.ApplyInfo> _repeated_applyList_codec
        = pb::FieldCodec.ForMessage(10, global::Communityservice.Protobuf.ApplyInfo.Parser);
    private readonly pbc::RepeatedField<global::Communityservice.Protobuf.ApplyInfo> applyList_ = new pbc::RepeatedField<global::Communityservice.Protobuf.ApplyInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Communityservice.Protobuf.ApplyInfo> ApplyList_ {
      get { return applyList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplyList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplyList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!applyList_.Equals(other.applyList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= applyList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      applyList_.WriteTo(output, _repeated_applyList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += applyList_.CalculateSize(_repeated_applyList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplyList other) {
      if (other == null) {
        return;
      }
      applyList_.Add(other.applyList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            applyList_.AddEntriesFrom(input, _repeated_applyList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApplyInfo : pb::IMessage<ApplyInfo> {
    private static readonly pb::MessageParser<ApplyInfo> _parser = new pb::MessageParser<ApplyInfo>(() => new ApplyInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Communityservice.Protobuf.CommunityServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyInfo(ApplyInfo other) : this() {
      userId_ = other.userId_;
      time_ = other.time_;
      isAgree_ = other.isAgree_;
      type_ = other.type_;
      uniqueId_ = other.uniqueId_;
      uniqueName_ = other.uniqueName_;
      userName_ = other.userName_;
      headImgUrl_ = other.headImgUrl_;
      newsType_ = other.newsType_;
      isShowRed_ = other.isShowRed_;
      set_ = other.set_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyInfo Clone() {
      return new ApplyInfo(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private long time_;
    /// <summary>
    ///申请时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "isAgree" field.</summary>
    public const int IsAgreeFieldNumber = 3;
    private bool isAgree_;
    /// <summary>
    ///是否同意
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAgree {
      get { return isAgree_; }
      set {
        isAgree_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private int type_;
    /// <summary>
    ///消息类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "uniqueId" field.</summary>
    public const int UniqueIdFieldNumber = 5;
    private int uniqueId_;
    /// <summary>
    ///亲友圈ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    /// <summary>Field number for the "uniqueName" field.</summary>
    public const int UniqueNameFieldNumber = 6;
    private string uniqueName_ = "";
    /// <summary>
    ///亲友圈mingzi
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UniqueName {
      get { return uniqueName_; }
      set {
        uniqueName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 7;
    private string userName_ = "";
    /// <summary>
    ///用户mingzi
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headImgUrl" field.</summary>
    public const int HeadImgUrlFieldNumber = 8;
    private string headImgUrl_ = "";
    /// <summary>
    ///用户头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadImgUrl {
      get { return headImgUrl_; }
      set {
        headImgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NewsType" field.</summary>
    public const int NewsTypeFieldNumber = 9;
    private int newsType_;
    /// <summary>
    ///亲友圈消息类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewsType {
      get { return newsType_; }
      set {
        newsType_ = value;
      }
    }

    /// <summary>Field number for the "isShowRed" field.</summary>
    public const int IsShowRedFieldNumber = 10;
    private bool isShowRed_;
    /// <summary>
    ///是否显示红点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShowRed {
      get { return isShowRed_; }
      set {
        isShowRed_ = value;
      }
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 11;
    private bool set_;
    /// <summary>
    ///亲友圈设置是否直接退出加入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Set {
      get { return set_; }
      set {
        set_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Time != other.Time) return false;
      if (IsAgree != other.IsAgree) return false;
      if (Type != other.Type) return false;
      if (UniqueId != other.UniqueId) return false;
      if (UniqueName != other.UniqueName) return false;
      if (UserName != other.UserName) return false;
      if (HeadImgUrl != other.HeadImgUrl) return false;
      if (NewsType != other.NewsType) return false;
      if (IsShowRed != other.IsShowRed) return false;
      if (Set != other.Set) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (IsAgree != false) hash ^= IsAgree.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (UniqueId != 0) hash ^= UniqueId.GetHashCode();
      if (UniqueName.Length != 0) hash ^= UniqueName.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (HeadImgUrl.Length != 0) hash ^= HeadImgUrl.GetHashCode();
      if (NewsType != 0) hash ^= NewsType.GetHashCode();
      if (IsShowRed != false) hash ^= IsShowRed.GetHashCode();
      if (Set != false) hash ^= Set.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (Time != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Time);
      }
      if (IsAgree != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsAgree);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
      if (UniqueId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UniqueId);
      }
      if (UniqueName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UniqueName);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(UserName);
      }
      if (HeadImgUrl.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(HeadImgUrl);
      }
      if (NewsType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(NewsType);
      }
      if (IsShowRed != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsShowRed);
      }
      if (Set != false) {
        output.WriteRawTag(88);
        output.WriteBool(Set);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (IsAgree != false) {
        size += 1 + 1;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (UniqueId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UniqueId);
      }
      if (UniqueName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueName);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (HeadImgUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadImgUrl);
      }
      if (NewsType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewsType);
      }
      if (IsShowRed != false) {
        size += 1 + 1;
      }
      if (Set != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplyInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.IsAgree != false) {
        IsAgree = other.IsAgree;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.UniqueId != 0) {
        UniqueId = other.UniqueId;
      }
      if (other.UniqueName.Length != 0) {
        UniqueName = other.UniqueName;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.HeadImgUrl.Length != 0) {
        HeadImgUrl = other.HeadImgUrl;
      }
      if (other.NewsType != 0) {
        NewsType = other.NewsType;
      }
      if (other.IsShowRed != false) {
        IsShowRed = other.IsShowRed;
      }
      if (other.Set != false) {
        Set = other.Set;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            Time = input.ReadInt64();
            break;
          }
          case 24: {
            IsAgree = input.ReadBool();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
          case 40: {
            UniqueId = input.ReadInt32();
            break;
          }
          case 50: {
            UniqueName = input.ReadString();
            break;
          }
          case 58: {
            UserName = input.ReadString();
            break;
          }
          case 66: {
            HeadImgUrl = input.ReadString();
            break;
          }
          case 72: {
            NewsType = input.ReadInt32();
            break;
          }
          case 80: {
            IsShowRed = input.ReadBool();
            break;
          }
          case 88: {
            Set = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TableList : pb::IMessage<TableList> {
    private static readonly pb::MessageParser<TableList> _parser = new pb::MessageParser<TableList>(() => new TableList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Communityservice.Protobuf.CommunityServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableList(TableList other) : this() {
      communityInfo_ = other.communityInfo_ != null ? other.communityInfo_.Clone() : null;
      tableinfo_ = other.tableinfo_.Clone();
      isShowRed_ = other.isShowRed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableList Clone() {
      return new TableList(this);
    }

    /// <summary>Field number for the "communityInfo" field.</summary>
    public const int CommunityInfoFieldNumber = 1;
    private global::Communityservice.Protobuf.CommunityInfo communityInfo_;
    /// <summary>
    /// 亲友圈id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Communityservice.Protobuf.CommunityInfo CommunityInfo {
      get { return communityInfo_; }
      set {
        communityInfo_ = value;
      }
    }

    /// <summary>Field number for the "tableinfo" field.</summary>
    public const int TableinfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Communityservice.Protobuf.TableInfo> _repeated_tableinfo_codec
        = pb::FieldCodec.ForMessage(18, global::Communityservice.Protobuf.TableInfo.Parser);
    private readonly pbc::RepeatedField<global::Communityservice.Protobuf.TableInfo> tableinfo_ = new pbc::RepeatedField<global::Communityservice.Protobuf.TableInfo>();
    /// <summary>
    ///牌桌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Communityservice.Protobuf.TableInfo> Tableinfo {
      get { return tableinfo_; }
    }

    /// <summary>Field number for the "isShowRed" field.</summary>
    public const int IsShowRedFieldNumber = 3;
    private bool isShowRed_;
    /// <summary>
    ///是否显示红点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShowRed {
      get { return isShowRed_; }
      set {
        isShowRed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CommunityInfo, other.CommunityInfo)) return false;
      if(!tableinfo_.Equals(other.tableinfo_)) return false;
      if (IsShowRed != other.IsShowRed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (communityInfo_ != null) hash ^= CommunityInfo.GetHashCode();
      hash ^= tableinfo_.GetHashCode();
      if (IsShowRed != false) hash ^= IsShowRed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (communityInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommunityInfo);
      }
      tableinfo_.WriteTo(output, _repeated_tableinfo_codec);
      if (IsShowRed != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsShowRed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (communityInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommunityInfo);
      }
      size += tableinfo_.CalculateSize(_repeated_tableinfo_codec);
      if (IsShowRed != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableList other) {
      if (other == null) {
        return;
      }
      if (other.communityInfo_ != null) {
        if (communityInfo_ == null) {
          communityInfo_ = new global::Communityservice.Protobuf.CommunityInfo();
        }
        CommunityInfo.MergeFrom(other.CommunityInfo);
      }
      tableinfo_.Add(other.tableinfo_);
      if (other.IsShowRed != false) {
        IsShowRed = other.IsShowRed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (communityInfo_ == null) {
              communityInfo_ = new global::Communityservice.Protobuf.CommunityInfo();
            }
            input.ReadMessage(communityInfo_);
            break;
          }
          case 18: {
            tableinfo_.AddEntriesFrom(input, _repeated_tableinfo_codec);
            break;
          }
          case 24: {
            IsShowRed = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserList : pb::IMessage<UserList> {
    private static readonly pb::MessageParser<UserList> _parser = new pb::MessageParser<UserList>(() => new UserList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Communityservice.Protobuf.CommunityServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserList(UserList other) : this() {
      user_ = other.user_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserList Clone() {
      return new UserList(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Communityservice.Protobuf.User> _repeated_user_codec
        = pb::FieldCodec.ForMessage(10, global::Communityservice.Protobuf.User.Parser);
    private readonly pbc::RepeatedField<global::Communityservice.Protobuf.User> user_ = new pbc::RepeatedField<global::Communityservice.Protobuf.User>();
    /// <summary>
    ///玩家列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Communityservice.Protobuf.User> User {
      get { return user_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!user_.Equals(other.user_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= user_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      user_.WriteTo(output, _repeated_user_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += user_.CalculateSize(_repeated_user_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserList other) {
      if (other == null) {
        return;
      }
      user_.Add(other.user_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            user_.AddEntriesFrom(input, _repeated_user_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TableInfo : pb::IMessage<TableInfo> {
    private static readonly pb::MessageParser<TableInfo> _parser = new pb::MessageParser<TableInfo>(() => new TableInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Communityservice.Protobuf.CommunityServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableInfo(TableInfo other) : this() {
      uniqueId_ = other.uniqueId_;
      roomId_ = other.roomId_;
      gameId_ = other.gameId_;
      state_ = other.state_;
      type_ = other.type_;
      password_ = other.password_;
      user_ = other.user_.Clone();
      paodekuai_ = other.paodekuai_ != null ? other.paodekuai_.Clone() : null;
      gameCount_ = other.gameCount_;
      onlinePeople_ = other.onlinePeople_;
      zongCount_ = other.zongCount_;
      people_ = other.people_;
      paohuzi_ = other.paohuzi_ != null ? other.paohuzi_.Clone() : null;
      majiang_ = other.majiang_ != null ? other.majiang_.Clone() : null;
      createTime_ = other.createTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableInfo Clone() {
      return new TableInfo(this);
    }

    /// <summary>Field number for the "uniqueId" field.</summary>
    public const int UniqueIdFieldNumber = 1;
    private int uniqueId_;
    /// <summary>
    /// 亲友圈id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private string roomId_ = "";
    /// <summary>
    /// 房间id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gameId" field.</summary>
    public const int GameIdFieldNumber = 3;
    private int gameId_;
    /// <summary>
    /// 游戏id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private int state_;
    /// <summary>
    ///牌桌状态 0 准备中 1 牌局中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private int type_;
    /// <summary>
    ///牌桌类型 0 可创建 1 普通牌桌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 6;
    private string password_ = "";
    /// <summary>
    ///密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Communityservice.Protobuf.User> _repeated_user_codec
        = pb::FieldCodec.ForMessage(58, global::Communityservice.Protobuf.User.Parser);
    private readonly pbc::RepeatedField<global::Communityservice.Protobuf.User> user_ = new pbc::RepeatedField<global::Communityservice.Protobuf.User>();
    /// <summary>
    ///玩家列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Communityservice.Protobuf.User> User {
      get { return user_; }
    }

    /// <summary>Field number for the "paodekuai" field.</summary>
    public const int PaodekuaiFieldNumber = 8;
    private global::Centersdk.Protobuf.PaoDeKuai paodekuai_;
    /// <summary>
    ///跑得快规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Centersdk.Protobuf.PaoDeKuai Paodekuai {
      get { return paodekuai_; }
      set {
        paodekuai_ = value;
      }
    }

    /// <summary>Field number for the "gameCount" field.</summary>
    public const int GameCountFieldNumber = 9;
    private int gameCount_;
    /// <summary>
    ///局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameCount {
      get { return gameCount_; }
      set {
        gameCount_ = value;
      }
    }

    /// <summary>Field number for the "onlinePeople" field.</summary>
    public const int OnlinePeopleFieldNumber = 10;
    private int onlinePeople_;
    /// <summary>
    ///在线人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OnlinePeople {
      get { return onlinePeople_; }
      set {
        onlinePeople_ = value;
      }
    }

    /// <summary>Field number for the "zongCount" field.</summary>
    public const int ZongCountFieldNumber = 11;
    private int zongCount_;
    /// <summary>
    ///总数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZongCount {
      get { return zongCount_; }
      set {
        zongCount_ = value;
      }
    }

    /// <summary>Field number for the "people" field.</summary>
    public const int PeopleFieldNumber = 12;
    private int people_;
    /// <summary>
    ///总数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int People {
      get { return people_; }
      set {
        people_ = value;
      }
    }

    /// <summary>Field number for the "paohuzi" field.</summary>
    public const int PaohuziFieldNumber = 13;
    private global::Paohuzi.Protobuf.CreateRoom paohuzi_;
    /// <summary>
    ///跑胡子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Paohuzi.Protobuf.CreateRoom Paohuzi {
      get { return paohuzi_; }
      set {
        paohuzi_ = value;
      }
    }

    /// <summary>Field number for the "majiang" field.</summary>
    public const int MajiangFieldNumber = 14;
    private global::Centersdk.Protobuf.ParamsMaJiang majiang_;
    /// <summary>
    ///麻将
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Centersdk.Protobuf.ParamsMaJiang Majiang {
      get { return majiang_; }
      set {
        majiang_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 15;
    private long createTime_;
    /// <summary>
    ///创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueId != other.UniqueId) return false;
      if (RoomId != other.RoomId) return false;
      if (GameId != other.GameId) return false;
      if (State != other.State) return false;
      if (Type != other.Type) return false;
      if (Password != other.Password) return false;
      if(!user_.Equals(other.user_)) return false;
      if (!object.Equals(Paodekuai, other.Paodekuai)) return false;
      if (GameCount != other.GameCount) return false;
      if (OnlinePeople != other.OnlinePeople) return false;
      if (ZongCount != other.ZongCount) return false;
      if (People != other.People) return false;
      if (!object.Equals(Paohuzi, other.Paohuzi)) return false;
      if (!object.Equals(Majiang, other.Majiang)) return false;
      if (CreateTime != other.CreateTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueId != 0) hash ^= UniqueId.GetHashCode();
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      hash ^= user_.GetHashCode();
      if (paodekuai_ != null) hash ^= Paodekuai.GetHashCode();
      if (GameCount != 0) hash ^= GameCount.GetHashCode();
      if (OnlinePeople != 0) hash ^= OnlinePeople.GetHashCode();
      if (ZongCount != 0) hash ^= ZongCount.GetHashCode();
      if (People != 0) hash ^= People.GetHashCode();
      if (paohuzi_ != null) hash ^= Paohuzi.GetHashCode();
      if (majiang_ != null) hash ^= Majiang.GetHashCode();
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UniqueId);
      }
      if (RoomId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomId);
      }
      if (GameId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GameId);
      }
      if (State != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(State);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Type);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Password);
      }
      user_.WriteTo(output, _repeated_user_codec);
      if (paodekuai_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Paodekuai);
      }
      if (GameCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(GameCount);
      }
      if (OnlinePeople != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(OnlinePeople);
      }
      if (ZongCount != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ZongCount);
      }
      if (People != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(People);
      }
      if (paohuzi_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Paohuzi);
      }
      if (majiang_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Majiang);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(CreateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UniqueId);
      }
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      size += user_.CalculateSize(_repeated_user_codec);
      if (paodekuai_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Paodekuai);
      }
      if (GameCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameCount);
      }
      if (OnlinePeople != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnlinePeople);
      }
      if (ZongCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZongCount);
      }
      if (People != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(People);
      }
      if (paohuzi_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Paohuzi);
      }
      if (majiang_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Majiang);
      }
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableInfo other) {
      if (other == null) {
        return;
      }
      if (other.UniqueId != 0) {
        UniqueId = other.UniqueId;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      user_.Add(other.user_);
      if (other.paodekuai_ != null) {
        if (paodekuai_ == null) {
          paodekuai_ = new global::Centersdk.Protobuf.PaoDeKuai();
        }
        Paodekuai.MergeFrom(other.Paodekuai);
      }
      if (other.GameCount != 0) {
        GameCount = other.GameCount;
      }
      if (other.OnlinePeople != 0) {
        OnlinePeople = other.OnlinePeople;
      }
      if (other.ZongCount != 0) {
        ZongCount = other.ZongCount;
      }
      if (other.People != 0) {
        People = other.People;
      }
      if (other.paohuzi_ != null) {
        if (paohuzi_ == null) {
          paohuzi_ = new global::Paohuzi.Protobuf.CreateRoom();
        }
        Paohuzi.MergeFrom(other.Paohuzi);
      }
      if (other.majiang_ != null) {
        if (majiang_ == null) {
          majiang_ = new global::Centersdk.Protobuf.ParamsMaJiang();
        }
        Majiang.MergeFrom(other.Majiang);
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UniqueId = input.ReadInt32();
            break;
          }
          case 18: {
            RoomId = input.ReadString();
            break;
          }
          case 24: {
            GameId = input.ReadInt32();
            break;
          }
          case 32: {
            State = input.ReadInt32();
            break;
          }
          case 40: {
            Type = input.ReadInt32();
            break;
          }
          case 50: {
            Password = input.ReadString();
            break;
          }
          case 58: {
            user_.AddEntriesFrom(input, _repeated_user_codec);
            break;
          }
          case 66: {
            if (paodekuai_ == null) {
              paodekuai_ = new global::Centersdk.Protobuf.PaoDeKuai();
            }
            input.ReadMessage(paodekuai_);
            break;
          }
          case 72: {
            GameCount = input.ReadInt32();
            break;
          }
          case 80: {
            OnlinePeople = input.ReadInt32();
            break;
          }
          case 88: {
            ZongCount = input.ReadInt32();
            break;
          }
          case 96: {
            People = input.ReadInt32();
            break;
          }
          case 106: {
            if (paohuzi_ == null) {
              paohuzi_ = new global::Paohuzi.Protobuf.CreateRoom();
            }
            input.ReadMessage(paohuzi_);
            break;
          }
          case 114: {
            if (majiang_ == null) {
              majiang_ = new global::Centersdk.Protobuf.ParamsMaJiang();
            }
            input.ReadMessage(majiang_);
            break;
          }
          case 120: {
            CreateTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Communityservice.Protobuf.CommunityServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      userId_ = other.userId_;
      userName_ = other.userName_;
      userHeadUrl_ = other.userHeadUrl_;
      state_ = other.state_;
      count_ = other.count_;
      bigplayerCount_ = other.bigplayerCount_;
      prohibitTableList_ = other.prohibitTableList_.Clone();
      remarks1_ = other.remarks1_;
      remarks2_ = other.remarks2_;
      joinTime_ = other.joinTime_;
      duty_ = other.duty_;
      onlineState_ = other.onlineState_;
      isCanPlay_ = other.isCanPlay_;
      communityId_ = other.communityId_;
      isOnline_ = other.isOnline_;
      beloneToPartner_ = other.beloneToPartner_;
      beloneToPartnerName_ = other.beloneToPartnerName_;
      isPartner_ = other.isPartner_;
      userType_ = other.userType_;
      bigplayerScore_ = other.bigplayerScore_;
      zongScore_ = other.zongScore_;
      openTables_ = other.openTables_;
      expendMoney_ = other.expendMoney_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    /// <summary>
    ///用户名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userHeadUrl" field.</summary>
    public const int UserHeadUrlFieldNumber = 3;
    private string userHeadUrl_ = "";
    /// <summary>
    ///用户头像地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserHeadUrl {
      get { return userHeadUrl_; }
      set {
        userHeadUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private int state_;
    /// <summary>
    /// 用户状态 0 空闲 1 等待中 2 对局中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 5;
    private int count_;
    /// <summary>
    /// 对局
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "BigplayerCount" field.</summary>
    public const int BigplayerCountFieldNumber = 6;
    private int bigplayerCount_;
    /// <summary>
    /// 大玩家次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BigplayerCount {
      get { return bigplayerCount_; }
      set {
        bigplayerCount_ = value;
      }
    }

    /// <summary>Field number for the "ProhibitTableList" field.</summary>
    public const int ProhibitTableListFieldNumber = 7;
    private static readonly pb::FieldCodec<long> _repeated_prohibitTableList_codec
        = pb::FieldCodec.ForInt64(58);
    private readonly pbc::RepeatedField<long> prohibitTableList_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///禁止同桌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> ProhibitTableList {
      get { return prohibitTableList_; }
    }

    /// <summary>Field number for the "Remarks1" field.</summary>
    public const int Remarks1FieldNumber = 8;
    private string remarks1_ = "";
    /// <summary>
    ///备注1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remarks1 {
      get { return remarks1_; }
      set {
        remarks1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Remarks2" field.</summary>
    public const int Remarks2FieldNumber = 9;
    private string remarks2_ = "";
    /// <summary>
    ///备注3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remarks2 {
      get { return remarks2_; }
      set {
        remarks2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "JoinTime" field.</summary>
    public const int JoinTimeFieldNumber = 10;
    private long joinTime_;
    /// <summary>
    ///加入亲友圈时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long JoinTime {
      get { return joinTime_; }
      set {
        joinTime_ = value;
      }
    }

    /// <summary>Field number for the "duty" field.</summary>
    public const int DutyFieldNumber = 11;
    private int duty_;
    /// <summary>
    /// 职务 4合伙人 3普通 2管理员 1创始人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duty {
      get { return duty_; }
      set {
        duty_ = value;
      }
    }

    /// <summary>Field number for the "OnlineState" field.</summary>
    public const int OnlineStateFieldNumber = 12;
    private string onlineState_ = "";
    /// <summary>
    ///在线状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OnlineState {
      get { return onlineState_; }
      set {
        onlineState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isCanPlay" field.</summary>
    public const int IsCanPlayFieldNumber = 13;
    private bool isCanPlay_;
    /// <summary>
    ///是否可以打牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCanPlay {
      get { return isCanPlay_; }
      set {
        isCanPlay_ = value;
      }
    }

    /// <summary>Field number for the "communityId" field.</summary>
    public const int CommunityIdFieldNumber = 14;
    private int communityId_;
    /// <summary>
    /// 亲友圈id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CommunityId {
      get { return communityId_; }
      set {
        communityId_ = value;
      }
    }

    /// <summary>Field number for the "IsOnline" field.</summary>
    public const int IsOnlineFieldNumber = 15;
    private int isOnline_;
    /// <summary>
    /// 是否在线 0不在线 1 在线
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsOnline {
      get { return isOnline_; }
      set {
        isOnline_ = value;
      }
    }

    /// <summary>Field number for the "BeloneToPartner" field.</summary>
    public const int BeloneToPartnerFieldNumber = 16;
    private long beloneToPartner_;
    /// <summary>
    /// 是谁拉进来的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BeloneToPartner {
      get { return beloneToPartner_; }
      set {
        beloneToPartner_ = value;
      }
    }

    /// <summary>Field number for the "BeloneToPartnerName" field.</summary>
    public const int BeloneToPartnerNameFieldNumber = 17;
    private string beloneToPartnerName_ = "";
    /// <summary>
    /// 是谁拉进来的名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BeloneToPartnerName {
      get { return beloneToPartnerName_; }
      set {
        beloneToPartnerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isPartner" field.</summary>
    public const int IsPartnerFieldNumber = 18;
    private bool isPartner_;
    /// <summary>
    ///是否是合伙人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPartner {
      get { return isPartner_; }
      set {
        isPartner_ = value;
      }
    }

    /// <summary>Field number for the "UserType" field.</summary>
    public const int UserTypeFieldNumber = 19;
    private int userType_;
    /// <summary>
    /// 0空闲，1 等待中，2对局中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserType {
      get { return userType_; }
      set {
        userType_ = value;
      }
    }

    /// <summary>Field number for the "BigplayerScore" field.</summary>
    public const int BigplayerScoreFieldNumber = 20;
    private int bigplayerScore_;
    /// <summary>
    /// 大玩家分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BigplayerScore {
      get { return bigplayerScore_; }
      set {
        bigplayerScore_ = value;
      }
    }

    /// <summary>Field number for the "zongScore" field.</summary>
    public const int ZongScoreFieldNumber = 21;
    private int zongScore_;
    /// <summary>
    /// 大玩家次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZongScore {
      get { return zongScore_; }
      set {
        zongScore_ = value;
      }
    }

    /// <summary>Field number for the "openTables" field.</summary>
    public const int OpenTablesFieldNumber = 22;
    private int openTables_;
    /// <summary>
    /// 开桌数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpenTables {
      get { return openTables_; }
      set {
        openTables_ = value;
      }
    }

    /// <summary>Field number for the "expendMoney" field.</summary>
    public const int ExpendMoneyFieldNumber = 23;
    private int expendMoney_;
    /// <summary>
    ///消耗金币或者钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpendMoney {
      get { return expendMoney_; }
      set {
        expendMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (UserName != other.UserName) return false;
      if (UserHeadUrl != other.UserHeadUrl) return false;
      if (State != other.State) return false;
      if (Count != other.Count) return false;
      if (BigplayerCount != other.BigplayerCount) return false;
      if(!prohibitTableList_.Equals(other.prohibitTableList_)) return false;
      if (Remarks1 != other.Remarks1) return false;
      if (Remarks2 != other.Remarks2) return false;
      if (JoinTime != other.JoinTime) return false;
      if (Duty != other.Duty) return false;
      if (OnlineState != other.OnlineState) return false;
      if (IsCanPlay != other.IsCanPlay) return false;
      if (CommunityId != other.CommunityId) return false;
      if (IsOnline != other.IsOnline) return false;
      if (BeloneToPartner != other.BeloneToPartner) return false;
      if (BeloneToPartnerName != other.BeloneToPartnerName) return false;
      if (IsPartner != other.IsPartner) return false;
      if (UserType != other.UserType) return false;
      if (BigplayerScore != other.BigplayerScore) return false;
      if (ZongScore != other.ZongScore) return false;
      if (OpenTables != other.OpenTables) return false;
      if (ExpendMoney != other.ExpendMoney) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (UserHeadUrl.Length != 0) hash ^= UserHeadUrl.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (BigplayerCount != 0) hash ^= BigplayerCount.GetHashCode();
      hash ^= prohibitTableList_.GetHashCode();
      if (Remarks1.Length != 0) hash ^= Remarks1.GetHashCode();
      if (Remarks2.Length != 0) hash ^= Remarks2.GetHashCode();
      if (JoinTime != 0L) hash ^= JoinTime.GetHashCode();
      if (Duty != 0) hash ^= Duty.GetHashCode();
      if (OnlineState.Length != 0) hash ^= OnlineState.GetHashCode();
      if (IsCanPlay != false) hash ^= IsCanPlay.GetHashCode();
      if (CommunityId != 0) hash ^= CommunityId.GetHashCode();
      if (IsOnline != 0) hash ^= IsOnline.GetHashCode();
      if (BeloneToPartner != 0L) hash ^= BeloneToPartner.GetHashCode();
      if (BeloneToPartnerName.Length != 0) hash ^= BeloneToPartnerName.GetHashCode();
      if (IsPartner != false) hash ^= IsPartner.GetHashCode();
      if (UserType != 0) hash ^= UserType.GetHashCode();
      if (BigplayerScore != 0) hash ^= BigplayerScore.GetHashCode();
      if (ZongScore != 0) hash ^= ZongScore.GetHashCode();
      if (OpenTables != 0) hash ^= OpenTables.GetHashCode();
      if (ExpendMoney != 0) hash ^= ExpendMoney.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (UserHeadUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserHeadUrl);
      }
      if (State != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(State);
      }
      if (Count != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Count);
      }
      if (BigplayerCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BigplayerCount);
      }
      prohibitTableList_.WriteTo(output, _repeated_prohibitTableList_codec);
      if (Remarks1.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Remarks1);
      }
      if (Remarks2.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Remarks2);
      }
      if (JoinTime != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(JoinTime);
      }
      if (Duty != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Duty);
      }
      if (OnlineState.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(OnlineState);
      }
      if (IsCanPlay != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsCanPlay);
      }
      if (CommunityId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(CommunityId);
      }
      if (IsOnline != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(IsOnline);
      }
      if (BeloneToPartner != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(BeloneToPartner);
      }
      if (BeloneToPartnerName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(BeloneToPartnerName);
      }
      if (IsPartner != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsPartner);
      }
      if (UserType != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(UserType);
      }
      if (BigplayerScore != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(BigplayerScore);
      }
      if (ZongScore != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(ZongScore);
      }
      if (OpenTables != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(OpenTables);
      }
      if (ExpendMoney != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(ExpendMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (UserHeadUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserHeadUrl);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (BigplayerCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BigplayerCount);
      }
      size += prohibitTableList_.CalculateSize(_repeated_prohibitTableList_codec);
      if (Remarks1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remarks1);
      }
      if (Remarks2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remarks2);
      }
      if (JoinTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(JoinTime);
      }
      if (Duty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duty);
      }
      if (OnlineState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OnlineState);
      }
      if (IsCanPlay != false) {
        size += 1 + 1;
      }
      if (CommunityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CommunityId);
      }
      if (IsOnline != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsOnline);
      }
      if (BeloneToPartner != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BeloneToPartner);
      }
      if (BeloneToPartnerName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BeloneToPartnerName);
      }
      if (IsPartner != false) {
        size += 2 + 1;
      }
      if (UserType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UserType);
      }
      if (BigplayerScore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BigplayerScore);
      }
      if (ZongScore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ZongScore);
      }
      if (OpenTables != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpenTables);
      }
      if (ExpendMoney != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExpendMoney);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.UserHeadUrl.Length != 0) {
        UserHeadUrl = other.UserHeadUrl;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.BigplayerCount != 0) {
        BigplayerCount = other.BigplayerCount;
      }
      prohibitTableList_.Add(other.prohibitTableList_);
      if (other.Remarks1.Length != 0) {
        Remarks1 = other.Remarks1;
      }
      if (other.Remarks2.Length != 0) {
        Remarks2 = other.Remarks2;
      }
      if (other.JoinTime != 0L) {
        JoinTime = other.JoinTime;
      }
      if (other.Duty != 0) {
        Duty = other.Duty;
      }
      if (other.OnlineState.Length != 0) {
        OnlineState = other.OnlineState;
      }
      if (other.IsCanPlay != false) {
        IsCanPlay = other.IsCanPlay;
      }
      if (other.CommunityId != 0) {
        CommunityId = other.CommunityId;
      }
      if (other.IsOnline != 0) {
        IsOnline = other.IsOnline;
      }
      if (other.BeloneToPartner != 0L) {
        BeloneToPartner = other.BeloneToPartner;
      }
      if (other.BeloneToPartnerName.Length != 0) {
        BeloneToPartnerName = other.BeloneToPartnerName;
      }
      if (other.IsPartner != false) {
        IsPartner = other.IsPartner;
      }
      if (other.UserType != 0) {
        UserType = other.UserType;
      }
      if (other.BigplayerScore != 0) {
        BigplayerScore = other.BigplayerScore;
      }
      if (other.ZongScore != 0) {
        ZongScore = other.ZongScore;
      }
      if (other.OpenTables != 0) {
        OpenTables = other.OpenTables;
      }
      if (other.ExpendMoney != 0) {
        ExpendMoney = other.ExpendMoney;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 26: {
            UserHeadUrl = input.ReadString();
            break;
          }
          case 32: {
            State = input.ReadInt32();
            break;
          }
          case 40: {
            Count = input.ReadInt32();
            break;
          }
          case 48: {
            BigplayerCount = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            prohibitTableList_.AddEntriesFrom(input, _repeated_prohibitTableList_codec);
            break;
          }
          case 66: {
            Remarks1 = input.ReadString();
            break;
          }
          case 74: {
            Remarks2 = input.ReadString();
            break;
          }
          case 80: {
            JoinTime = input.ReadInt64();
            break;
          }
          case 88: {
            Duty = input.ReadInt32();
            break;
          }
          case 98: {
            OnlineState = input.ReadString();
            break;
          }
          case 104: {
            IsCanPlay = input.ReadBool();
            break;
          }
          case 112: {
            CommunityId = input.ReadInt32();
            break;
          }
          case 120: {
            IsOnline = input.ReadInt32();
            break;
          }
          case 128: {
            BeloneToPartner = input.ReadInt64();
            break;
          }
          case 138: {
            BeloneToPartnerName = input.ReadString();
            break;
          }
          case 144: {
            IsPartner = input.ReadBool();
            break;
          }
          case 152: {
            UserType = input.ReadInt32();
            break;
          }
          case 160: {
            BigplayerScore = input.ReadInt32();
            break;
          }
          case 168: {
            ZongScore = input.ReadInt32();
            break;
          }
          case 176: {
            OpenTables = input.ReadInt32();
            break;
          }
          case 184: {
            ExpendMoney = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///聊天列表
  /// </summary>
  public sealed partial class ChatList : pb::IMessage<ChatList> {
    private static readonly pb::MessageParser<ChatList> _parser = new pb::MessageParser<ChatList>(() => new ChatList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Communityservice.Protobuf.CommunityServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatList(ChatList other) : this() {
      chat_ = other.chat_.Clone();
      notice_ = other.notice_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatList Clone() {
      return new ChatList(this);
    }

    /// <summary>Field number for the "chat" field.</summary>
    public const int ChatFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Communityservice.Protobuf.CommunityChat> _repeated_chat_codec
        = pb::FieldCodec.ForMessage(10, global::Communityservice.Protobuf.CommunityChat.Parser);
    private readonly pbc::RepeatedField<global::Communityservice.Protobuf.CommunityChat> chat_ = new pbc::RepeatedField<global::Communityservice.Protobuf.CommunityChat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Communityservice.Protobuf.CommunityChat> Chat {
      get { return chat_; }
    }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 2;
    private string notice_ = "";
    /// <summary>
    /// 公告
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Notice {
      get { return notice_; }
      set {
        notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!chat_.Equals(other.chat_)) return false;
      if (Notice != other.Notice) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= chat_.GetHashCode();
      if (Notice.Length != 0) hash ^= Notice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      chat_.WriteTo(output, _repeated_chat_codec);
      if (Notice.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Notice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += chat_.CalculateSize(_repeated_chat_codec);
      if (Notice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Notice);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatList other) {
      if (other == null) {
        return;
      }
      chat_.Add(other.chat_);
      if (other.Notice.Length != 0) {
        Notice = other.Notice;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            chat_.AddEntriesFrom(input, _repeated_chat_codec);
            break;
          }
          case 18: {
            Notice = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///聊天
  /// </summary>
  public sealed partial class CommunityChat : pb::IMessage<CommunityChat> {
    private static readonly pb::MessageParser<CommunityChat> _parser = new pb::MessageParser<CommunityChat>(() => new CommunityChat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommunityChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Communityservice.Protobuf.CommunityServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunityChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunityChat(CommunityChat other) : this() {
      uniqueId_ = other.uniqueId_;
      description_ = other.description_;
      type_ = other.type_;
      userId_ = other.userId_;
      userName_ = other.userName_;
      userHeadUrl_ = other.userHeadUrl_;
      time_ = other.time_;
      voiceId_ = other.voiceId_;
      voiceTimes_ = other.voiceTimes_;
      imageId_ = other.imageId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunityChat Clone() {
      return new CommunityChat(this);
    }

    /// <summary>Field number for the "uniqueId" field.</summary>
    public const int UniqueIdFieldNumber = 1;
    private int uniqueId_;
    /// <summary>
    /// 亲友圈id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// 内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    /// 类型  1 文字 2 语音 3 图片
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 4;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 5;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userHeadUrl" field.</summary>
    public const int UserHeadUrlFieldNumber = 6;
    private string userHeadUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserHeadUrl {
      get { return userHeadUrl_; }
      set {
        userHeadUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 7;
    private long time_;
    /// <summary>
    /// 当前发言时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "voiceId" field.</summary>
    public const int VoiceIdFieldNumber = 8;
    private string voiceId_ = "";
    /// <summary>
    /// 语音聊天的语音ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VoiceId {
      get { return voiceId_; }
      set {
        voiceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "voiceTimes" field.</summary>
    public const int VoiceTimesFieldNumber = 9;
    private int voiceTimes_;
    /// <summary>
    /// 语音聊天秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VoiceTimes {
      get { return voiceTimes_; }
      set {
        voiceTimes_ = value;
      }
    }

    /// <summary>Field number for the "imageId" field.</summary>
    public const int ImageIdFieldNumber = 10;
    private string imageId_ = "";
    /// <summary>
    /// 图片
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageId {
      get { return imageId_; }
      set {
        imageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommunityChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommunityChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueId != other.UniqueId) return false;
      if (Description != other.Description) return false;
      if (Type != other.Type) return false;
      if (UserId != other.UserId) return false;
      if (UserName != other.UserName) return false;
      if (UserHeadUrl != other.UserHeadUrl) return false;
      if (Time != other.Time) return false;
      if (VoiceId != other.VoiceId) return false;
      if (VoiceTimes != other.VoiceTimes) return false;
      if (ImageId != other.ImageId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueId != 0) hash ^= UniqueId.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (UserHeadUrl.Length != 0) hash ^= UserHeadUrl.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (VoiceId.Length != 0) hash ^= VoiceId.GetHashCode();
      if (VoiceTimes != 0) hash ^= VoiceTimes.GetHashCode();
      if (ImageId.Length != 0) hash ^= ImageId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UniqueId);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (UserId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UserId);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UserName);
      }
      if (UserHeadUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UserHeadUrl);
      }
      if (Time != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Time);
      }
      if (VoiceId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(VoiceId);
      }
      if (VoiceTimes != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(VoiceTimes);
      }
      if (ImageId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ImageId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UniqueId);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (UserHeadUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserHeadUrl);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (VoiceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VoiceId);
      }
      if (VoiceTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VoiceTimes);
      }
      if (ImageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommunityChat other) {
      if (other == null) {
        return;
      }
      if (other.UniqueId != 0) {
        UniqueId = other.UniqueId;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.UserHeadUrl.Length != 0) {
        UserHeadUrl = other.UserHeadUrl;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.VoiceId.Length != 0) {
        VoiceId = other.VoiceId;
      }
      if (other.VoiceTimes != 0) {
        VoiceTimes = other.VoiceTimes;
      }
      if (other.ImageId.Length != 0) {
        ImageId = other.ImageId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UniqueId = input.ReadInt32();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            UserId = input.ReadInt64();
            break;
          }
          case 42: {
            UserName = input.ReadString();
            break;
          }
          case 50: {
            UserHeadUrl = input.ReadString();
            break;
          }
          case 56: {
            Time = input.ReadInt64();
            break;
          }
          case 66: {
            VoiceId = input.ReadString();
            break;
          }
          case 72: {
            VoiceTimes = input.ReadInt32();
            break;
          }
          case 82: {
            ImageId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
