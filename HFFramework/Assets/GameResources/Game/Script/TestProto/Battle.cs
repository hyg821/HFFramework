// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: battle.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Centersdk.Protobuf {

  /// <summary>Holder for reflection information generated from battle.proto</summary>
  public static partial class BattleReflection {

    #region Descriptor
    /// <summary>File descriptor for battle.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BattleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxiYXR0bGUucHJvdG8SEmNlbnRlcnNkay5wcm90b2J1ZiJJChJCYXR0bGVS",
            "ZWFkeVJlcXVlc3QSEAoIdGFyZ2V0SWQYASABKAkSEwoLZm9ybWF0aW9uSWQY",
            "AiABKAUSDAoEdHlwZRgDIAEoBSKYAQoLQmF0dGxlUmVhZHkSNQoJc2VsZkNh",
            "cmRzGAEgAygLMiIuY2VudGVyc2RrLnByb3RvYnVmLkJhdHRsZUNhcmRJbmZv",
            "EjYKCmVuZW15Q2FyZHMYAiADKAsyIi5jZW50ZXJzZGsucHJvdG9idWYuQmF0",
            "dGxlQ2FyZEluZm8SDAoEY29kZRgDIAEoBRIMCgR0eXBlGAQgASgFIn0KDkJh",
            "dHRsZUNhcmRJbmZvEgoKAmlkGAEgASgDEg4KBmNhcmRJZBgCIAEoBRILCgNs",
            "b2MYAyABKAUSEQoJbWF4TW9yYWxlGAQgASgFEhEKCW5vd01vcmFsZRgFIAEo",
            "BRINCgVtYXhIcBgGIAEoBRINCgVub3dIcBgHIAEoBSJxCgpCYXR0bGVMb29w",
            "EjEKB3JlY29yZHMYASADKAsyIC5jZW50ZXJzZGsucHJvdG9idWYuQmF0dGxl",
            "UmVjb3JkEjAKBnJlc3VsdBgCIAEoCzIgLmNlbnRlcnNkay5wcm90b2J1Zi5C",
            "YXR0bGVSZXN1bHQicwoRQmF0dGxlUHJvY2Vzc0xpc3QSLwoGcmVhZHlzGAEg",
            "AygLMh8uY2VudGVyc2RrLnByb3RvYnVmLkJhdHRsZVJlYWR5Ei0KBWxvb3Bz",
            "GAIgAygLMh4uY2VudGVyc2RrLnByb3RvYnVmLkJhdHRsZUxvb3AicQoMQmF0",
            "dGxlUmVjb3JkEgsKA2ZpZBgBIAEoAxIxCgd0YXJnZXRzGAIgAygLMiAuY2Vu",
            "dGVyc2RrLnByb3RvYnVmLkJhdHRsZVRhcmdldBIPCgdza2lsbElkGAMgASgF",
            "EhAKCGludGVydmFsGAQgASgDInoKDEJhdHRsZVRhcmdldBIKCgJpZBgBIAEo",
            "AxItCgVidWZmcxgCIAMoCzIeLmNlbnRlcnNkay5wcm90b2J1Zi5CYXR0bGVC",
            "dWZmEg0KBW1heEhwGAMgASgFEg0KBW5vd0hwGAQgASgFEhEKCW5vd01vcmFs",
            "ZRgFIAEoBSJRCgpCYXR0bGVCdWZmEg4KBmJ1ZmZJZBgBIAEoBRINCgV0aW1l",
            "cxgCIAEoBRIOCgZ2YWx1ZXMYAyADKAUSFAoMY29udGludWVUaW1lGAQgASgF",
            "IkoKDEJhdHRsZVJlc3VsdBINCgVpc1dpbhgBIAEoCBIrCgdyZXdhcmRzGAIg",
            "AygLMhouY2VudGVyc2RrLnByb3RvYnVmLlJld2FyZCIoCgZSZXdhcmQSDgoG",
            "aXRlbUlkGAEgASgFEg4KBmFtb3VudBgCIAEoBSKyAQoJQXJlbmFJbml0EjAK",
            "B21lbWJlcnMYASADKAsyHy5jZW50ZXJzZGsucHJvdG9idWYuQXJlbmFNZW1i",
            "ZXISLQoEc2VsZhgCIAEoCzIfLmNlbnRlcnNkay5wcm90b2J1Zi5BcmVuYU1l",
            "bWJlchIMCgR0aW1lGAMgASgDEhEKCWhhc05ld01zZxgEIAEoCBIUCgxzdXJw",
            "bHVzVGltZXMYBSABKAUSDQoFaG9ub3IYBiABKAMiQgoOQXJlbmFDaGFsbGVu",
            "Z2USMAoHbWVtYmVycxgBIAMoCzIfLmNlbnRlcnNkay5wcm90b2J1Zi5BcmVu",
            "YU1lbWJlciJ5CgtBcmVuYU1lbWJlchIOCgZ1c2VySWQYASABKAMSDAoEbmFt",
            "ZRgCIAEoCRIMCgRyYW5rGAMgASgFEg0KBWxldmVsGAQgASgFEg0KBXBvd2Vy",
            "GAUgASgFEg0KBXNjb3JlGAYgASgFEhEKCWhlYWRJbWdJZBgHIAEoBSJACgxB",
            "cmVuYVJlY29yZHMSMAoHcmVjb3JkcxgBIAMoCzIfLmNlbnRlcnNkay5wcm90",
            "b2J1Zi5BcmVuYVJlY29yZCJ5CgtBcmVuYVJlY29yZBIMCgRuYW1lGAEgASgJ",
            "Eg4KBnVzZXJJZBgCIAEoAxINCgVsZXZlbBgDIAEoBRINCgVzY29yZRgEIAEo",
            "BRIMCgR0aW1lGAUgASgDEhEKCWhlYWRJbWdJZBgGIAEoBRINCgVpc1dpbhgH",
            "IAEoCCKzAQoLQXJlbmFSZXN1bHQSKwoHcmV3YXJkcxgBIAMoCzIaLmNlbnRl",
            "cnNkay5wcm90b2J1Zi5SZXdhcmQSMQoIc2VsZkluZm8YAiABKAsyHy5jZW50",
            "ZXJzZGsucHJvdG9idWYuQXJlbmFNZW1iZXISNQoMb3Bwb25lbnRJbmZvGAMg",
            "ASgLMh8uY2VudGVyc2RrLnByb3RvYnVmLkFyZW5hTWVtYmVyEg0KBWlzV2lu",
            "GAQgASgIQiwKHWNvbS5ob29sYWkuY2VudGVyc2RrLnByb3RvYnVmQgtCYXR0",
            "bGVQcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.BattleReadyRequest), global::Centersdk.Protobuf.BattleReadyRequest.Parser, new[]{ "TargetId", "FormationId", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.BattleReady), global::Centersdk.Protobuf.BattleReady.Parser, new[]{ "SelfCards", "EnemyCards", "Code", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.BattleCardInfo), global::Centersdk.Protobuf.BattleCardInfo.Parser, new[]{ "Id", "CardId", "Loc", "MaxMorale", "NowMorale", "MaxHp", "NowHp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.BattleLoop), global::Centersdk.Protobuf.BattleLoop.Parser, new[]{ "Records", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.BattleProcessList), global::Centersdk.Protobuf.BattleProcessList.Parser, new[]{ "Readys", "Loops" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.BattleRecord), global::Centersdk.Protobuf.BattleRecord.Parser, new[]{ "Fid", "Targets", "SkillId", "Interval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.BattleTarget), global::Centersdk.Protobuf.BattleTarget.Parser, new[]{ "Id", "Buffs", "MaxHp", "NowHp", "NowMorale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.BattleBuff), global::Centersdk.Protobuf.BattleBuff.Parser, new[]{ "BuffId", "Times", "Values", "ContinueTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.BattleResult), global::Centersdk.Protobuf.BattleResult.Parser, new[]{ "IsWin", "Rewards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.Reward), global::Centersdk.Protobuf.Reward.Parser, new[]{ "ItemId", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.ArenaInit), global::Centersdk.Protobuf.ArenaInit.Parser, new[]{ "Members", "Self", "Time", "HasNewMsg", "SurplusTimes", "Honor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.ArenaChallenge), global::Centersdk.Protobuf.ArenaChallenge.Parser, new[]{ "Members" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.ArenaMember), global::Centersdk.Protobuf.ArenaMember.Parser, new[]{ "UserId", "Name", "Rank", "Level", "Power", "Score", "HeadImgId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.ArenaRecords), global::Centersdk.Protobuf.ArenaRecords.Parser, new[]{ "Records" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.ArenaRecord), global::Centersdk.Protobuf.ArenaRecord.Parser, new[]{ "Name", "UserId", "Level", "Score", "Time", "HeadImgId", "IsWin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.ArenaResult), global::Centersdk.Protobuf.ArenaResult.Parser, new[]{ "Rewards", "SelfInfo", "OpponentInfo", "IsWin" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 备战请求
  /// </summary>
  public sealed partial class BattleReadyRequest : pb::IMessage<BattleReadyRequest> {
    private static readonly pb::MessageParser<BattleReadyRequest> _parser = new pb::MessageParser<BattleReadyRequest>(() => new BattleReadyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleReadyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.BattleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleReadyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleReadyRequest(BattleReadyRequest other) : this() {
      targetId_ = other.targetId_;
      formationId_ = other.formationId_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleReadyRequest Clone() {
      return new BattleReadyRequest(this);
    }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 1;
    private string targetId_ = "";
    /// <summary>
    /// 对战目标 PVE关卡或者PVP对战玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetId {
      get { return targetId_; }
      set {
        targetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "formationId" field.</summary>
    public const int FormationIdFieldNumber = 2;
    private int formationId_;
    /// <summary>
    /// 己方出战队形
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FormationId {
      get { return formationId_; }
      set {
        formationId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    /// 挑战类型 0.PVE 1.PVP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleReadyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleReadyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetId != other.TargetId) return false;
      if (FormationId != other.FormationId) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetId.Length != 0) hash ^= TargetId.GetHashCode();
      if (FormationId != 0) hash ^= FormationId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TargetId);
      }
      if (FormationId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FormationId);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetId);
      }
      if (FormationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FormationId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleReadyRequest other) {
      if (other == null) {
        return;
      }
      if (other.TargetId.Length != 0) {
        TargetId = other.TargetId;
      }
      if (other.FormationId != 0) {
        FormationId = other.FormationId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TargetId = input.ReadString();
            break;
          }
          case 16: {
            FormationId = input.ReadInt32();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 备战应答
  /// </summary>
  public sealed partial class BattleReady : pb::IMessage<BattleReady> {
    private static readonly pb::MessageParser<BattleReady> _parser = new pb::MessageParser<BattleReady>(() => new BattleReady());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleReady> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.BattleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleReady() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleReady(BattleReady other) : this() {
      selfCards_ = other.selfCards_.Clone();
      enemyCards_ = other.enemyCards_.Clone();
      code_ = other.code_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleReady Clone() {
      return new BattleReady(this);
    }

    /// <summary>Field number for the "selfCards" field.</summary>
    public const int SelfCardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.BattleCardInfo> _repeated_selfCards_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.BattleCardInfo.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.BattleCardInfo> selfCards_ = new pbc::RepeatedField<global::Centersdk.Protobuf.BattleCardInfo>();
    /// <summary>
    /// 己方出战卡牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.BattleCardInfo> SelfCards {
      get { return selfCards_; }
    }

    /// <summary>Field number for the "enemyCards" field.</summary>
    public const int EnemyCardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.BattleCardInfo> _repeated_enemyCards_codec
        = pb::FieldCodec.ForMessage(18, global::Centersdk.Protobuf.BattleCardInfo.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.BattleCardInfo> enemyCards_ = new pbc::RepeatedField<global::Centersdk.Protobuf.BattleCardInfo>();
    /// <summary>
    /// 地方出战卡牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.BattleCardInfo> EnemyCards {
      get { return enemyCards_; }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private int code_;
    /// <summary>
    /// 错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private int type_;
    /// <summary>
    /// 挑战类型 0.PVE 1.PVP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleReady);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleReady other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!selfCards_.Equals(other.selfCards_)) return false;
      if(!enemyCards_.Equals(other.enemyCards_)) return false;
      if (Code != other.Code) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= selfCards_.GetHashCode();
      hash ^= enemyCards_.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      selfCards_.WriteTo(output, _repeated_selfCards_codec);
      enemyCards_.WriteTo(output, _repeated_enemyCards_codec);
      if (Code != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Code);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += selfCards_.CalculateSize(_repeated_selfCards_codec);
      size += enemyCards_.CalculateSize(_repeated_enemyCards_codec);
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleReady other) {
      if (other == null) {
        return;
      }
      selfCards_.Add(other.selfCards_);
      enemyCards_.Add(other.enemyCards_);
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            selfCards_.AddEntriesFrom(input, _repeated_selfCards_codec);
            break;
          }
          case 18: {
            enemyCards_.AddEntriesFrom(input, _repeated_enemyCards_codec);
            break;
          }
          case 24: {
            Code = input.ReadInt32();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗卡牌信息
  /// </summary>
  public sealed partial class BattleCardInfo : pb::IMessage<BattleCardInfo> {
    private static readonly pb::MessageParser<BattleCardInfo> _parser = new pb::MessageParser<BattleCardInfo>(() => new BattleCardInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleCardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.BattleReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleCardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleCardInfo(BattleCardInfo other) : this() {
      id_ = other.id_;
      cardId_ = other.cardId_;
      loc_ = other.loc_;
      maxMorale_ = other.maxMorale_;
      nowMorale_ = other.nowMorale_;
      maxHp_ = other.maxHp_;
      nowHp_ = other.nowHp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleCardInfo Clone() {
      return new BattleCardInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    /// 编号ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 2;
    private int cardId_;
    /// <summary>
    /// 卡牌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "loc" field.</summary>
    public const int LocFieldNumber = 3;
    private int loc_;
    /// <summary>
    /// 卡牌位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Loc {
      get { return loc_; }
      set {
        loc_ = value;
      }
    }

    /// <summary>Field number for the "maxMorale" field.</summary>
    public const int MaxMoraleFieldNumber = 4;
    private int maxMorale_;
    /// <summary>
    /// 最大怒气
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxMorale {
      get { return maxMorale_; }
      set {
        maxMorale_ = value;
      }
    }

    /// <summary>Field number for the "nowMorale" field.</summary>
    public const int NowMoraleFieldNumber = 5;
    private int nowMorale_;
    /// <summary>
    /// 当前怒气
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NowMorale {
      get { return nowMorale_; }
      set {
        nowMorale_ = value;
      }
    }

    /// <summary>Field number for the "maxHp" field.</summary>
    public const int MaxHpFieldNumber = 6;
    private int maxHp_;
    /// <summary>
    /// 最大血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "nowHp" field.</summary>
    public const int NowHpFieldNumber = 7;
    private int nowHp_;
    /// <summary>
    /// 当前血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NowHp {
      get { return nowHp_; }
      set {
        nowHp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleCardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleCardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CardId != other.CardId) return false;
      if (Loc != other.Loc) return false;
      if (MaxMorale != other.MaxMorale) return false;
      if (NowMorale != other.NowMorale) return false;
      if (MaxHp != other.MaxHp) return false;
      if (NowHp != other.NowHp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (Loc != 0) hash ^= Loc.GetHashCode();
      if (MaxMorale != 0) hash ^= MaxMorale.GetHashCode();
      if (NowMorale != 0) hash ^= NowMorale.GetHashCode();
      if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
      if (NowHp != 0) hash ^= NowHp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (CardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CardId);
      }
      if (Loc != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Loc);
      }
      if (MaxMorale != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxMorale);
      }
      if (NowMorale != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NowMorale);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxHp);
      }
      if (NowHp != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NowHp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (Loc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Loc);
      }
      if (MaxMorale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMorale);
      }
      if (NowMorale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NowMorale);
      }
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
      }
      if (NowHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NowHp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleCardInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.Loc != 0) {
        Loc = other.Loc;
      }
      if (other.MaxMorale != 0) {
        MaxMorale = other.MaxMorale;
      }
      if (other.NowMorale != 0) {
        NowMorale = other.NowMorale;
      }
      if (other.MaxHp != 0) {
        MaxHp = other.MaxHp;
      }
      if (other.NowHp != 0) {
        NowHp = other.NowHp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            CardId = input.ReadInt32();
            break;
          }
          case 24: {
            Loc = input.ReadInt32();
            break;
          }
          case 32: {
            MaxMorale = input.ReadInt32();
            break;
          }
          case 40: {
            NowMorale = input.ReadInt32();
            break;
          }
          case 48: {
            MaxHp = input.ReadInt32();
            break;
          }
          case 56: {
            NowHp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗过程
  /// </summary>
  public sealed partial class BattleLoop : pb::IMessage<BattleLoop> {
    private static readonly pb::MessageParser<BattleLoop> _parser = new pb::MessageParser<BattleLoop>(() => new BattleLoop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleLoop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.BattleReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleLoop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleLoop(BattleLoop other) : this() {
      records_ = other.records_.Clone();
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleLoop Clone() {
      return new BattleLoop(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.BattleRecord> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.BattleRecord.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.BattleRecord> records_ = new pbc::RepeatedField<global::Centersdk.Protobuf.BattleRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.BattleRecord> Records {
      get { return records_; }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Centersdk.Protobuf.BattleResult result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Centersdk.Protobuf.BattleResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleLoop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleLoop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!records_.Equals(other.records_)) return false;
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= records_.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      records_.WriteTo(output, _repeated_records_codec);
      if (result_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_repeated_records_codec);
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleLoop other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
      if (other.result_ != null) {
        if (result_ == null) {
          result_ = new global::Centersdk.Protobuf.BattleResult();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
          case 18: {
            if (result_ == null) {
              result_ = new global::Centersdk.Protobuf.BattleResult();
            }
            input.ReadMessage(result_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleProcessList : pb::IMessage<BattleProcessList> {
    private static readonly pb::MessageParser<BattleProcessList> _parser = new pb::MessageParser<BattleProcessList>(() => new BattleProcessList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleProcessList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.BattleReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleProcessList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleProcessList(BattleProcessList other) : this() {
      readys_ = other.readys_.Clone();
      loops_ = other.loops_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleProcessList Clone() {
      return new BattleProcessList(this);
    }

    /// <summary>Field number for the "readys" field.</summary>
    public const int ReadysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.BattleReady> _repeated_readys_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.BattleReady.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.BattleReady> readys_ = new pbc::RepeatedField<global::Centersdk.Protobuf.BattleReady>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.BattleReady> Readys {
      get { return readys_; }
    }

    /// <summary>Field number for the "loops" field.</summary>
    public const int LoopsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.BattleLoop> _repeated_loops_codec
        = pb::FieldCodec.ForMessage(18, global::Centersdk.Protobuf.BattleLoop.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.BattleLoop> loops_ = new pbc::RepeatedField<global::Centersdk.Protobuf.BattleLoop>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.BattleLoop> Loops {
      get { return loops_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleProcessList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleProcessList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!readys_.Equals(other.readys_)) return false;
      if(!loops_.Equals(other.loops_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= readys_.GetHashCode();
      hash ^= loops_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      readys_.WriteTo(output, _repeated_readys_codec);
      loops_.WriteTo(output, _repeated_loops_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += readys_.CalculateSize(_repeated_readys_codec);
      size += loops_.CalculateSize(_repeated_loops_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleProcessList other) {
      if (other == null) {
        return;
      }
      readys_.Add(other.readys_);
      loops_.Add(other.loops_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            readys_.AddEntriesFrom(input, _repeated_readys_codec);
            break;
          }
          case 18: {
            loops_.AddEntriesFrom(input, _repeated_loops_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战报
  /// </summary>
  public sealed partial class BattleRecord : pb::IMessage<BattleRecord> {
    private static readonly pb::MessageParser<BattleRecord> _parser = new pb::MessageParser<BattleRecord>(() => new BattleRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.BattleReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleRecord(BattleRecord other) : this() {
      fid_ = other.fid_;
      targets_ = other.targets_.Clone();
      skillId_ = other.skillId_;
      interval_ = other.interval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleRecord Clone() {
      return new BattleRecord(this);
    }

    /// <summary>Field number for the "fid" field.</summary>
    public const int FidFieldNumber = 1;
    private long fid_;
    /// <summary>
    /// 战斗发起者编号ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Fid {
      get { return fid_; }
      set {
        fid_ = value;
      }
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.BattleTarget> _repeated_targets_codec
        = pb::FieldCodec.ForMessage(18, global::Centersdk.Protobuf.BattleTarget.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.BattleTarget> targets_ = new pbc::RepeatedField<global::Centersdk.Protobuf.BattleTarget>();
    /// <summary>
    /// 战斗作用目标列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.BattleTarget> Targets {
      get { return targets_; }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 3;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 4;
    private long interval_;
    /// <summary>
    /// 距离起始时间的间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fid != other.Fid) return false;
      if(!targets_.Equals(other.targets_)) return false;
      if (SkillId != other.SkillId) return false;
      if (Interval != other.Interval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fid != 0L) hash ^= Fid.GetHashCode();
      hash ^= targets_.GetHashCode();
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (Interval != 0L) hash ^= Interval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Fid);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
      if (SkillId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SkillId);
      }
      if (Interval != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Interval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fid);
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (Interval != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Interval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleRecord other) {
      if (other == null) {
        return;
      }
      if (other.Fid != 0L) {
        Fid = other.Fid;
      }
      targets_.Add(other.targets_);
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      if (other.Interval != 0L) {
        Interval = other.Interval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Fid = input.ReadInt64();
            break;
          }
          case 18: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
          case 24: {
            SkillId = input.ReadInt32();
            break;
          }
          case 32: {
            Interval = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗作用目标
  /// </summary>
  public sealed partial class BattleTarget : pb::IMessage<BattleTarget> {
    private static readonly pb::MessageParser<BattleTarget> _parser = new pb::MessageParser<BattleTarget>(() => new BattleTarget());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.BattleReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleTarget(BattleTarget other) : this() {
      id_ = other.id_;
      buffs_ = other.buffs_.Clone();
      maxHp_ = other.maxHp_;
      nowHp_ = other.nowHp_;
      nowMorale_ = other.nowMorale_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleTarget Clone() {
      return new BattleTarget(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    /// 编号ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "buffs" field.</summary>
    public const int BuffsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.BattleBuff> _repeated_buffs_codec
        = pb::FieldCodec.ForMessage(18, global::Centersdk.Protobuf.BattleBuff.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.BattleBuff> buffs_ = new pbc::RepeatedField<global::Centersdk.Protobuf.BattleBuff>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.BattleBuff> Buffs {
      get { return buffs_; }
    }

    /// <summary>Field number for the "maxHp" field.</summary>
    public const int MaxHpFieldNumber = 3;
    private int maxHp_;
    /// <summary>
    /// 最大血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "nowHp" field.</summary>
    public const int NowHpFieldNumber = 4;
    private int nowHp_;
    /// <summary>
    /// 当前血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NowHp {
      get { return nowHp_; }
      set {
        nowHp_ = value;
      }
    }

    /// <summary>Field number for the "nowMorale" field.</summary>
    public const int NowMoraleFieldNumber = 5;
    private int nowMorale_;
    /// <summary>
    /// 当前怒气
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NowMorale {
      get { return nowMorale_; }
      set {
        nowMorale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!buffs_.Equals(other.buffs_)) return false;
      if (MaxHp != other.MaxHp) return false;
      if (NowHp != other.NowHp) return false;
      if (NowMorale != other.NowMorale) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      hash ^= buffs_.GetHashCode();
      if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
      if (NowHp != 0) hash ^= NowHp.GetHashCode();
      if (NowMorale != 0) hash ^= NowMorale.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      buffs_.WriteTo(output, _repeated_buffs_codec);
      if (MaxHp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxHp);
      }
      if (NowHp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NowHp);
      }
      if (NowMorale != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NowMorale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      size += buffs_.CalculateSize(_repeated_buffs_codec);
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
      }
      if (NowHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NowHp);
      }
      if (NowMorale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NowMorale);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleTarget other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      buffs_.Add(other.buffs_);
      if (other.MaxHp != 0) {
        MaxHp = other.MaxHp;
      }
      if (other.NowHp != 0) {
        NowHp = other.NowHp;
      }
      if (other.NowMorale != 0) {
        NowMorale = other.NowMorale;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            buffs_.AddEntriesFrom(input, _repeated_buffs_codec);
            break;
          }
          case 24: {
            MaxHp = input.ReadInt32();
            break;
          }
          case 32: {
            NowHp = input.ReadInt32();
            break;
          }
          case 40: {
            NowMorale = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleBuff : pb::IMessage<BattleBuff> {
    private static readonly pb::MessageParser<BattleBuff> _parser = new pb::MessageParser<BattleBuff>(() => new BattleBuff());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleBuff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.BattleReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleBuff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleBuff(BattleBuff other) : this() {
      buffId_ = other.buffId_;
      times_ = other.times_;
      values_ = other.values_.Clone();
      continueTime_ = other.continueTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleBuff Clone() {
      return new BattleBuff(this);
    }

    /// <summary>Field number for the "buffId" field.</summary>
    public const int BuffIdFieldNumber = 1;
    private int buffId_;
    /// <summary>
    ///buffId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffId {
      get { return buffId_; }
      set {
        buffId_ = value;
      }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 2;
    private int times_;
    /// <summary>
    /// buff执行次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_values_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> values_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// buff产生作用效果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Values {
      get { return values_; }
    }

    /// <summary>Field number for the "continueTime" field.</summary>
    public const int ContinueTimeFieldNumber = 4;
    private int continueTime_;
    /// <summary>
    /// buff持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContinueTime {
      get { return continueTime_; }
      set {
        continueTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleBuff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleBuff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuffId != other.BuffId) return false;
      if (Times != other.Times) return false;
      if(!values_.Equals(other.values_)) return false;
      if (ContinueTime != other.ContinueTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BuffId != 0) hash ^= BuffId.GetHashCode();
      if (Times != 0) hash ^= Times.GetHashCode();
      hash ^= values_.GetHashCode();
      if (ContinueTime != 0) hash ^= ContinueTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuffId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BuffId);
      }
      if (Times != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Times);
      }
      values_.WriteTo(output, _repeated_values_codec);
      if (ContinueTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ContinueTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuffId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffId);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      size += values_.CalculateSize(_repeated_values_codec);
      if (ContinueTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContinueTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleBuff other) {
      if (other == null) {
        return;
      }
      if (other.BuffId != 0) {
        BuffId = other.BuffId;
      }
      if (other.Times != 0) {
        Times = other.Times;
      }
      values_.Add(other.values_);
      if (other.ContinueTime != 0) {
        ContinueTime = other.ContinueTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BuffId = input.ReadInt32();
            break;
          }
          case 16: {
            Times = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
          case 32: {
            ContinueTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗结果
  /// </summary>
  public sealed partial class BattleResult : pb::IMessage<BattleResult> {
    private static readonly pb::MessageParser<BattleResult> _parser = new pb::MessageParser<BattleResult>(() => new BattleResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.BattleReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleResult(BattleResult other) : this() {
      isWin_ = other.isWin_;
      rewards_ = other.rewards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleResult Clone() {
      return new BattleResult(this);
    }

    /// <summary>Field number for the "isWin" field.</summary>
    public const int IsWinFieldNumber = 1;
    private bool isWin_;
    /// <summary>
    /// 战斗是否胜利
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWin {
      get { return isWin_; }
      set {
        isWin_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.Reward> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(18, global::Centersdk.Protobuf.Reward.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.Reward> rewards_ = new pbc::RepeatedField<global::Centersdk.Protobuf.Reward>();
    /// <summary>
    /// 奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.Reward> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsWin != other.IsWin) return false;
      if(!rewards_.Equals(other.rewards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsWin != false) hash ^= IsWin.GetHashCode();
      hash ^= rewards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsWin != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsWin);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsWin != false) {
        size += 1 + 1;
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleResult other) {
      if (other == null) {
        return;
      }
      if (other.IsWin != false) {
        IsWin = other.IsWin;
      }
      rewards_.Add(other.rewards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsWin = input.ReadBool();
            break;
          }
          case 18: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 奖励
  /// </summary>
  public sealed partial class Reward : pb::IMessage<Reward> {
    private static readonly pb::MessageParser<Reward> _parser = new pb::MessageParser<Reward>(() => new Reward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.BattleReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reward(Reward other) : this() {
      itemId_ = other.itemId_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reward Clone() {
      return new Reward(this);
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    /// 道具ID -1经验 -2金币 -3汽油
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private int amount_;
    /// <summary>
    /// 道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (Amount != 0) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (Amount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reward other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            Amount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 竞技场初始化
  /// </summary>
  public sealed partial class ArenaInit : pb::IMessage<ArenaInit> {
    private static readonly pb::MessageParser<ArenaInit> _parser = new pb::MessageParser<ArenaInit>(() => new ArenaInit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArenaInit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.BattleReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaInit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaInit(ArenaInit other) : this() {
      members_ = other.members_.Clone();
      self_ = other.self_ != null ? other.self_.Clone() : null;
      time_ = other.time_;
      hasNewMsg_ = other.hasNewMsg_;
      surplusTimes_ = other.surplusTimes_;
      honor_ = other.honor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaInit Clone() {
      return new ArenaInit(this);
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.ArenaMember> _repeated_members_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.ArenaMember.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.ArenaMember> members_ = new pbc::RepeatedField<global::Centersdk.Protobuf.ArenaMember>();
    /// <summary>
    /// 排名信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.ArenaMember> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "self" field.</summary>
    public const int SelfFieldNumber = 2;
    private global::Centersdk.Protobuf.ArenaMember self_;
    /// <summary>
    /// 自身信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Centersdk.Protobuf.ArenaMember Self {
      get { return self_; }
      set {
        self_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private long time_;
    /// <summary>
    /// 距离下赛季时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "hasNewMsg" field.</summary>
    public const int HasNewMsgFieldNumber = 4;
    private bool hasNewMsg_;
    /// <summary>
    /// 是否有新消息提示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNewMsg {
      get { return hasNewMsg_; }
      set {
        hasNewMsg_ = value;
      }
    }

    /// <summary>Field number for the "surplusTimes" field.</summary>
    public const int SurplusTimesFieldNumber = 5;
    private int surplusTimes_;
    /// <summary>
    /// 剩余挑战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SurplusTimes {
      get { return surplusTimes_; }
      set {
        surplusTimes_ = value;
      }
    }

    /// <summary>Field number for the "honor" field.</summary>
    public const int HonorFieldNumber = 6;
    private long honor_;
    /// <summary>
    /// 当前荣誉点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Honor {
      get { return honor_; }
      set {
        honor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArenaInit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArenaInit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!members_.Equals(other.members_)) return false;
      if (!object.Equals(Self, other.Self)) return false;
      if (Time != other.Time) return false;
      if (HasNewMsg != other.HasNewMsg) return false;
      if (SurplusTimes != other.SurplusTimes) return false;
      if (Honor != other.Honor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= members_.GetHashCode();
      if (self_ != null) hash ^= Self.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (HasNewMsg != false) hash ^= HasNewMsg.GetHashCode();
      if (SurplusTimes != 0) hash ^= SurplusTimes.GetHashCode();
      if (Honor != 0L) hash ^= Honor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      members_.WriteTo(output, _repeated_members_codec);
      if (self_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Self);
      }
      if (Time != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Time);
      }
      if (HasNewMsg != false) {
        output.WriteRawTag(32);
        output.WriteBool(HasNewMsg);
      }
      if (SurplusTimes != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SurplusTimes);
      }
      if (Honor != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Honor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += members_.CalculateSize(_repeated_members_codec);
      if (self_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Self);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (HasNewMsg != false) {
        size += 1 + 1;
      }
      if (SurplusTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SurplusTimes);
      }
      if (Honor != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Honor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArenaInit other) {
      if (other == null) {
        return;
      }
      members_.Add(other.members_);
      if (other.self_ != null) {
        if (self_ == null) {
          self_ = new global::Centersdk.Protobuf.ArenaMember();
        }
        Self.MergeFrom(other.Self);
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.HasNewMsg != false) {
        HasNewMsg = other.HasNewMsg;
      }
      if (other.SurplusTimes != 0) {
        SurplusTimes = other.SurplusTimes;
      }
      if (other.Honor != 0L) {
        Honor = other.Honor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 18: {
            if (self_ == null) {
              self_ = new global::Centersdk.Protobuf.ArenaMember();
            }
            input.ReadMessage(self_);
            break;
          }
          case 24: {
            Time = input.ReadInt64();
            break;
          }
          case 32: {
            HasNewMsg = input.ReadBool();
            break;
          }
          case 40: {
            SurplusTimes = input.ReadInt32();
            break;
          }
          case 48: {
            Honor = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 竞技场挑战
  /// </summary>
  public sealed partial class ArenaChallenge : pb::IMessage<ArenaChallenge> {
    private static readonly pb::MessageParser<ArenaChallenge> _parser = new pb::MessageParser<ArenaChallenge>(() => new ArenaChallenge());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArenaChallenge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.BattleReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaChallenge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaChallenge(ArenaChallenge other) : this() {
      members_ = other.members_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaChallenge Clone() {
      return new ArenaChallenge(this);
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.ArenaMember> _repeated_members_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.ArenaMember.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.ArenaMember> members_ = new pbc::RepeatedField<global::Centersdk.Protobuf.ArenaMember>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.ArenaMember> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArenaChallenge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArenaChallenge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!members_.Equals(other.members_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= members_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      members_.WriteTo(output, _repeated_members_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += members_.CalculateSize(_repeated_members_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArenaChallenge other) {
      if (other == null) {
        return;
      }
      members_.Add(other.members_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 竞技场成员信息
  /// </summary>
  public sealed partial class ArenaMember : pb::IMessage<ArenaMember> {
    private static readonly pb::MessageParser<ArenaMember> _parser = new pb::MessageParser<ArenaMember>(() => new ArenaMember());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArenaMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.BattleReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaMember(ArenaMember other) : this() {
      userId_ = other.userId_;
      name_ = other.name_;
      rank_ = other.rank_;
      level_ = other.level_;
      power_ = other.power_;
      score_ = other.score_;
      headImgId_ = other.headImgId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaMember Clone() {
      return new ArenaMember(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 3;
    private int rank_;
    /// <summary>
    /// 排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 5;
    private int power_;
    /// <summary>
    /// 战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 6;
    private int score_;
    /// <summary>
    /// 积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "headImgId" field.</summary>
    public const int HeadImgIdFieldNumber = 7;
    private int headImgId_;
    /// <summary>
    /// 头像ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadImgId {
      get { return headImgId_; }
      set {
        headImgId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArenaMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArenaMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Name != other.Name) return false;
      if (Rank != other.Rank) return false;
      if (Level != other.Level) return false;
      if (Power != other.Power) return false;
      if (Score != other.Score) return false;
      if (HeadImgId != other.HeadImgId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (HeadImgId != 0) hash ^= HeadImgId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Rank != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rank);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (Power != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Power);
      }
      if (Score != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Score);
      }
      if (HeadImgId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HeadImgId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (HeadImgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadImgId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArenaMember other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.HeadImgId != 0) {
        HeadImgId = other.HeadImgId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Rank = input.ReadInt32();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            Power = input.ReadInt32();
            break;
          }
          case 48: {
            Score = input.ReadInt32();
            break;
          }
          case 56: {
            HeadImgId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ArenaRecords : pb::IMessage<ArenaRecords> {
    private static readonly pb::MessageParser<ArenaRecords> _parser = new pb::MessageParser<ArenaRecords>(() => new ArenaRecords());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArenaRecords> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.BattleReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaRecords() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaRecords(ArenaRecords other) : this() {
      records_ = other.records_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaRecords Clone() {
      return new ArenaRecords(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.ArenaRecord> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.ArenaRecord.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.ArenaRecord> records_ = new pbc::RepeatedField<global::Centersdk.Protobuf.ArenaRecord>();
    /// <summary>
    /// 战报
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.ArenaRecord> Records {
      get { return records_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArenaRecords);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArenaRecords other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!records_.Equals(other.records_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= records_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      records_.WriteTo(output, _repeated_records_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_repeated_records_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArenaRecords other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 竞技场对战记录
  /// </summary>
  public sealed partial class ArenaRecord : pb::IMessage<ArenaRecord> {
    private static readonly pb::MessageParser<ArenaRecord> _parser = new pb::MessageParser<ArenaRecord>(() => new ArenaRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArenaRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.BattleReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaRecord(ArenaRecord other) : this() {
      name_ = other.name_;
      userId_ = other.userId_;
      level_ = other.level_;
      score_ = other.score_;
      time_ = other.time_;
      headImgId_ = other.headImgId_;
      isWin_ = other.isWin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaRecord Clone() {
      return new ArenaRecord(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    /// 用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 4;
    private int score_;
    /// <summary>
    /// 积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 5;
    private long time_;
    /// <summary>
    /// 记录时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "headImgId" field.</summary>
    public const int HeadImgIdFieldNumber = 6;
    private int headImgId_;
    /// <summary>
    /// 头像ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadImgId {
      get { return headImgId_; }
      set {
        headImgId_ = value;
      }
    }

    /// <summary>Field number for the "isWin" field.</summary>
    public const int IsWinFieldNumber = 7;
    private bool isWin_;
    /// <summary>
    /// 获胜状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWin {
      get { return isWin_; }
      set {
        isWin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArenaRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArenaRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (UserId != other.UserId) return false;
      if (Level != other.Level) return false;
      if (Score != other.Score) return false;
      if (Time != other.Time) return false;
      if (HeadImgId != other.HeadImgId) return false;
      if (IsWin != other.IsWin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (HeadImgId != 0) hash ^= HeadImgId.GetHashCode();
      if (IsWin != false) hash ^= IsWin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Score != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Score);
      }
      if (Time != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Time);
      }
      if (HeadImgId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HeadImgId);
      }
      if (IsWin != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (HeadImgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadImgId);
      }
      if (IsWin != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArenaRecord other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.HeadImgId != 0) {
        HeadImgId = other.HeadImgId;
      }
      if (other.IsWin != false) {
        IsWin = other.IsWin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Score = input.ReadInt32();
            break;
          }
          case 40: {
            Time = input.ReadInt64();
            break;
          }
          case 48: {
            HeadImgId = input.ReadInt32();
            break;
          }
          case 56: {
            IsWin = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 竞技场结果
  /// </summary>
  public sealed partial class ArenaResult : pb::IMessage<ArenaResult> {
    private static readonly pb::MessageParser<ArenaResult> _parser = new pb::MessageParser<ArenaResult>(() => new ArenaResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArenaResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.BattleReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaResult(ArenaResult other) : this() {
      rewards_ = other.rewards_.Clone();
      selfInfo_ = other.selfInfo_ != null ? other.selfInfo_.Clone() : null;
      opponentInfo_ = other.opponentInfo_ != null ? other.opponentInfo_.Clone() : null;
      isWin_ = other.isWin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaResult Clone() {
      return new ArenaResult(this);
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.Reward> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.Reward.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.Reward> rewards_ = new pbc::RepeatedField<global::Centersdk.Protobuf.Reward>();
    /// <summary>
    /// 奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.Reward> Rewards {
      get { return rewards_; }
    }

    /// <summary>Field number for the "selfInfo" field.</summary>
    public const int SelfInfoFieldNumber = 2;
    private global::Centersdk.Protobuf.ArenaMember selfInfo_;
    /// <summary>
    /// 自己信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Centersdk.Protobuf.ArenaMember SelfInfo {
      get { return selfInfo_; }
      set {
        selfInfo_ = value;
      }
    }

    /// <summary>Field number for the "opponentInfo" field.</summary>
    public const int OpponentInfoFieldNumber = 3;
    private global::Centersdk.Protobuf.ArenaMember opponentInfo_;
    /// <summary>
    /// 对手信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Centersdk.Protobuf.ArenaMember OpponentInfo {
      get { return opponentInfo_; }
      set {
        opponentInfo_ = value;
      }
    }

    /// <summary>Field number for the "isWin" field.</summary>
    public const int IsWinFieldNumber = 4;
    private bool isWin_;
    /// <summary>
    /// 是否获胜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWin {
      get { return isWin_; }
      set {
        isWin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArenaResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArenaResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rewards_.Equals(other.rewards_)) return false;
      if (!object.Equals(SelfInfo, other.SelfInfo)) return false;
      if (!object.Equals(OpponentInfo, other.OpponentInfo)) return false;
      if (IsWin != other.IsWin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rewards_.GetHashCode();
      if (selfInfo_ != null) hash ^= SelfInfo.GetHashCode();
      if (opponentInfo_ != null) hash ^= OpponentInfo.GetHashCode();
      if (IsWin != false) hash ^= IsWin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (selfInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SelfInfo);
      }
      if (opponentInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OpponentInfo);
      }
      if (IsWin != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (selfInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfInfo);
      }
      if (opponentInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OpponentInfo);
      }
      if (IsWin != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArenaResult other) {
      if (other == null) {
        return;
      }
      rewards_.Add(other.rewards_);
      if (other.selfInfo_ != null) {
        if (selfInfo_ == null) {
          selfInfo_ = new global::Centersdk.Protobuf.ArenaMember();
        }
        SelfInfo.MergeFrom(other.SelfInfo);
      }
      if (other.opponentInfo_ != null) {
        if (opponentInfo_ == null) {
          opponentInfo_ = new global::Centersdk.Protobuf.ArenaMember();
        }
        OpponentInfo.MergeFrom(other.OpponentInfo);
      }
      if (other.IsWin != false) {
        IsWin = other.IsWin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
          case 18: {
            if (selfInfo_ == null) {
              selfInfo_ = new global::Centersdk.Protobuf.ArenaMember();
            }
            input.ReadMessage(selfInfo_);
            break;
          }
          case 26: {
            if (opponentInfo_ == null) {
              opponentInfo_ = new global::Centersdk.Protobuf.ArenaMember();
            }
            input.ReadMessage(opponentInfo_);
            break;
          }
          case 32: {
            IsWin = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
