// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: guild.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Centersdk.Protobuf {

  /// <summary>Holder for reflection information generated from guild.proto</summary>
  public static partial class GuildReflection {

    #region Descriptor
    /// <summary>File descriptor for guild.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GuildReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtndWlsZC5wcm90bxISY2VudGVyc2RrLnByb3RvYnVmIjcKCkd1aWxkQXJy",
            "YXkSKQoGZ3VpbGRzGAEgAygLMhkuY2VudGVyc2RrLnByb3RvYnVmLkd1aWxk",
            "IpoBCgVHdWlsZBIKCgJpZBgBIAEoBRIMCgRuYW1lGAIgASgJEg0KBWxldmVs",
            "GAMgASgFEg8KB21lbWJlcnMYBCABKAUSEAoIbGVhZGVySWQYBSABKAMSEgoK",
            "bGVhZGVyTmFtZRgGIAEoCRITCgtkZWNsYXJhdGlvbhgHIAEoCRIOCgZiYW5u",
            "ZXIYCCABKAkSDAoEZ29sZBgJIAEoAyJoCgtHdWlsZERldGFpbBIoCgVndWls",
            "ZBgBIAEoCzIZLmNlbnRlcnNkay5wcm90b2J1Zi5HdWlsZBIvCgZtZW1iZXIY",
            "AiABKAsyHy5jZW50ZXJzZGsucHJvdG9idWYuR3VpbGRNZW1iZXIiUgoQR3Vp",
            "bGRNZW1iZXJBcnJheRIwCgdtZW1iZXJzGAEgAygLMh8uY2VudGVyc2RrLnBy",
            "b3RvYnVmLkd1aWxkTWVtYmVyEgwKBHR5cGUYAiABKAUikAEKC0d1aWxkTWVt",
            "YmVyEg4KBnJvbGVJZBgBIAEoAxIMCgRuYW1lGAIgASgJEhAKCHBvc2l0aW9u",
            "GAMgASgFEg0KBWxldmVsGAQgASgFEhEKCXdlZWtTY29yZRgFIAEoAxINCgVz",
            "Y29yZRgGIAEoAxIOCgZzdGF0dXMYByABKAUSEAoIam9pblRpbWUYCCABKAMi",
            "qQMKCFRlY2hJbmZvEhAKCGNhcmVlcklkGAEgASgFEhAKCGF0dGFja0x2GAIg",
            "ASgFEhEKCWRlZmVuc2VMdhgDIAEoBRIPCgdibG9vZEx2GAQgASgFEg8KB3Nr",
            "aWxsTHYYBSABKAUSFQoNYXR0YWNrU3BlZWRMdhgGIAEoBRITCgt3aXRoc3Rh",
            "bmRMdhgHIAEoBRIOCgZjcml0THYYCCABKAUSFAoMY3JpdERhbWFnZUx2GAkg",
            "ASgFEhUKDWF0dGFja0x2TGltaXQYCiABKAUSFgoOZGVmZW5zZUx2TGltaXQY",
            "CyABKAUSFAoMYmxvb2RMdkxpbWl0GAwgASgFEhQKDHNraWxsTHZMaW1pdBgN",
            "IAEoBRIaChJhdHRhY2tTcGVlZEx2TGltaXQYDiABKAUSGAoQd2l0aHN0YW5k",
            "THZMaW1pdBgPIAEoBRITCgtjcml0THZMaW1pdBgQIAEoBRIZChFjcml0RGFt",
            "YWdlTHZMaW1pdBgRIAEoBRIPCgdsb2JieUx2GBIgASgFEg4KBnNob3BMdhgT",
            "IAEoBRIQCghtYW5hZ2VMdhgUIAEoBSJ4Cg5TaG9wSW5mb0RldGFpbBIrCgVp",
            "bmZvcxgBIAMoCzIcLmNlbnRlcnNkay5wcm90b2J1Zi5TaG9wSW5mbxITCgty",
            "ZWZyZXNoVGltZRgCIAEoAxIUCgxyZWZyZXNoU2NvcmUYAyABKAMSDgoGYnV5",
            "SWRzGAQgAygFIkQKCFNob3BJbmZvEgoKAmlkGAEgASgFEg4KBml0ZW1JZBgC",
            "IAEoBRINCgVjb3VudBgDIAEoBRINCgVwcmljZRgEIAEoBSKFAQoQR3VpbGRQ",
            "YXRyb2xBcnJheRIvCgdwYXRyb2xzGAEgAygLMh4uY2VudGVyc2RrLnByb3Rv",
            "YnVmLlBhdHJvbEluZm8SFwoPZGFpbHlDb3VudExpbWl0GAIgASgFEhEKCXVz",
            "ZXJDb3VudBgDIAEoBRIUCgxyZWZyZXNoU2NvcmUYBCABKAUipAEKClBhdHJv",
            "bEluZm8SCgoCaWQYASABKAUSDAoEbmFtZRgCIAEoCRIMCgRzdGFyGAMgASgF",
            "EgwKBHRpbWUYBCABKAUSDQoFc3RhdGUYBSABKAUSEgoKaXNTZW5kSGVscBgG",
            "IAEoCBIQCghsYXN0VGltZRgHIAEoBRIrCgRpdGVtGAggASgLMh0uY2VudGVy",
            "c2RrLnByb3RvYnVmLkNvdW50SW5mbyJdCg5HdWlsZENhcmRBcnJheRIsCgVj",
            "YXJkcxgBIAMoCzIdLmNlbnRlcnNkay5wcm90b2J1Zi5HdWlsZENhcmQSDAoE",
            "Y29kZRgCIAEoBRIPCgdjYXJkSWRzGAMgAygFIloKCUd1aWxkQ2FyZBIKCgJs",
            "dhgDIAEoBRIOCgZzdGFyTHYYBCABKAUSFgoOY2hhcmFjdGVyaXN0aWMYBSAB",
            "KAUSCwoDc2V4GAYgASgFEgwKBGNhbXAYByABKAUiJgoJQ291bnRJbmZvEgoK",
            "AmlkGAEgASgFEg0KBWNvdW50GAIgASgFImIKCUhlbHBBcnJheRIrCgVoZWxw",
            "cxgBIAMoCzIcLmNlbnRlcnNkay5wcm90b2J1Zi5IZWxwSW5mbxIWCg5kYWls",
            "eUhlbHBMaW1pdBgCIAEoBRIQCgh1c2VySGVscBgDIAEoBSJaCghIZWxwSW5m",
            "bxIKCgJpZBgBIAEoBRIOCgZyb2xlSWQYAiABKAMSDAoEbmFtZRgDIAEoCRIR",
            "CgloZWxwTGltaXQYBCABKAUSEQoJaGVscENvdW50GAUgASgFInEKCkRvbmF0",
            "ZUluZm8SDgoGaXRlbUlkGAEgASgFEg0KBWNvdW50GAIgASgFEg0KBXNjb3Jl",
            "GAMgASgFEgwKBGdvbGQYBCABKAUSEwoLZG9uYXRlQ291bnQYBSABKAUSEgoK",
            "ZGFpbHlMaW1pdBgGIAEoBUIrCh1jb20uaG9vbGFpLmNlbnRlcnNkay5wcm90",
            "b2J1ZkIKR3VpbGRQcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.GuildArray), global::Centersdk.Protobuf.GuildArray.Parser, new[]{ "Guilds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.Guild), global::Centersdk.Protobuf.Guild.Parser, new[]{ "Id", "Name", "Level", "Members", "LeaderId", "LeaderName", "Declaration", "Banner", "Gold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.GuildDetail), global::Centersdk.Protobuf.GuildDetail.Parser, new[]{ "Guild", "Member" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.GuildMemberArray), global::Centersdk.Protobuf.GuildMemberArray.Parser, new[]{ "Members", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.GuildMember), global::Centersdk.Protobuf.GuildMember.Parser, new[]{ "RoleId", "Name", "Position", "Level", "WeekScore", "Score", "Status", "JoinTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.TechInfo), global::Centersdk.Protobuf.TechInfo.Parser, new[]{ "CareerId", "AttackLv", "DefenseLv", "BloodLv", "SkillLv", "AttackSpeedLv", "WithstandLv", "CritLv", "CritDamageLv", "AttackLvLimit", "DefenseLvLimit", "BloodLvLimit", "SkillLvLimit", "AttackSpeedLvLimit", "WithstandLvLimit", "CritLvLimit", "CritDamageLvLimit", "LobbyLv", "ShopLv", "ManageLv" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.ShopInfoDetail), global::Centersdk.Protobuf.ShopInfoDetail.Parser, new[]{ "Infos", "RefreshTime", "RefreshScore", "BuyIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.ShopInfo), global::Centersdk.Protobuf.ShopInfo.Parser, new[]{ "Id", "ItemId", "Count", "Price" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.GuildPatrolArray), global::Centersdk.Protobuf.GuildPatrolArray.Parser, new[]{ "Patrols", "DailyCountLimit", "UserCount", "RefreshScore" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.PatrolInfo), global::Centersdk.Protobuf.PatrolInfo.Parser, new[]{ "Id", "Name", "Star", "Time", "State", "IsSendHelp", "LastTime", "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.GuildCardArray), global::Centersdk.Protobuf.GuildCardArray.Parser, new[]{ "Cards", "Code", "CardIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.GuildCard), global::Centersdk.Protobuf.GuildCard.Parser, new[]{ "Lv", "StarLv", "Characteristic", "Sex", "Camp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.CountInfo), global::Centersdk.Protobuf.CountInfo.Parser, new[]{ "Id", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.HelpArray), global::Centersdk.Protobuf.HelpArray.Parser, new[]{ "Helps", "DailyHelpLimit", "UserHelp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.HelpInfo), global::Centersdk.Protobuf.HelpInfo.Parser, new[]{ "Id", "RoleId", "Name", "HelpLimit", "HelpCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.DonateInfo), global::Centersdk.Protobuf.DonateInfo.Parser, new[]{ "ItemId", "Count", "Score", "Gold", "DonateCount", "DailyLimit" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///公会列表
  /// </summary>
  public sealed partial class GuildArray : pb::IMessage<GuildArray> {
    private static readonly pb::MessageParser<GuildArray> _parser = new pb::MessageParser<GuildArray>(() => new GuildArray());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildArray> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.GuildReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildArray() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildArray(GuildArray other) : this() {
      guilds_ = other.guilds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildArray Clone() {
      return new GuildArray(this);
    }

    /// <summary>Field number for the "guilds" field.</summary>
    public const int GuildsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.Guild> _repeated_guilds_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.Guild.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.Guild> guilds_ = new pbc::RepeatedField<global::Centersdk.Protobuf.Guild>();
    /// <summary>
    ///公会列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.Guild> Guilds {
      get { return guilds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildArray);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildArray other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!guilds_.Equals(other.guilds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= guilds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      guilds_.WriteTo(output, _repeated_guilds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += guilds_.CalculateSize(_repeated_guilds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildArray other) {
      if (other == null) {
        return;
      }
      guilds_.Add(other.guilds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            guilds_.AddEntriesFrom(input, _repeated_guilds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公会信息
  /// </summary>
  public sealed partial class Guild : pb::IMessage<Guild> {
    private static readonly pb::MessageParser<Guild> _parser = new pb::MessageParser<Guild>(() => new Guild());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Guild> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.GuildReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Guild() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Guild(Guild other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      level_ = other.level_;
      members_ = other.members_;
      leaderId_ = other.leaderId_;
      leaderName_ = other.leaderName_;
      declaration_ = other.declaration_;
      banner_ = other.banner_;
      gold_ = other.gold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Guild Clone() {
      return new Guild(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 4;
    private int members_;
    /// <summary>
    ///成员数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Members {
      get { return members_; }
      set {
        members_ = value;
      }
    }

    /// <summary>Field number for the "leaderId" field.</summary>
    public const int LeaderIdFieldNumber = 5;
    private long leaderId_;
    /// <summary>
    ///会长ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LeaderId {
      get { return leaderId_; }
      set {
        leaderId_ = value;
      }
    }

    /// <summary>Field number for the "leaderName" field.</summary>
    public const int LeaderNameFieldNumber = 6;
    private string leaderName_ = "";
    /// <summary>
    ///会长名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeaderName {
      get { return leaderName_; }
      set {
        leaderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "declaration" field.</summary>
    public const int DeclarationFieldNumber = 7;
    private string declaration_ = "";
    /// <summary>
    ///宣言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Declaration {
      get { return declaration_; }
      set {
        declaration_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "banner" field.</summary>
    public const int BannerFieldNumber = 8;
    private string banner_ = "";
    /// <summary>
    ///旗帜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Banner {
      get { return banner_; }
      set {
        banner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 9;
    private long gold_;
    /// <summary>
    ///资金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Guild);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Guild other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (Members != other.Members) return false;
      if (LeaderId != other.LeaderId) return false;
      if (LeaderName != other.LeaderName) return false;
      if (Declaration != other.Declaration) return false;
      if (Banner != other.Banner) return false;
      if (Gold != other.Gold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Members != 0) hash ^= Members.GetHashCode();
      if (LeaderId != 0L) hash ^= LeaderId.GetHashCode();
      if (LeaderName.Length != 0) hash ^= LeaderName.GetHashCode();
      if (Declaration.Length != 0) hash ^= Declaration.GetHashCode();
      if (Banner.Length != 0) hash ^= Banner.GetHashCode();
      if (Gold != 0L) hash ^= Gold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Members != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Members);
      }
      if (LeaderId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LeaderId);
      }
      if (LeaderName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LeaderName);
      }
      if (Declaration.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Declaration);
      }
      if (Banner.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Banner);
      }
      if (Gold != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Gold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Members != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Members);
      }
      if (LeaderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeaderId);
      }
      if (LeaderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeaderName);
      }
      if (Declaration.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Declaration);
      }
      if (Banner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Banner);
      }
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Guild other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Members != 0) {
        Members = other.Members;
      }
      if (other.LeaderId != 0L) {
        LeaderId = other.LeaderId;
      }
      if (other.LeaderName.Length != 0) {
        LeaderName = other.LeaderName;
      }
      if (other.Declaration.Length != 0) {
        Declaration = other.Declaration;
      }
      if (other.Banner.Length != 0) {
        Banner = other.Banner;
      }
      if (other.Gold != 0L) {
        Gold = other.Gold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Members = input.ReadInt32();
            break;
          }
          case 40: {
            LeaderId = input.ReadInt64();
            break;
          }
          case 50: {
            LeaderName = input.ReadString();
            break;
          }
          case 58: {
            Declaration = input.ReadString();
            break;
          }
          case 66: {
            Banner = input.ReadString();
            break;
          }
          case 72: {
            Gold = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公会详细信息
  /// </summary>
  public sealed partial class GuildDetail : pb::IMessage<GuildDetail> {
    private static readonly pb::MessageParser<GuildDetail> _parser = new pb::MessageParser<GuildDetail>(() => new GuildDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.GuildReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildDetail(GuildDetail other) : this() {
      guild_ = other.guild_ != null ? other.guild_.Clone() : null;
      member_ = other.member_ != null ? other.member_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildDetail Clone() {
      return new GuildDetail(this);
    }

    /// <summary>Field number for the "guild" field.</summary>
    public const int GuildFieldNumber = 1;
    private global::Centersdk.Protobuf.Guild guild_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Centersdk.Protobuf.Guild Guild {
      get { return guild_; }
      set {
        guild_ = value;
      }
    }

    /// <summary>Field number for the "member" field.</summary>
    public const int MemberFieldNumber = 2;
    private global::Centersdk.Protobuf.GuildMember member_;
    /// <summary>
    ///请求查看此公会的当前用户的会员信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Centersdk.Protobuf.GuildMember Member {
      get { return member_; }
      set {
        member_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Guild, other.Guild)) return false;
      if (!object.Equals(Member, other.Member)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (guild_ != null) hash ^= Guild.GetHashCode();
      if (member_ != null) hash ^= Member.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (guild_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Guild);
      }
      if (member_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Member);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (guild_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Guild);
      }
      if (member_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Member);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildDetail other) {
      if (other == null) {
        return;
      }
      if (other.guild_ != null) {
        if (guild_ == null) {
          guild_ = new global::Centersdk.Protobuf.Guild();
        }
        Guild.MergeFrom(other.Guild);
      }
      if (other.member_ != null) {
        if (member_ == null) {
          member_ = new global::Centersdk.Protobuf.GuildMember();
        }
        Member.MergeFrom(other.Member);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (guild_ == null) {
              guild_ = new global::Centersdk.Protobuf.Guild();
            }
            input.ReadMessage(guild_);
            break;
          }
          case 18: {
            if (member_ == null) {
              member_ = new global::Centersdk.Protobuf.GuildMember();
            }
            input.ReadMessage(member_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///会员列表
  /// </summary>
  public sealed partial class GuildMemberArray : pb::IMessage<GuildMemberArray> {
    private static readonly pb::MessageParser<GuildMemberArray> _parser = new pb::MessageParser<GuildMemberArray>(() => new GuildMemberArray());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildMemberArray> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.GuildReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildMemberArray() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildMemberArray(GuildMemberArray other) : this() {
      members_ = other.members_.Clone();
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildMemberArray Clone() {
      return new GuildMemberArray(this);
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.GuildMember> _repeated_members_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.GuildMember.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.GuildMember> members_ = new pbc::RepeatedField<global::Centersdk.Protobuf.GuildMember>();
    /// <summary>
    ///会员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.GuildMember> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///会员列表类型。1为申请加入列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildMemberArray);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildMemberArray other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!members_.Equals(other.members_)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= members_.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      members_.WriteTo(output, _repeated_members_codec);
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += members_.CalculateSize(_repeated_members_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildMemberArray other) {
      if (other == null) {
        return;
      }
      members_.Add(other.members_);
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///会员信息
  /// </summary>
  public sealed partial class GuildMember : pb::IMessage<GuildMember> {
    private static readonly pb::MessageParser<GuildMember> _parser = new pb::MessageParser<GuildMember>(() => new GuildMember());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.GuildReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildMember(GuildMember other) : this() {
      roleId_ = other.roleId_;
      name_ = other.name_;
      position_ = other.position_;
      level_ = other.level_;
      weekScore_ = other.weekScore_;
      score_ = other.score_;
      status_ = other.status_;
      joinTime_ = other.joinTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildMember Clone() {
      return new GuildMember(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private long roleId_;
    /// <summary>
    ///会员ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///会员名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private int position_;
    /// <summary>
    ///职位。帮主、副帮主等等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "weekScore" field.</summary>
    public const int WeekScoreFieldNumber = 5;
    private long weekScore_;
    /// <summary>
    ///周贡献
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WeekScore {
      get { return weekScore_; }
      set {
        weekScore_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 6;
    private long score_;
    /// <summary>
    ///总贡献
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 7;
    private int status_;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "joinTime" field.</summary>
    public const int JoinTimeFieldNumber = 8;
    private long joinTime_;
    /// <summary>
    ///加入时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long JoinTime {
      get { return joinTime_; }
      set {
        joinTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (Name != other.Name) return false;
      if (Position != other.Position) return false;
      if (Level != other.Level) return false;
      if (WeekScore != other.WeekScore) return false;
      if (Score != other.Score) return false;
      if (Status != other.Status) return false;
      if (JoinTime != other.JoinTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0L) hash ^= RoleId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (WeekScore != 0L) hash ^= WeekScore.GetHashCode();
      if (Score != 0L) hash ^= Score.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (JoinTime != 0L) hash ^= JoinTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Position != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Position);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (WeekScore != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(WeekScore);
      }
      if (Score != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Score);
      }
      if (Status != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Status);
      }
      if (JoinTime != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(JoinTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (WeekScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WeekScore);
      }
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (JoinTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(JoinTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildMember other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0L) {
        RoleId = other.RoleId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.WeekScore != 0L) {
        WeekScore = other.WeekScore;
      }
      if (other.Score != 0L) {
        Score = other.Score;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.JoinTime != 0L) {
        JoinTime = other.JoinTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Position = input.ReadInt32();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            WeekScore = input.ReadInt64();
            break;
          }
          case 48: {
            Score = input.ReadInt64();
            break;
          }
          case 56: {
            Status = input.ReadInt32();
            break;
          }
          case 64: {
            JoinTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///科技信息
  /// </summary>
  public sealed partial class TechInfo : pb::IMessage<TechInfo> {
    private static readonly pb::MessageParser<TechInfo> _parser = new pb::MessageParser<TechInfo>(() => new TechInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TechInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.GuildReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TechInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TechInfo(TechInfo other) : this() {
      careerId_ = other.careerId_;
      attackLv_ = other.attackLv_;
      defenseLv_ = other.defenseLv_;
      bloodLv_ = other.bloodLv_;
      skillLv_ = other.skillLv_;
      attackSpeedLv_ = other.attackSpeedLv_;
      withstandLv_ = other.withstandLv_;
      critLv_ = other.critLv_;
      critDamageLv_ = other.critDamageLv_;
      attackLvLimit_ = other.attackLvLimit_;
      defenseLvLimit_ = other.defenseLvLimit_;
      bloodLvLimit_ = other.bloodLvLimit_;
      skillLvLimit_ = other.skillLvLimit_;
      attackSpeedLvLimit_ = other.attackSpeedLvLimit_;
      withstandLvLimit_ = other.withstandLvLimit_;
      critLvLimit_ = other.critLvLimit_;
      critDamageLvLimit_ = other.critDamageLvLimit_;
      lobbyLv_ = other.lobbyLv_;
      shopLv_ = other.shopLv_;
      manageLv_ = other.manageLv_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TechInfo Clone() {
      return new TechInfo(this);
    }

    /// <summary>Field number for the "careerId" field.</summary>
    public const int CareerIdFieldNumber = 1;
    private int careerId_;
    /// <summary>
    ///职业ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CareerId {
      get { return careerId_; }
      set {
        careerId_ = value;
      }
    }

    /// <summary>Field number for the "attackLv" field.</summary>
    public const int AttackLvFieldNumber = 2;
    private int attackLv_;
    /// <summary>
    ///用户技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackLv {
      get { return attackLv_; }
      set {
        attackLv_ = value;
      }
    }

    /// <summary>Field number for the "defenseLv" field.</summary>
    public const int DefenseLvFieldNumber = 3;
    private int defenseLv_;
    /// <summary>
    ///防御力等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefenseLv {
      get { return defenseLv_; }
      set {
        defenseLv_ = value;
      }
    }

    /// <summary>Field number for the "bloodLv" field.</summary>
    public const int BloodLvFieldNumber = 4;
    private int bloodLv_;
    /// <summary>
    ///血量等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BloodLv {
      get { return bloodLv_; }
      set {
        bloodLv_ = value;
      }
    }

    /// <summary>Field number for the "skillLv" field.</summary>
    public const int SkillLvFieldNumber = 5;
    private int skillLv_;
    /// <summary>
    ///技能伤害等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillLv {
      get { return skillLv_; }
      set {
        skillLv_ = value;
      }
    }

    /// <summary>Field number for the "attackSpeedLv" field.</summary>
    public const int AttackSpeedLvFieldNumber = 6;
    private int attackSpeedLv_;
    /// <summary>
    ///攻击速度等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackSpeedLv {
      get { return attackSpeedLv_; }
      set {
        attackSpeedLv_ = value;
      }
    }

    /// <summary>Field number for the "withstandLv" field.</summary>
    public const int WithstandLvFieldNumber = 7;
    private int withstandLv_;
    /// <summary>
    ///格挡等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WithstandLv {
      get { return withstandLv_; }
      set {
        withstandLv_ = value;
      }
    }

    /// <summary>Field number for the "critLv" field.</summary>
    public const int CritLvFieldNumber = 8;
    private int critLv_;
    /// <summary>
    ///暴击等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CritLv {
      get { return critLv_; }
      set {
        critLv_ = value;
      }
    }

    /// <summary>Field number for the "critDamageLv" field.</summary>
    public const int CritDamageLvFieldNumber = 9;
    private int critDamageLv_;
    /// <summary>
    ///暴击伤害等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CritDamageLv {
      get { return critDamageLv_; }
      set {
        critDamageLv_ = value;
      }
    }

    /// <summary>Field number for the "attackLvLimit" field.</summary>
    public const int AttackLvLimitFieldNumber = 10;
    private int attackLvLimit_;
    /// <summary>
    ///公会技能等级上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackLvLimit {
      get { return attackLvLimit_; }
      set {
        attackLvLimit_ = value;
      }
    }

    /// <summary>Field number for the "defenseLvLimit" field.</summary>
    public const int DefenseLvLimitFieldNumber = 11;
    private int defenseLvLimit_;
    /// <summary>
    ///防御力等级上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefenseLvLimit {
      get { return defenseLvLimit_; }
      set {
        defenseLvLimit_ = value;
      }
    }

    /// <summary>Field number for the "bloodLvLimit" field.</summary>
    public const int BloodLvLimitFieldNumber = 12;
    private int bloodLvLimit_;
    /// <summary>
    ///血量等级上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BloodLvLimit {
      get { return bloodLvLimit_; }
      set {
        bloodLvLimit_ = value;
      }
    }

    /// <summary>Field number for the "skillLvLimit" field.</summary>
    public const int SkillLvLimitFieldNumber = 13;
    private int skillLvLimit_;
    /// <summary>
    ///技能伤害等级上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillLvLimit {
      get { return skillLvLimit_; }
      set {
        skillLvLimit_ = value;
      }
    }

    /// <summary>Field number for the "attackSpeedLvLimit" field.</summary>
    public const int AttackSpeedLvLimitFieldNumber = 14;
    private int attackSpeedLvLimit_;
    /// <summary>
    ///攻击速度等级上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackSpeedLvLimit {
      get { return attackSpeedLvLimit_; }
      set {
        attackSpeedLvLimit_ = value;
      }
    }

    /// <summary>Field number for the "withstandLvLimit" field.</summary>
    public const int WithstandLvLimitFieldNumber = 15;
    private int withstandLvLimit_;
    /// <summary>
    ///格挡等级上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WithstandLvLimit {
      get { return withstandLvLimit_; }
      set {
        withstandLvLimit_ = value;
      }
    }

    /// <summary>Field number for the "critLvLimit" field.</summary>
    public const int CritLvLimitFieldNumber = 16;
    private int critLvLimit_;
    /// <summary>
    ///暴击等级上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CritLvLimit {
      get { return critLvLimit_; }
      set {
        critLvLimit_ = value;
      }
    }

    /// <summary>Field number for the "critDamageLvLimit" field.</summary>
    public const int CritDamageLvLimitFieldNumber = 17;
    private int critDamageLvLimit_;
    /// <summary>
    ///暴击伤害等级上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CritDamageLvLimit {
      get { return critDamageLvLimit_; }
      set {
        critDamageLvLimit_ = value;
      }
    }

    /// <summary>Field number for the "lobbyLv" field.</summary>
    public const int LobbyLvFieldNumber = 18;
    private int lobbyLv_;
    /// <summary>
    ///建筑等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LobbyLv {
      get { return lobbyLv_; }
      set {
        lobbyLv_ = value;
      }
    }

    /// <summary>Field number for the "shopLv" field.</summary>
    public const int ShopLvFieldNumber = 19;
    private int shopLv_;
    /// <summary>
    ///商店等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopLv {
      get { return shopLv_; }
      set {
        shopLv_ = value;
      }
    }

    /// <summary>Field number for the "manageLv" field.</summary>
    public const int ManageLvFieldNumber = 20;
    private int manageLv_;
    /// <summary>
    ///管理等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ManageLv {
      get { return manageLv_; }
      set {
        manageLv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TechInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TechInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CareerId != other.CareerId) return false;
      if (AttackLv != other.AttackLv) return false;
      if (DefenseLv != other.DefenseLv) return false;
      if (BloodLv != other.BloodLv) return false;
      if (SkillLv != other.SkillLv) return false;
      if (AttackSpeedLv != other.AttackSpeedLv) return false;
      if (WithstandLv != other.WithstandLv) return false;
      if (CritLv != other.CritLv) return false;
      if (CritDamageLv != other.CritDamageLv) return false;
      if (AttackLvLimit != other.AttackLvLimit) return false;
      if (DefenseLvLimit != other.DefenseLvLimit) return false;
      if (BloodLvLimit != other.BloodLvLimit) return false;
      if (SkillLvLimit != other.SkillLvLimit) return false;
      if (AttackSpeedLvLimit != other.AttackSpeedLvLimit) return false;
      if (WithstandLvLimit != other.WithstandLvLimit) return false;
      if (CritLvLimit != other.CritLvLimit) return false;
      if (CritDamageLvLimit != other.CritDamageLvLimit) return false;
      if (LobbyLv != other.LobbyLv) return false;
      if (ShopLv != other.ShopLv) return false;
      if (ManageLv != other.ManageLv) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CareerId != 0) hash ^= CareerId.GetHashCode();
      if (AttackLv != 0) hash ^= AttackLv.GetHashCode();
      if (DefenseLv != 0) hash ^= DefenseLv.GetHashCode();
      if (BloodLv != 0) hash ^= BloodLv.GetHashCode();
      if (SkillLv != 0) hash ^= SkillLv.GetHashCode();
      if (AttackSpeedLv != 0) hash ^= AttackSpeedLv.GetHashCode();
      if (WithstandLv != 0) hash ^= WithstandLv.GetHashCode();
      if (CritLv != 0) hash ^= CritLv.GetHashCode();
      if (CritDamageLv != 0) hash ^= CritDamageLv.GetHashCode();
      if (AttackLvLimit != 0) hash ^= AttackLvLimit.GetHashCode();
      if (DefenseLvLimit != 0) hash ^= DefenseLvLimit.GetHashCode();
      if (BloodLvLimit != 0) hash ^= BloodLvLimit.GetHashCode();
      if (SkillLvLimit != 0) hash ^= SkillLvLimit.GetHashCode();
      if (AttackSpeedLvLimit != 0) hash ^= AttackSpeedLvLimit.GetHashCode();
      if (WithstandLvLimit != 0) hash ^= WithstandLvLimit.GetHashCode();
      if (CritLvLimit != 0) hash ^= CritLvLimit.GetHashCode();
      if (CritDamageLvLimit != 0) hash ^= CritDamageLvLimit.GetHashCode();
      if (LobbyLv != 0) hash ^= LobbyLv.GetHashCode();
      if (ShopLv != 0) hash ^= ShopLv.GetHashCode();
      if (ManageLv != 0) hash ^= ManageLv.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CareerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CareerId);
      }
      if (AttackLv != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AttackLv);
      }
      if (DefenseLv != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DefenseLv);
      }
      if (BloodLv != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BloodLv);
      }
      if (SkillLv != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SkillLv);
      }
      if (AttackSpeedLv != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AttackSpeedLv);
      }
      if (WithstandLv != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(WithstandLv);
      }
      if (CritLv != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CritLv);
      }
      if (CritDamageLv != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CritDamageLv);
      }
      if (AttackLvLimit != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(AttackLvLimit);
      }
      if (DefenseLvLimit != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(DefenseLvLimit);
      }
      if (BloodLvLimit != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(BloodLvLimit);
      }
      if (SkillLvLimit != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(SkillLvLimit);
      }
      if (AttackSpeedLvLimit != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(AttackSpeedLvLimit);
      }
      if (WithstandLvLimit != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(WithstandLvLimit);
      }
      if (CritLvLimit != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(CritLvLimit);
      }
      if (CritDamageLvLimit != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(CritDamageLvLimit);
      }
      if (LobbyLv != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(LobbyLv);
      }
      if (ShopLv != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(ShopLv);
      }
      if (ManageLv != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(ManageLv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CareerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CareerId);
      }
      if (AttackLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackLv);
      }
      if (DefenseLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefenseLv);
      }
      if (BloodLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BloodLv);
      }
      if (SkillLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillLv);
      }
      if (AttackSpeedLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackSpeedLv);
      }
      if (WithstandLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WithstandLv);
      }
      if (CritLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CritLv);
      }
      if (CritDamageLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CritDamageLv);
      }
      if (AttackLvLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackLvLimit);
      }
      if (DefenseLvLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefenseLvLimit);
      }
      if (BloodLvLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BloodLvLimit);
      }
      if (SkillLvLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillLvLimit);
      }
      if (AttackSpeedLvLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackSpeedLvLimit);
      }
      if (WithstandLvLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WithstandLvLimit);
      }
      if (CritLvLimit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CritLvLimit);
      }
      if (CritDamageLvLimit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CritDamageLvLimit);
      }
      if (LobbyLv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LobbyLv);
      }
      if (ShopLv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShopLv);
      }
      if (ManageLv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ManageLv);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TechInfo other) {
      if (other == null) {
        return;
      }
      if (other.CareerId != 0) {
        CareerId = other.CareerId;
      }
      if (other.AttackLv != 0) {
        AttackLv = other.AttackLv;
      }
      if (other.DefenseLv != 0) {
        DefenseLv = other.DefenseLv;
      }
      if (other.BloodLv != 0) {
        BloodLv = other.BloodLv;
      }
      if (other.SkillLv != 0) {
        SkillLv = other.SkillLv;
      }
      if (other.AttackSpeedLv != 0) {
        AttackSpeedLv = other.AttackSpeedLv;
      }
      if (other.WithstandLv != 0) {
        WithstandLv = other.WithstandLv;
      }
      if (other.CritLv != 0) {
        CritLv = other.CritLv;
      }
      if (other.CritDamageLv != 0) {
        CritDamageLv = other.CritDamageLv;
      }
      if (other.AttackLvLimit != 0) {
        AttackLvLimit = other.AttackLvLimit;
      }
      if (other.DefenseLvLimit != 0) {
        DefenseLvLimit = other.DefenseLvLimit;
      }
      if (other.BloodLvLimit != 0) {
        BloodLvLimit = other.BloodLvLimit;
      }
      if (other.SkillLvLimit != 0) {
        SkillLvLimit = other.SkillLvLimit;
      }
      if (other.AttackSpeedLvLimit != 0) {
        AttackSpeedLvLimit = other.AttackSpeedLvLimit;
      }
      if (other.WithstandLvLimit != 0) {
        WithstandLvLimit = other.WithstandLvLimit;
      }
      if (other.CritLvLimit != 0) {
        CritLvLimit = other.CritLvLimit;
      }
      if (other.CritDamageLvLimit != 0) {
        CritDamageLvLimit = other.CritDamageLvLimit;
      }
      if (other.LobbyLv != 0) {
        LobbyLv = other.LobbyLv;
      }
      if (other.ShopLv != 0) {
        ShopLv = other.ShopLv;
      }
      if (other.ManageLv != 0) {
        ManageLv = other.ManageLv;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CareerId = input.ReadInt32();
            break;
          }
          case 16: {
            AttackLv = input.ReadInt32();
            break;
          }
          case 24: {
            DefenseLv = input.ReadInt32();
            break;
          }
          case 32: {
            BloodLv = input.ReadInt32();
            break;
          }
          case 40: {
            SkillLv = input.ReadInt32();
            break;
          }
          case 48: {
            AttackSpeedLv = input.ReadInt32();
            break;
          }
          case 56: {
            WithstandLv = input.ReadInt32();
            break;
          }
          case 64: {
            CritLv = input.ReadInt32();
            break;
          }
          case 72: {
            CritDamageLv = input.ReadInt32();
            break;
          }
          case 80: {
            AttackLvLimit = input.ReadInt32();
            break;
          }
          case 88: {
            DefenseLvLimit = input.ReadInt32();
            break;
          }
          case 96: {
            BloodLvLimit = input.ReadInt32();
            break;
          }
          case 104: {
            SkillLvLimit = input.ReadInt32();
            break;
          }
          case 112: {
            AttackSpeedLvLimit = input.ReadInt32();
            break;
          }
          case 120: {
            WithstandLvLimit = input.ReadInt32();
            break;
          }
          case 128: {
            CritLvLimit = input.ReadInt32();
            break;
          }
          case 136: {
            CritDamageLvLimit = input.ReadInt32();
            break;
          }
          case 144: {
            LobbyLv = input.ReadInt32();
            break;
          }
          case 152: {
            ShopLv = input.ReadInt32();
            break;
          }
          case 160: {
            ManageLv = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公会商店信息详细列表
  /// </summary>
  public sealed partial class ShopInfoDetail : pb::IMessage<ShopInfoDetail> {
    private static readonly pb::MessageParser<ShopInfoDetail> _parser = new pb::MessageParser<ShopInfoDetail>(() => new ShopInfoDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopInfoDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.GuildReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopInfoDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopInfoDetail(ShopInfoDetail other) : this() {
      infos_ = other.infos_.Clone();
      refreshTime_ = other.refreshTime_;
      refreshScore_ = other.refreshScore_;
      buyIds_ = other.buyIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopInfoDetail Clone() {
      return new ShopInfoDetail(this);
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.ShopInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.ShopInfo.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.ShopInfo> infos_ = new pbc::RepeatedField<global::Centersdk.Protobuf.ShopInfo>();
    /// <summary>
    ///商店信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.ShopInfo> Infos {
      get { return infos_; }
    }

    /// <summary>Field number for the "refreshTime" field.</summary>
    public const int RefreshTimeFieldNumber = 2;
    private long refreshTime_;
    /// <summary>
    ///距离下次刷新的时间。单位：毫秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RefreshTime {
      get { return refreshTime_; }
      set {
        refreshTime_ = value;
      }
    }

    /// <summary>Field number for the "refreshScore" field.</summary>
    public const int RefreshScoreFieldNumber = 3;
    private long refreshScore_;
    /// <summary>
    ///会员主动刷新商店道具需要消耗的贡献值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RefreshScore {
      get { return refreshScore_; }
      set {
        refreshScore_ = value;
      }
    }

    /// <summary>Field number for the "buyIds" field.</summary>
    public const int BuyIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_buyIds_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> buyIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已经购买的ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BuyIds {
      get { return buyIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopInfoDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopInfoDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!infos_.Equals(other.infos_)) return false;
      if (RefreshTime != other.RefreshTime) return false;
      if (RefreshScore != other.RefreshScore) return false;
      if(!buyIds_.Equals(other.buyIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= infos_.GetHashCode();
      if (RefreshTime != 0L) hash ^= RefreshTime.GetHashCode();
      if (RefreshScore != 0L) hash ^= RefreshScore.GetHashCode();
      hash ^= buyIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _repeated_infos_codec);
      if (RefreshTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RefreshTime);
      }
      if (RefreshScore != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(RefreshScore);
      }
      buyIds_.WriteTo(output, _repeated_buyIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infos_.CalculateSize(_repeated_infos_codec);
      if (RefreshTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RefreshTime);
      }
      if (RefreshScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RefreshScore);
      }
      size += buyIds_.CalculateSize(_repeated_buyIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopInfoDetail other) {
      if (other == null) {
        return;
      }
      infos_.Add(other.infos_);
      if (other.RefreshTime != 0L) {
        RefreshTime = other.RefreshTime;
      }
      if (other.RefreshScore != 0L) {
        RefreshScore = other.RefreshScore;
      }
      buyIds_.Add(other.buyIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
          case 16: {
            RefreshTime = input.ReadInt64();
            break;
          }
          case 24: {
            RefreshScore = input.ReadInt64();
            break;
          }
          case 34:
          case 32: {
            buyIds_.AddEntriesFrom(input, _repeated_buyIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公会商店信息
  /// </summary>
  public sealed partial class ShopInfo : pb::IMessage<ShopInfo> {
    private static readonly pb::MessageParser<ShopInfo> _parser = new pb::MessageParser<ShopInfo>(() => new ShopInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.GuildReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopInfo(ShopInfo other) : this() {
      id_ = other.id_;
      itemId_ = other.itemId_;
      count_ = other.count_;
      price_ = other.price_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopInfo Clone() {
      return new ShopInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private int itemId_;
    /// <summary>
    ///道具ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private int price_;
    /// <summary>
    ///价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ItemId != other.ItemId) return false;
      if (Count != other.Count) return false;
      if (Price != other.Price) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemId);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (Price != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 32: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公会活动-巡逻任务
  /// </summary>
  public sealed partial class GuildPatrolArray : pb::IMessage<GuildPatrolArray> {
    private static readonly pb::MessageParser<GuildPatrolArray> _parser = new pb::MessageParser<GuildPatrolArray>(() => new GuildPatrolArray());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildPatrolArray> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.GuildReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildPatrolArray() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildPatrolArray(GuildPatrolArray other) : this() {
      patrols_ = other.patrols_.Clone();
      dailyCountLimit_ = other.dailyCountLimit_;
      userCount_ = other.userCount_;
      refreshScore_ = other.refreshScore_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildPatrolArray Clone() {
      return new GuildPatrolArray(this);
    }

    /// <summary>Field number for the "patrols" field.</summary>
    public const int PatrolsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.PatrolInfo> _repeated_patrols_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.PatrolInfo.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.PatrolInfo> patrols_ = new pbc::RepeatedField<global::Centersdk.Protobuf.PatrolInfo>();
    /// <summary>
    ///巡逻任务列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.PatrolInfo> Patrols {
      get { return patrols_; }
    }

    /// <summary>Field number for the "dailyCountLimit" field.</summary>
    public const int DailyCountLimitFieldNumber = 2;
    private int dailyCountLimit_;
    /// <summary>
    ///会员每天完成的任务数量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DailyCountLimit {
      get { return dailyCountLimit_; }
      set {
        dailyCountLimit_ = value;
      }
    }

    /// <summary>Field number for the "userCount" field.</summary>
    public const int UserCountFieldNumber = 3;
    private int userCount_;
    /// <summary>
    ///此会员当前完成的任务数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserCount {
      get { return userCount_; }
      set {
        userCount_ = value;
      }
    }

    /// <summary>Field number for the "refreshScore" field.</summary>
    public const int RefreshScoreFieldNumber = 4;
    private int refreshScore_;
    /// <summary>
    ///刷新需要消耗的奖励数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshScore {
      get { return refreshScore_; }
      set {
        refreshScore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildPatrolArray);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildPatrolArray other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!patrols_.Equals(other.patrols_)) return false;
      if (DailyCountLimit != other.DailyCountLimit) return false;
      if (UserCount != other.UserCount) return false;
      if (RefreshScore != other.RefreshScore) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= patrols_.GetHashCode();
      if (DailyCountLimit != 0) hash ^= DailyCountLimit.GetHashCode();
      if (UserCount != 0) hash ^= UserCount.GetHashCode();
      if (RefreshScore != 0) hash ^= RefreshScore.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      patrols_.WriteTo(output, _repeated_patrols_codec);
      if (DailyCountLimit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DailyCountLimit);
      }
      if (UserCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UserCount);
      }
      if (RefreshScore != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RefreshScore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += patrols_.CalculateSize(_repeated_patrols_codec);
      if (DailyCountLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DailyCountLimit);
      }
      if (UserCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserCount);
      }
      if (RefreshScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshScore);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildPatrolArray other) {
      if (other == null) {
        return;
      }
      patrols_.Add(other.patrols_);
      if (other.DailyCountLimit != 0) {
        DailyCountLimit = other.DailyCountLimit;
      }
      if (other.UserCount != 0) {
        UserCount = other.UserCount;
      }
      if (other.RefreshScore != 0) {
        RefreshScore = other.RefreshScore;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            patrols_.AddEntriesFrom(input, _repeated_patrols_codec);
            break;
          }
          case 16: {
            DailyCountLimit = input.ReadInt32();
            break;
          }
          case 24: {
            UserCount = input.ReadInt32();
            break;
          }
          case 32: {
            RefreshScore = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///巡逻任务信息
  /// </summary>
  public sealed partial class PatrolInfo : pb::IMessage<PatrolInfo> {
    private static readonly pb::MessageParser<PatrolInfo> _parser = new pb::MessageParser<PatrolInfo>(() => new PatrolInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PatrolInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.GuildReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatrolInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatrolInfo(PatrolInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      star_ = other.star_;
      time_ = other.time_;
      state_ = other.state_;
      isSendHelp_ = other.isSendHelp_;
      lastTime_ = other.lastTime_;
      item_ = other.item_ != null ? other.item_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatrolInfo Clone() {
      return new PatrolInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///巡逻唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///巡逻任务名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 3;
    private int star_;
    /// <summary>
    ///星级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private int time_;
    /// <summary>
    ///消耗时间，单位毫秒.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 5;
    private int state_;
    /// <summary>
    ///任务状态 0为未执行 1为执行中 2为已完成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "isSendHelp" field.</summary>
    public const int IsSendHelpFieldNumber = 6;
    private bool isSendHelp_;
    /// <summary>
    ///是否已经发送了互助申请。true为已发送
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSendHelp {
      get { return isSendHelp_; }
      set {
        isSendHelp_ = value;
      }
    }

    /// <summary>Field number for the "lastTime" field.</summary>
    public const int LastTimeFieldNumber = 7;
    private int lastTime_;
    /// <summary>
    ///任务剩余时间，单位毫秒.若剩余时间小于0。但任务状态为执行中。则可领取任务奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastTime {
      get { return lastTime_; }
      set {
        lastTime_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 8;
    private global::Centersdk.Protobuf.CountInfo item_;
    /// <summary>
    ///奖励道具或者奖励卡牌碎片。因为卡牌碎片也是一种道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Centersdk.Protobuf.CountInfo Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PatrolInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PatrolInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Star != other.Star) return false;
      if (Time != other.Time) return false;
      if (State != other.State) return false;
      if (IsSendHelp != other.IsSendHelp) return false;
      if (LastTime != other.LastTime) return false;
      if (!object.Equals(Item, other.Item)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Star != 0) hash ^= Star.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (IsSendHelp != false) hash ^= IsSendHelp.GetHashCode();
      if (LastTime != 0) hash ^= LastTime.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Star != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Star);
      }
      if (Time != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Time);
      }
      if (State != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(State);
      }
      if (IsSendHelp != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsSendHelp);
      }
      if (LastTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LastTime);
      }
      if (item_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Item);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Star);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (IsSendHelp != false) {
        size += 1 + 1;
      }
      if (LastTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastTime);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PatrolInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Star != 0) {
        Star = other.Star;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.IsSendHelp != false) {
        IsSendHelp = other.IsSendHelp;
      }
      if (other.LastTime != 0) {
        LastTime = other.LastTime;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          item_ = new global::Centersdk.Protobuf.CountInfo();
        }
        Item.MergeFrom(other.Item);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Star = input.ReadInt32();
            break;
          }
          case 32: {
            Time = input.ReadInt32();
            break;
          }
          case 40: {
            State = input.ReadInt32();
            break;
          }
          case 48: {
            IsSendHelp = input.ReadBool();
            break;
          }
          case 56: {
            LastTime = input.ReadInt32();
            break;
          }
          case 66: {
            if (item_ == null) {
              item_ = new global::Centersdk.Protobuf.CountInfo();
            }
            input.ReadMessage(item_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///卡牌列表
  /// </summary>
  public sealed partial class GuildCardArray : pb::IMessage<GuildCardArray> {
    private static readonly pb::MessageParser<GuildCardArray> _parser = new pb::MessageParser<GuildCardArray>(() => new GuildCardArray());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildCardArray> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.GuildReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildCardArray() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildCardArray(GuildCardArray other) : this() {
      cards_ = other.cards_.Clone();
      code_ = other.code_;
      cardIds_ = other.cardIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildCardArray Clone() {
      return new GuildCardArray(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.GuildCard> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.GuildCard.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.GuildCard> cards_ = new pbc::RepeatedField<global::Centersdk.Protobuf.GuildCard>();
    /// <summary>
    ///卡牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.GuildCard> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private int code_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "cardIds" field.</summary>
    public const int CardIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_cardIds_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> cardIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///所有已经派遣的任务中已经使用的卡牌ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CardIds {
      get { return cardIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildCardArray);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildCardArray other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      if (Code != other.Code) return false;
      if(!cardIds_.Equals(other.cardIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      hash ^= cardIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Code);
      }
      cardIds_.WriteTo(output, _repeated_cardIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      size += cardIds_.CalculateSize(_repeated_cardIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildCardArray other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      if (other.Code != 0) {
        Code = other.Code;
      }
      cardIds_.Add(other.cardIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 16: {
            Code = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GuildCard : pb::IMessage<GuildCard> {
    private static readonly pb::MessageParser<GuildCard> _parser = new pb::MessageParser<GuildCard>(() => new GuildCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.GuildReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildCard(GuildCard other) : this() {
      lv_ = other.lv_;
      starLv_ = other.starLv_;
      characteristic_ = other.characteristic_;
      sex_ = other.sex_;
      camp_ = other.camp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildCard Clone() {
      return new GuildCard(this);
    }

    /// <summary>Field number for the "lv" field.</summary>
    public const int LvFieldNumber = 3;
    private int lv_;
    /// <summary>
    ///卡牌等级。-1为无限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    /// <summary>Field number for the "starLv" field.</summary>
    public const int StarLvFieldNumber = 4;
    private int starLv_;
    /// <summary>
    ///卡牌星级。-1为无限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StarLv {
      get { return starLv_; }
      set {
        starLv_ = value;
      }
    }

    /// <summary>Field number for the "characteristic" field.</summary>
    public const int CharacteristicFieldNumber = 5;
    private int characteristic_;
    /// <summary>
    ///卡牌特性。-1为无限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Characteristic {
      get { return characteristic_; }
      set {
        characteristic_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 6;
    private int sex_;
    /// <summary>
    ///卡牌性别。-1为无限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "camp" field.</summary>
    public const int CampFieldNumber = 7;
    private int camp_;
    /// <summary>
    ///卡牌阵营。-1为无限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Lv != other.Lv) return false;
      if (StarLv != other.StarLv) return false;
      if (Characteristic != other.Characteristic) return false;
      if (Sex != other.Sex) return false;
      if (Camp != other.Camp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Lv != 0) hash ^= Lv.GetHashCode();
      if (StarLv != 0) hash ^= StarLv.GetHashCode();
      if (Characteristic != 0) hash ^= Characteristic.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (Camp != 0) hash ^= Camp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Lv != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Lv);
      }
      if (StarLv != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(StarLv);
      }
      if (Characteristic != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Characteristic);
      }
      if (Sex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Sex);
      }
      if (Camp != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Camp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Lv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
      }
      if (StarLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StarLv);
      }
      if (Characteristic != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Characteristic);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (Camp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Camp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildCard other) {
      if (other == null) {
        return;
      }
      if (other.Lv != 0) {
        Lv = other.Lv;
      }
      if (other.StarLv != 0) {
        StarLv = other.StarLv;
      }
      if (other.Characteristic != 0) {
        Characteristic = other.Characteristic;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.Camp != 0) {
        Camp = other.Camp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 24: {
            Lv = input.ReadInt32();
            break;
          }
          case 32: {
            StarLv = input.ReadInt32();
            break;
          }
          case 40: {
            Characteristic = input.ReadInt32();
            break;
          }
          case 48: {
            Sex = input.ReadInt32();
            break;
          }
          case 56: {
            Camp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CountInfo : pb::IMessage<CountInfo> {
    private static readonly pb::MessageParser<CountInfo> _parser = new pb::MessageParser<CountInfo>(() => new CountInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.GuildReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountInfo(CountInfo other) : this() {
      id_ = other.id_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountInfo Clone() {
      return new CountInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///互助列表
  /// </summary>
  public sealed partial class HelpArray : pb::IMessage<HelpArray> {
    private static readonly pb::MessageParser<HelpArray> _parser = new pb::MessageParser<HelpArray>(() => new HelpArray());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HelpArray> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.GuildReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelpArray() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelpArray(HelpArray other) : this() {
      helps_ = other.helps_.Clone();
      dailyHelpLimit_ = other.dailyHelpLimit_;
      userHelp_ = other.userHelp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelpArray Clone() {
      return new HelpArray(this);
    }

    /// <summary>Field number for the "helps" field.</summary>
    public const int HelpsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.HelpInfo> _repeated_helps_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.HelpInfo.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.HelpInfo> helps_ = new pbc::RepeatedField<global::Centersdk.Protobuf.HelpInfo>();
    /// <summary>
    ///互助列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.HelpInfo> Helps {
      get { return helps_; }
    }

    /// <summary>Field number for the "dailyHelpLimit" field.</summary>
    public const int DailyHelpLimitFieldNumber = 2;
    private int dailyHelpLimit_;
    /// <summary>
    ///每天互助次数上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DailyHelpLimit {
      get { return dailyHelpLimit_; }
      set {
        dailyHelpLimit_ = value;
      }
    }

    /// <summary>Field number for the "userHelp" field.</summary>
    public const int UserHelpFieldNumber = 3;
    private int userHelp_;
    /// <summary>
    ///此会员当前互助次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserHelp {
      get { return userHelp_; }
      set {
        userHelp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HelpArray);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HelpArray other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!helps_.Equals(other.helps_)) return false;
      if (DailyHelpLimit != other.DailyHelpLimit) return false;
      if (UserHelp != other.UserHelp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= helps_.GetHashCode();
      if (DailyHelpLimit != 0) hash ^= DailyHelpLimit.GetHashCode();
      if (UserHelp != 0) hash ^= UserHelp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      helps_.WriteTo(output, _repeated_helps_codec);
      if (DailyHelpLimit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DailyHelpLimit);
      }
      if (UserHelp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UserHelp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += helps_.CalculateSize(_repeated_helps_codec);
      if (DailyHelpLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DailyHelpLimit);
      }
      if (UserHelp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserHelp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HelpArray other) {
      if (other == null) {
        return;
      }
      helps_.Add(other.helps_);
      if (other.DailyHelpLimit != 0) {
        DailyHelpLimit = other.DailyHelpLimit;
      }
      if (other.UserHelp != 0) {
        UserHelp = other.UserHelp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            helps_.AddEntriesFrom(input, _repeated_helps_codec);
            break;
          }
          case 16: {
            DailyHelpLimit = input.ReadInt32();
            break;
          }
          case 24: {
            UserHelp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///互助信息
  /// </summary>
  public sealed partial class HelpInfo : pb::IMessage<HelpInfo> {
    private static readonly pb::MessageParser<HelpInfo> _parser = new pb::MessageParser<HelpInfo>(() => new HelpInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HelpInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.GuildReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelpInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelpInfo(HelpInfo other) : this() {
      id_ = other.id_;
      roleId_ = other.roleId_;
      name_ = other.name_;
      helpLimit_ = other.helpLimit_;
      helpCount_ = other.helpCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelpInfo Clone() {
      return new HelpInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///任务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private long roleId_;
    /// <summary>
    ///任务所属用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///任务名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "helpLimit" field.</summary>
    public const int HelpLimitFieldNumber = 4;
    private int helpLimit_;
    /// <summary>
    ///此任务的互助次数上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HelpLimit {
      get { return helpLimit_; }
      set {
        helpLimit_ = value;
      }
    }

    /// <summary>Field number for the "helpCount" field.</summary>
    public const int HelpCountFieldNumber = 5;
    private int helpCount_;
    /// <summary>
    ///已经被互助的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HelpCount {
      get { return helpCount_; }
      set {
        helpCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HelpInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HelpInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (RoleId != other.RoleId) return false;
      if (Name != other.Name) return false;
      if (HelpLimit != other.HelpLimit) return false;
      if (HelpCount != other.HelpCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (RoleId != 0L) hash ^= RoleId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (HelpLimit != 0) hash ^= HelpLimit.GetHashCode();
      if (HelpCount != 0) hash ^= HelpCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (RoleId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HelpLimit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HelpLimit);
      }
      if (HelpCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HelpCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HelpLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HelpLimit);
      }
      if (HelpCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HelpCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HelpInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.RoleId != 0L) {
        RoleId = other.RoleId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.HelpLimit != 0) {
        HelpLimit = other.HelpLimit;
      }
      if (other.HelpCount != 0) {
        HelpCount = other.HelpCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            HelpLimit = input.ReadInt32();
            break;
          }
          case 40: {
            HelpCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///捐献信息信息
  /// </summary>
  public sealed partial class DonateInfo : pb::IMessage<DonateInfo> {
    private static readonly pb::MessageParser<DonateInfo> _parser = new pb::MessageParser<DonateInfo>(() => new DonateInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DonateInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.GuildReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DonateInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DonateInfo(DonateInfo other) : this() {
      itemId_ = other.itemId_;
      count_ = other.count_;
      score_ = other.score_;
      gold_ = other.gold_;
      donateCount_ = other.donateCount_;
      dailyLimit_ = other.dailyLimit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DonateInfo Clone() {
      return new DonateInfo(this);
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    ///捐献ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    ///捐献数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private int score_;
    /// <summary>
    ///捐献后会员获得的贡献
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 4;
    private int gold_;
    /// <summary>
    ///捐献后公会获得的资金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "donateCount" field.</summary>
    public const int DonateCountFieldNumber = 5;
    private int donateCount_;
    /// <summary>
    ///此会员捐献当前捐献次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DonateCount {
      get { return donateCount_; }
      set {
        donateCount_ = value;
      }
    }

    /// <summary>Field number for the "dailyLimit" field.</summary>
    public const int DailyLimitFieldNumber = 6;
    private int dailyLimit_;
    /// <summary>
    ///每天捐献次数上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DailyLimit {
      get { return dailyLimit_; }
      set {
        dailyLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DonateInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DonateInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (Count != other.Count) return false;
      if (Score != other.Score) return false;
      if (Gold != other.Gold) return false;
      if (DonateCount != other.DonateCount) return false;
      if (DailyLimit != other.DailyLimit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (DonateCount != 0) hash ^= DonateCount.GetHashCode();
      if (DailyLimit != 0) hash ^= DailyLimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (Gold != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Gold);
      }
      if (DonateCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DonateCount);
      }
      if (DailyLimit != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DailyLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (DonateCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DonateCount);
      }
      if (DailyLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DailyLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DonateInfo other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.DonateCount != 0) {
        DonateCount = other.DonateCount;
      }
      if (other.DailyLimit != 0) {
        DailyLimit = other.DailyLimit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
          case 32: {
            Gold = input.ReadInt32();
            break;
          }
          case 40: {
            DonateCount = input.ReadInt32();
            break;
          }
          case 48: {
            DailyLimit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
