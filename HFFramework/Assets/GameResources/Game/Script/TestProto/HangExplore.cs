// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: hang-explore.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Centersdk.Protobuf {

  /// <summary>Holder for reflection information generated from hang-explore.proto</summary>
  public static partial class HangExploreReflection {

    #region Descriptor
    /// <summary>File descriptor for hang-explore.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HangExploreReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJoYW5nLWV4cGxvcmUucHJvdG8SEmNlbnRlcnNkay5wcm90b2J1ZhoXaGFu",
            "Z2luZy1lcXVpcG1lbnQucHJvdG8aCml0ZW0ucHJvdG8iRAoLRXhwbG9yZVRh",
            "c2sSEQoJdW5pcXVlX2lkGAEgASgDEg8KB3Rhc2tfaWQYAiABKAUSEQoJaXNf",
            "ZmluaXNoGAMgASgIIvsCChFFeHBsb3JlVGFza0RldGFpbBIRCgl1bmlxdWVf",
            "aWQYASABKAMSDwoHdGFza19pZBgCIAEoBRINCgVsZXZlbBgDIAEoBRISCgpk",
            "aWZmaWN1bHR5GAQgASgFEhcKD3JlY29tbWVuZF9wb3dlchgFIAEoAxIPCgdi",
            "b3NzX2lkGAYgASgDEj8KBWJvbnVzGAcgAygLMjAuY2VudGVyc2RrLnByb3Rv",
            "YnVmLkV4cGxvcmVUYXNrRGV0YWlsLkJvbnVzRW50cnkSUAoOcG9zc2libGVf",
            "Ym9udXMYCCADKAsyOC5jZW50ZXJzZGsucHJvdG9idWYuRXhwbG9yZVRhc2tE",
            "ZXRhaWwuUG9zc2libGVCb251c0VudHJ5GiwKCkJvbnVzRW50cnkSCwoDa2V5",
            "GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ARo0ChJQb3NzaWJsZUJvbnVzRW50",
            "cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASL3AQoTRXhwbG9y",
            "ZVRhc2tQcm9ncmVzcxIRCgl1bmlxdWVfaWQYASABKAMSDwoHdGFza19pZBgC",
            "IAEoBRISCgpyb29tX2luZGV4GAMgASgFEhIKCnJvb21fY291bnQYBCABKAUS",
            "EQoJcm9vbV90eXBlGAUgASgFEkEKBWJ1ZmZzGAYgAygLMjIuY2VudGVyc2Rr",
            "LnByb3RvYnVmLkV4cGxvcmVUYXNrUHJvZ3Jlc3MuQnVmZnNFbnRyeRIQCghl",
            "dmVudF9pZBgHIAEoBRosCgpCdWZmc0VudHJ5EgsKA2tleRgBIAEoBRINCgV2",
            "YWx1ZRgCIAEoAjoCOAEidQoLRXhwbG9yZUluZm8SDQoFbGV2ZWwYASABKAUS",
            "EgoKZnJlZV9jb3VudBgCIAEoBRITCgtsZWZ0X21pbGxpcxgDIAEoAxIuCgV0",
            "YXNrcxgEIAMoCzIfLmNlbnRlcnNkay5wcm90b2J1Zi5FeHBsb3JlVGFzayKG",
            "AQoMRXhwbG9yZUJvbnVzEgwKBHR5cGUYASABKAUSOgoFYm9udXMYAiADKAsy",
            "Ky5jZW50ZXJzZGsucHJvdG9idWYuRXhwbG9yZUJvbnVzLkJvbnVzRW50cnka",
            "LAoKQm9udXNFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgB",
            "QjEKHWNvbS5ob29sYWkuY2VudGVyc2RrLnByb3RvYnVmQhBIYW5nRXhwbG9y",
            "ZVByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Centersdk.Protobuf.HangingEquipmentReflection.Descriptor, global::Centersdk.Protobuf.ItemReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.ExploreTask), global::Centersdk.Protobuf.ExploreTask.Parser, new[]{ "UniqueId", "TaskId", "IsFinish" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.ExploreTaskDetail), global::Centersdk.Protobuf.ExploreTaskDetail.Parser, new[]{ "UniqueId", "TaskId", "Level", "Difficulty", "RecommendPower", "BossId", "Bonus", "PossibleBonus" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.ExploreTaskProgress), global::Centersdk.Protobuf.ExploreTaskProgress.Parser, new[]{ "UniqueId", "TaskId", "RoomIndex", "RoomCount", "RoomType", "Buffs", "EventId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.ExploreInfo), global::Centersdk.Protobuf.ExploreInfo.Parser, new[]{ "Level", "FreeCount", "LeftMillis", "Tasks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.ExploreBonus), global::Centersdk.Protobuf.ExploreBonus.Parser, new[]{ "Type", "Bonus" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ExploreTask : pb::IMessage<ExploreTask> {
    private static readonly pb::MessageParser<ExploreTask> _parser = new pb::MessageParser<ExploreTask>(() => new ExploreTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExploreTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.HangExploreReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreTask(ExploreTask other) : this() {
      uniqueId_ = other.uniqueId_;
      taskId_ = other.taskId_;
      isFinish_ = other.isFinish_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreTask Clone() {
      return new ExploreTask(this);
    }

    /// <summary>Field number for the "unique_id" field.</summary>
    public const int UniqueIdFieldNumber = 1;
    private long uniqueId_;
    /// <summary>
    /// 唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private int taskId_;
    /// <summary>
    /// 模板id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "is_finish" field.</summary>
    public const int IsFinishFieldNumber = 3;
    private bool isFinish_;
    /// <summary>
    /// 是否完成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFinish {
      get { return isFinish_; }
      set {
        isFinish_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExploreTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExploreTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueId != other.UniqueId) return false;
      if (TaskId != other.TaskId) return false;
      if (IsFinish != other.IsFinish) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueId != 0L) hash ^= UniqueId.GetHashCode();
      if (TaskId != 0) hash ^= TaskId.GetHashCode();
      if (IsFinish != false) hash ^= IsFinish.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UniqueId);
      }
      if (TaskId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TaskId);
      }
      if (IsFinish != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsFinish);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UniqueId);
      }
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      if (IsFinish != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExploreTask other) {
      if (other == null) {
        return;
      }
      if (other.UniqueId != 0L) {
        UniqueId = other.UniqueId;
      }
      if (other.TaskId != 0) {
        TaskId = other.TaskId;
      }
      if (other.IsFinish != false) {
        IsFinish = other.IsFinish;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UniqueId = input.ReadInt64();
            break;
          }
          case 16: {
            TaskId = input.ReadInt32();
            break;
          }
          case 24: {
            IsFinish = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExploreTaskDetail : pb::IMessage<ExploreTaskDetail> {
    private static readonly pb::MessageParser<ExploreTaskDetail> _parser = new pb::MessageParser<ExploreTaskDetail>(() => new ExploreTaskDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExploreTaskDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.HangExploreReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreTaskDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreTaskDetail(ExploreTaskDetail other) : this() {
      uniqueId_ = other.uniqueId_;
      taskId_ = other.taskId_;
      level_ = other.level_;
      difficulty_ = other.difficulty_;
      recommendPower_ = other.recommendPower_;
      bossId_ = other.bossId_;
      bonus_ = other.bonus_.Clone();
      possibleBonus_ = other.possibleBonus_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreTaskDetail Clone() {
      return new ExploreTaskDetail(this);
    }

    /// <summary>Field number for the "unique_id" field.</summary>
    public const int UniqueIdFieldNumber = 1;
    private long uniqueId_;
    /// <summary>
    /// 唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private int taskId_;
    /// <summary>
    /// 模板id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    /// 副本等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "difficulty" field.</summary>
    public const int DifficultyFieldNumber = 4;
    private int difficulty_;
    /// <summary>
    /// 副本难度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Difficulty {
      get { return difficulty_; }
      set {
        difficulty_ = value;
      }
    }

    /// <summary>Field number for the "recommend_power" field.</summary>
    public const int RecommendPowerFieldNumber = 5;
    private long recommendPower_;
    /// <summary>
    /// 推荐战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RecommendPower {
      get { return recommendPower_; }
      set {
        recommendPower_ = value;
      }
    }

    /// <summary>Field number for the "boss_id" field.</summary>
    public const int BossIdFieldNumber = 6;
    private long bossId_;
    /// <summary>
    /// boss ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BossId {
      get { return bossId_; }
      set {
        bossId_ = value;
      }
    }

    /// <summary>Field number for the "bonus" field.</summary>
    public const int BonusFieldNumber = 7;
    private static readonly pbc::MapField<int, int>.Codec _map_bonus_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 58);
    private readonly pbc::MapField<int, int> bonus_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 必然掉落
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Bonus {
      get { return bonus_; }
    }

    /// <summary>Field number for the "possible_bonus" field.</summary>
    public const int PossibleBonusFieldNumber = 8;
    private static readonly pbc::MapField<int, int>.Codec _map_possibleBonus_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 66);
    private readonly pbc::MapField<int, int> possibleBonus_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 可能掉落
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> PossibleBonus {
      get { return possibleBonus_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExploreTaskDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExploreTaskDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueId != other.UniqueId) return false;
      if (TaskId != other.TaskId) return false;
      if (Level != other.Level) return false;
      if (Difficulty != other.Difficulty) return false;
      if (RecommendPower != other.RecommendPower) return false;
      if (BossId != other.BossId) return false;
      if (!Bonus.Equals(other.Bonus)) return false;
      if (!PossibleBonus.Equals(other.PossibleBonus)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueId != 0L) hash ^= UniqueId.GetHashCode();
      if (TaskId != 0) hash ^= TaskId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Difficulty != 0) hash ^= Difficulty.GetHashCode();
      if (RecommendPower != 0L) hash ^= RecommendPower.GetHashCode();
      if (BossId != 0L) hash ^= BossId.GetHashCode();
      hash ^= Bonus.GetHashCode();
      hash ^= PossibleBonus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UniqueId);
      }
      if (TaskId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TaskId);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Difficulty != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Difficulty);
      }
      if (RecommendPower != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(RecommendPower);
      }
      if (BossId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(BossId);
      }
      bonus_.WriteTo(output, _map_bonus_codec);
      possibleBonus_.WriteTo(output, _map_possibleBonus_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UniqueId);
      }
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Difficulty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Difficulty);
      }
      if (RecommendPower != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecommendPower);
      }
      if (BossId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BossId);
      }
      size += bonus_.CalculateSize(_map_bonus_codec);
      size += possibleBonus_.CalculateSize(_map_possibleBonus_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExploreTaskDetail other) {
      if (other == null) {
        return;
      }
      if (other.UniqueId != 0L) {
        UniqueId = other.UniqueId;
      }
      if (other.TaskId != 0) {
        TaskId = other.TaskId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Difficulty != 0) {
        Difficulty = other.Difficulty;
      }
      if (other.RecommendPower != 0L) {
        RecommendPower = other.RecommendPower;
      }
      if (other.BossId != 0L) {
        BossId = other.BossId;
      }
      bonus_.Add(other.bonus_);
      possibleBonus_.Add(other.possibleBonus_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UniqueId = input.ReadInt64();
            break;
          }
          case 16: {
            TaskId = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Difficulty = input.ReadInt32();
            break;
          }
          case 40: {
            RecommendPower = input.ReadInt64();
            break;
          }
          case 48: {
            BossId = input.ReadInt64();
            break;
          }
          case 58: {
            bonus_.AddEntriesFrom(input, _map_bonus_codec);
            break;
          }
          case 66: {
            possibleBonus_.AddEntriesFrom(input, _map_possibleBonus_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExploreTaskProgress : pb::IMessage<ExploreTaskProgress> {
    private static readonly pb::MessageParser<ExploreTaskProgress> _parser = new pb::MessageParser<ExploreTaskProgress>(() => new ExploreTaskProgress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExploreTaskProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.HangExploreReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreTaskProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreTaskProgress(ExploreTaskProgress other) : this() {
      uniqueId_ = other.uniqueId_;
      taskId_ = other.taskId_;
      roomIndex_ = other.roomIndex_;
      roomCount_ = other.roomCount_;
      roomType_ = other.roomType_;
      buffs_ = other.buffs_.Clone();
      eventId_ = other.eventId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreTaskProgress Clone() {
      return new ExploreTaskProgress(this);
    }

    /// <summary>Field number for the "unique_id" field.</summary>
    public const int UniqueIdFieldNumber = 1;
    private long uniqueId_;
    /// <summary>
    /// 唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private int taskId_;
    /// <summary>
    /// 模板id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "room_index" field.</summary>
    public const int RoomIndexFieldNumber = 3;
    private int roomIndex_;
    /// <summary>
    /// 目前位于第几个房间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomIndex {
      get { return roomIndex_; }
      set {
        roomIndex_ = value;
      }
    }

    /// <summary>Field number for the "room_count" field.</summary>
    public const int RoomCountFieldNumber = 4;
    private int roomCount_;
    /// <summary>
    /// 房间总数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomCount {
      get { return roomCount_; }
      set {
        roomCount_ = value;
      }
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 5;
    private int roomType_;
    /// <summary>
    /// 房间类型，1=小怪，2=事件，3=boss
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    /// <summary>Field number for the "buffs" field.</summary>
    public const int BuffsFieldNumber = 6;
    private static readonly pbc::MapField<int, float>.Codec _map_buffs_codec
        = new pbc::MapField<int, float>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForFloat(21), 50);
    private readonly pbc::MapField<int, float> buffs_ = new pbc::MapField<int, float>();
    /// <summary>
    /// 到达某个探索房间时，拥有的buff，前端可以根据房间类型来展现
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, float> Buffs {
      get { return buffs_; }
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 7;
    private int eventId_;
    /// <summary>
    /// 如果是事件房间，这个表示事件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExploreTaskProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExploreTaskProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueId != other.UniqueId) return false;
      if (TaskId != other.TaskId) return false;
      if (RoomIndex != other.RoomIndex) return false;
      if (RoomCount != other.RoomCount) return false;
      if (RoomType != other.RoomType) return false;
      if (!Buffs.Equals(other.Buffs)) return false;
      if (EventId != other.EventId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueId != 0L) hash ^= UniqueId.GetHashCode();
      if (TaskId != 0) hash ^= TaskId.GetHashCode();
      if (RoomIndex != 0) hash ^= RoomIndex.GetHashCode();
      if (RoomCount != 0) hash ^= RoomCount.GetHashCode();
      if (RoomType != 0) hash ^= RoomType.GetHashCode();
      hash ^= Buffs.GetHashCode();
      if (EventId != 0) hash ^= EventId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UniqueId);
      }
      if (TaskId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TaskId);
      }
      if (RoomIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoomIndex);
      }
      if (RoomCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RoomCount);
      }
      if (RoomType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RoomType);
      }
      buffs_.WriteTo(output, _map_buffs_codec);
      if (EventId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UniqueId);
      }
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      if (RoomIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomIndex);
      }
      if (RoomCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomCount);
      }
      if (RoomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
      }
      size += buffs_.CalculateSize(_map_buffs_codec);
      if (EventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExploreTaskProgress other) {
      if (other == null) {
        return;
      }
      if (other.UniqueId != 0L) {
        UniqueId = other.UniqueId;
      }
      if (other.TaskId != 0) {
        TaskId = other.TaskId;
      }
      if (other.RoomIndex != 0) {
        RoomIndex = other.RoomIndex;
      }
      if (other.RoomCount != 0) {
        RoomCount = other.RoomCount;
      }
      if (other.RoomType != 0) {
        RoomType = other.RoomType;
      }
      buffs_.Add(other.buffs_);
      if (other.EventId != 0) {
        EventId = other.EventId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UniqueId = input.ReadInt64();
            break;
          }
          case 16: {
            TaskId = input.ReadInt32();
            break;
          }
          case 24: {
            RoomIndex = input.ReadInt32();
            break;
          }
          case 32: {
            RoomCount = input.ReadInt32();
            break;
          }
          case 40: {
            RoomType = input.ReadInt32();
            break;
          }
          case 50: {
            buffs_.AddEntriesFrom(input, _map_buffs_codec);
            break;
          }
          case 56: {
            EventId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExploreInfo : pb::IMessage<ExploreInfo> {
    private static readonly pb::MessageParser<ExploreInfo> _parser = new pb::MessageParser<ExploreInfo>(() => new ExploreInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExploreInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.HangExploreReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreInfo(ExploreInfo other) : this() {
      level_ = other.level_;
      freeCount_ = other.freeCount_;
      leftMillis_ = other.leftMillis_;
      tasks_ = other.tasks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreInfo Clone() {
      return new ExploreInfo(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "free_count" field.</summary>
    public const int FreeCountFieldNumber = 2;
    private int freeCount_;
    /// <summary>
    /// 今日免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeCount {
      get { return freeCount_; }
      set {
        freeCount_ = value;
      }
    }

    /// <summary>Field number for the "left_millis" field.</summary>
    public const int LeftMillisFieldNumber = 3;
    private long leftMillis_;
    /// <summary>
    /// 剩余多少时间刷新，0表示可以刷新
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LeftMillis {
      get { return leftMillis_; }
      set {
        leftMillis_ = value;
      }
    }

    /// <summary>Field number for the "tasks" field.</summary>
    public const int TasksFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.ExploreTask> _repeated_tasks_codec
        = pb::FieldCodec.ForMessage(34, global::Centersdk.Protobuf.ExploreTask.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.ExploreTask> tasks_ = new pbc::RepeatedField<global::Centersdk.Protobuf.ExploreTask>();
    /// <summary>
    /// 任务列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.ExploreTask> Tasks {
      get { return tasks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExploreInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExploreInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (FreeCount != other.FreeCount) return false;
      if (LeftMillis != other.LeftMillis) return false;
      if(!tasks_.Equals(other.tasks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (FreeCount != 0) hash ^= FreeCount.GetHashCode();
      if (LeftMillis != 0L) hash ^= LeftMillis.GetHashCode();
      hash ^= tasks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (FreeCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FreeCount);
      }
      if (LeftMillis != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LeftMillis);
      }
      tasks_.WriteTo(output, _repeated_tasks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (FreeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeCount);
      }
      if (LeftMillis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeftMillis);
      }
      size += tasks_.CalculateSize(_repeated_tasks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExploreInfo other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.FreeCount != 0) {
        FreeCount = other.FreeCount;
      }
      if (other.LeftMillis != 0L) {
        LeftMillis = other.LeftMillis;
      }
      tasks_.Add(other.tasks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 16: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 24: {
            LeftMillis = input.ReadInt64();
            break;
          }
          case 34: {
            tasks_.AddEntriesFrom(input, _repeated_tasks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExploreBonus : pb::IMessage<ExploreBonus> {
    private static readonly pb::MessageParser<ExploreBonus> _parser = new pb::MessageParser<ExploreBonus>(() => new ExploreBonus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExploreBonus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.HangExploreReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreBonus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreBonus(ExploreBonus other) : this() {
      type_ = other.type_;
      bonus_ = other.bonus_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreBonus Clone() {
      return new ExploreBonus(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    /// 类型，1=buff，2=道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "bonus" field.</summary>
    public const int BonusFieldNumber = 2;
    private static readonly pbc::MapField<int, int>.Codec _map_bonus_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
    private readonly pbc::MapField<int, int> bonus_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Bonus {
      get { return bonus_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExploreBonus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExploreBonus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!Bonus.Equals(other.Bonus)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= Bonus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      bonus_.WriteTo(output, _map_bonus_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      size += bonus_.CalculateSize(_map_bonus_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExploreBonus other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      bonus_.Add(other.bonus_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            bonus_.AddEntriesFrom(input, _map_bonus_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
