// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: hang-role.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Centersdk.Protobuf {

  /// <summary>Holder for reflection information generated from hang-role.proto</summary>
  public static partial class HangRoleReflection {

    #region Descriptor
    /// <summary>File descriptor for hang-role.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HangRoleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9oYW5nLXJvbGUucHJvdG8SEmNlbnRlcnNkay5wcm90b2J1ZhoXaGFuZ2lu",
            "Zy1lcXVpcG1lbnQucHJvdG8aCml0ZW0ucHJvdG8i5AIKCENhcmRJbmZvEhEK",
            "CXVuaXF1ZV9pZBgBIAEoAxIPCgdjYXJkX2lkGAIgASgFEgoKAmhwGAMgASgD",
            "Eg4KBmF0dGFjaxgEIAEoAxIPCgdkZWZlbnNlGAUgASgDEg0KBWxldmVsGAYg",
            "ASgFEhIKCmJyZWFrTGV2ZWwYByABKAUSEgoKYXdha2VMZXZlbBgIIAEoBRIS",
            "Cgpza2lsbFBvaW50GAkgASgFEhgKEGFjdGl2ZVNraWxsTGV2ZWwYCiABKAUS",
            "GgoScGFzc2l2ZVNraWxsMUxldmVsGAsgASgFEhoKEnBhc3NpdmVTa2lsbDJM",
            "ZXZlbBgMIAEoBRIaChJwYXNzaXZlU2tpbGwzTGV2ZWwYDSABKAUSOAoKZXF1",
            "aXBtZW50cxgOIAMoCzIkLmNlbnRlcnNkay5wcm90b2J1Zi5IYW5naW5nRXF1",
            "aXBtZW50EhQKDHNwcml0ZVN0b25lcxgPIAMoBSJHCghDYXJkTGlzdBIPCgd1",
            "c2VyX2lkGAEgASgDEioKBGRhdGEYAiADKAsyHC5jZW50ZXJzZGsucHJvdG9i",
            "dWYuQ2FyZEluZm8iKQoJRm9ybWF0aW9uEgoKAmlkGAEgASgFEhAKCGNhcmRf",
            "aWRzGAIgAygDIoMBCghTa2lsbEFkZBIRCgl1bmlxdWVfaWQYASABKAMSFgoO",
            "YWN0aXZlU2tpbGxBZGQYAiABKAUSGAoQcGFzc2l2ZVNraWxsMUFkZBgDIAEo",
            "BRIYChBwYXNzaXZlU2tpbGwyQWRkGAQgASgFEhgKEHBhc3NpdmVTa2lsbDNB",
            "ZGQYBSABKAUiYgoLUmVib3JuSXRlbXMSKgoEaW5mbxgBIAEoCzIcLmNlbnRl",
            "cnNkay5wcm90b2J1Zi5DYXJkSW5mbxInCgVpdGVtcxgCIAMoCzIYLmNlbnRl",
            "cnNkay5wcm90b2J1Zi5JdGVtIjsKCFN0b25lUmVxEhEKCXVuaXF1ZV9pZBgB",
            "IAEoAxILCgNwb3MYAiABKAUSDwoHaXRlbV9pZBgDIAEoBSKDAQoLUmVjcnVp",
            "dFJlc3ASDwoHcG9vbF9pZBgBIAEoBRINCgVjb3VudBgCIAEoBRIrCgVjYXJk",
            "cxgDIAMoCzIcLmNlbnRlcnNkay5wcm90b2J1Zi5DYXJkSW5mbxInCgVpdGVt",
            "cxgEIAMoCzIYLmNlbnRlcnNkay5wcm90b2J1Zi5JdGVtQi4KHWNvbS5ob29s",
            "YWkuY2VudGVyc2RrLnByb3RvYnVmQg1IYW5nUm9sZVByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Centersdk.Protobuf.HangingEquipmentReflection.Descriptor, global::Centersdk.Protobuf.ItemReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.CardInfo), global::Centersdk.Protobuf.CardInfo.Parser, new[]{ "UniqueId", "CardId", "Hp", "Attack", "Defense", "Level", "BreakLevel", "AwakeLevel", "SkillPoint", "ActiveSkillLevel", "PassiveSkill1Level", "PassiveSkill2Level", "PassiveSkill3Level", "Equipments", "SpriteStones" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.CardList), global::Centersdk.Protobuf.CardList.Parser, new[]{ "UserId", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.Formation), global::Centersdk.Protobuf.Formation.Parser, new[]{ "Id", "CardIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.SkillAdd), global::Centersdk.Protobuf.SkillAdd.Parser, new[]{ "UniqueId", "ActiveSkillAdd", "PassiveSkill1Add", "PassiveSkill2Add", "PassiveSkill3Add" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.RebornItems), global::Centersdk.Protobuf.RebornItems.Parser, new[]{ "Info", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.StoneReq), global::Centersdk.Protobuf.StoneReq.Parser, new[]{ "UniqueId", "Pos", "ItemId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.RecruitResp), global::Centersdk.Protobuf.RecruitResp.Parser, new[]{ "PoolId", "Count", "Cards", "Items" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CardInfo : pb::IMessage<CardInfo> {
    private static readonly pb::MessageParser<CardInfo> _parser = new pb::MessageParser<CardInfo>(() => new CardInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.HangRoleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInfo(CardInfo other) : this() {
      uniqueId_ = other.uniqueId_;
      cardId_ = other.cardId_;
      hp_ = other.hp_;
      attack_ = other.attack_;
      defense_ = other.defense_;
      level_ = other.level_;
      breakLevel_ = other.breakLevel_;
      awakeLevel_ = other.awakeLevel_;
      skillPoint_ = other.skillPoint_;
      activeSkillLevel_ = other.activeSkillLevel_;
      passiveSkill1Level_ = other.passiveSkill1Level_;
      passiveSkill2Level_ = other.passiveSkill2Level_;
      passiveSkill3Level_ = other.passiveSkill3Level_;
      equipments_ = other.equipments_.Clone();
      spriteStones_ = other.spriteStones_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInfo Clone() {
      return new CardInfo(this);
    }

    /// <summary>Field number for the "unique_id" field.</summary>
    public const int UniqueIdFieldNumber = 1;
    private long uniqueId_;
    /// <summary>
    /// 卡牌唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 2;
    private int cardId_;
    /// <summary>
    /// 卡牌类型id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 3;
    private long hp_;
    /// <summary>
    /// 基础生命
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "attack" field.</summary>
    public const int AttackFieldNumber = 4;
    private long attack_;
    /// <summary>
    /// 基础攻击
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "defense" field.</summary>
    public const int DefenseFieldNumber = 5;
    private long defense_;
    /// <summary>
    /// 基础防御
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Defense {
      get { return defense_; }
      set {
        defense_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 6;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "breakLevel" field.</summary>
    public const int BreakLevelFieldNumber = 7;
    private int breakLevel_;
    /// <summary>
    /// 突破等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BreakLevel {
      get { return breakLevel_; }
      set {
        breakLevel_ = value;
      }
    }

    /// <summary>Field number for the "awakeLevel" field.</summary>
    public const int AwakeLevelFieldNumber = 8;
    private int awakeLevel_;
    /// <summary>
    /// 觉醒等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AwakeLevel {
      get { return awakeLevel_; }
      set {
        awakeLevel_ = value;
      }
    }

    /// <summary>Field number for the "skillPoint" field.</summary>
    public const int SkillPointFieldNumber = 9;
    private int skillPoint_;
    /// <summary>
    /// 剩余技能点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillPoint {
      get { return skillPoint_; }
      set {
        skillPoint_ = value;
      }
    }

    /// <summary>Field number for the "activeSkillLevel" field.</summary>
    public const int ActiveSkillLevelFieldNumber = 10;
    private int activeSkillLevel_;
    /// <summary>
    /// 主动技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveSkillLevel {
      get { return activeSkillLevel_; }
      set {
        activeSkillLevel_ = value;
      }
    }

    /// <summary>Field number for the "passiveSkill1Level" field.</summary>
    public const int PassiveSkill1LevelFieldNumber = 11;
    private int passiveSkill1Level_;
    /// <summary>
    /// 被动技能1等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassiveSkill1Level {
      get { return passiveSkill1Level_; }
      set {
        passiveSkill1Level_ = value;
      }
    }

    /// <summary>Field number for the "passiveSkill2Level" field.</summary>
    public const int PassiveSkill2LevelFieldNumber = 12;
    private int passiveSkill2Level_;
    /// <summary>
    /// 被动技能2等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassiveSkill2Level {
      get { return passiveSkill2Level_; }
      set {
        passiveSkill2Level_ = value;
      }
    }

    /// <summary>Field number for the "passiveSkill3Level" field.</summary>
    public const int PassiveSkill3LevelFieldNumber = 13;
    private int passiveSkill3Level_;
    /// <summary>
    /// 被动技能3等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassiveSkill3Level {
      get { return passiveSkill3Level_; }
      set {
        passiveSkill3Level_ = value;
      }
    }

    /// <summary>Field number for the "equipments" field.</summary>
    public const int EquipmentsFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.HangingEquipment> _repeated_equipments_codec
        = pb::FieldCodec.ForMessage(114, global::Centersdk.Protobuf.HangingEquipment.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.HangingEquipment> equipments_ = new pbc::RepeatedField<global::Centersdk.Protobuf.HangingEquipment>();
    /// <summary>
    /// 装备列表，空位uniqueId为0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.HangingEquipment> Equipments {
      get { return equipments_; }
    }

    /// <summary>Field number for the "spriteStones" field.</summary>
    public const int SpriteStonesFieldNumber = 15;
    private static readonly pb::FieldCodec<int> _repeated_spriteStones_codec
        = pb::FieldCodec.ForInt32(122);
    private readonly pbc::RepeatedField<int> spriteStones_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 魂石id列表，空位为0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SpriteStones {
      get { return spriteStones_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueId != other.UniqueId) return false;
      if (CardId != other.CardId) return false;
      if (Hp != other.Hp) return false;
      if (Attack != other.Attack) return false;
      if (Defense != other.Defense) return false;
      if (Level != other.Level) return false;
      if (BreakLevel != other.BreakLevel) return false;
      if (AwakeLevel != other.AwakeLevel) return false;
      if (SkillPoint != other.SkillPoint) return false;
      if (ActiveSkillLevel != other.ActiveSkillLevel) return false;
      if (PassiveSkill1Level != other.PassiveSkill1Level) return false;
      if (PassiveSkill2Level != other.PassiveSkill2Level) return false;
      if (PassiveSkill3Level != other.PassiveSkill3Level) return false;
      if(!equipments_.Equals(other.equipments_)) return false;
      if(!spriteStones_.Equals(other.spriteStones_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueId != 0L) hash ^= UniqueId.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (Hp != 0L) hash ^= Hp.GetHashCode();
      if (Attack != 0L) hash ^= Attack.GetHashCode();
      if (Defense != 0L) hash ^= Defense.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (BreakLevel != 0) hash ^= BreakLevel.GetHashCode();
      if (AwakeLevel != 0) hash ^= AwakeLevel.GetHashCode();
      if (SkillPoint != 0) hash ^= SkillPoint.GetHashCode();
      if (ActiveSkillLevel != 0) hash ^= ActiveSkillLevel.GetHashCode();
      if (PassiveSkill1Level != 0) hash ^= PassiveSkill1Level.GetHashCode();
      if (PassiveSkill2Level != 0) hash ^= PassiveSkill2Level.GetHashCode();
      if (PassiveSkill3Level != 0) hash ^= PassiveSkill3Level.GetHashCode();
      hash ^= equipments_.GetHashCode();
      hash ^= spriteStones_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UniqueId);
      }
      if (CardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CardId);
      }
      if (Hp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Hp);
      }
      if (Attack != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Attack);
      }
      if (Defense != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Defense);
      }
      if (Level != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Level);
      }
      if (BreakLevel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BreakLevel);
      }
      if (AwakeLevel != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AwakeLevel);
      }
      if (SkillPoint != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SkillPoint);
      }
      if (ActiveSkillLevel != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ActiveSkillLevel);
      }
      if (PassiveSkill1Level != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PassiveSkill1Level);
      }
      if (PassiveSkill2Level != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(PassiveSkill2Level);
      }
      if (PassiveSkill3Level != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(PassiveSkill3Level);
      }
      equipments_.WriteTo(output, _repeated_equipments_codec);
      spriteStones_.WriteTo(output, _repeated_spriteStones_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UniqueId);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (Hp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Hp);
      }
      if (Attack != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Attack);
      }
      if (Defense != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Defense);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (BreakLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BreakLevel);
      }
      if (AwakeLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwakeLevel);
      }
      if (SkillPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillPoint);
      }
      if (ActiveSkillLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveSkillLevel);
      }
      if (PassiveSkill1Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassiveSkill1Level);
      }
      if (PassiveSkill2Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassiveSkill2Level);
      }
      if (PassiveSkill3Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassiveSkill3Level);
      }
      size += equipments_.CalculateSize(_repeated_equipments_codec);
      size += spriteStones_.CalculateSize(_repeated_spriteStones_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardInfo other) {
      if (other == null) {
        return;
      }
      if (other.UniqueId != 0L) {
        UniqueId = other.UniqueId;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.Hp != 0L) {
        Hp = other.Hp;
      }
      if (other.Attack != 0L) {
        Attack = other.Attack;
      }
      if (other.Defense != 0L) {
        Defense = other.Defense;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.BreakLevel != 0) {
        BreakLevel = other.BreakLevel;
      }
      if (other.AwakeLevel != 0) {
        AwakeLevel = other.AwakeLevel;
      }
      if (other.SkillPoint != 0) {
        SkillPoint = other.SkillPoint;
      }
      if (other.ActiveSkillLevel != 0) {
        ActiveSkillLevel = other.ActiveSkillLevel;
      }
      if (other.PassiveSkill1Level != 0) {
        PassiveSkill1Level = other.PassiveSkill1Level;
      }
      if (other.PassiveSkill2Level != 0) {
        PassiveSkill2Level = other.PassiveSkill2Level;
      }
      if (other.PassiveSkill3Level != 0) {
        PassiveSkill3Level = other.PassiveSkill3Level;
      }
      equipments_.Add(other.equipments_);
      spriteStones_.Add(other.spriteStones_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UniqueId = input.ReadInt64();
            break;
          }
          case 16: {
            CardId = input.ReadInt32();
            break;
          }
          case 24: {
            Hp = input.ReadInt64();
            break;
          }
          case 32: {
            Attack = input.ReadInt64();
            break;
          }
          case 40: {
            Defense = input.ReadInt64();
            break;
          }
          case 48: {
            Level = input.ReadInt32();
            break;
          }
          case 56: {
            BreakLevel = input.ReadInt32();
            break;
          }
          case 64: {
            AwakeLevel = input.ReadInt32();
            break;
          }
          case 72: {
            SkillPoint = input.ReadInt32();
            break;
          }
          case 80: {
            ActiveSkillLevel = input.ReadInt32();
            break;
          }
          case 88: {
            PassiveSkill1Level = input.ReadInt32();
            break;
          }
          case 96: {
            PassiveSkill2Level = input.ReadInt32();
            break;
          }
          case 104: {
            PassiveSkill3Level = input.ReadInt32();
            break;
          }
          case 114: {
            equipments_.AddEntriesFrom(input, _repeated_equipments_codec);
            break;
          }
          case 122:
          case 120: {
            spriteStones_.AddEntriesFrom(input, _repeated_spriteStones_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardList : pb::IMessage<CardList> {
    private static readonly pb::MessageParser<CardList> _parser = new pb::MessageParser<CardList>(() => new CardList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.HangRoleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardList(CardList other) : this() {
      userId_ = other.userId_;
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardList Clone() {
      return new CardList(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.CardInfo> _repeated_data_codec
        = pb::FieldCodec.ForMessage(18, global::Centersdk.Protobuf.CardInfo.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.CardInfo> data_ = new pbc::RepeatedField<global::Centersdk.Protobuf.CardInfo>();
    /// <summary>
    /// 卡牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.CardInfo> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if(!data_.Equals(other.data_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      hash ^= data_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      data_.WriteTo(output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardList other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Formation : pb::IMessage<Formation> {
    private static readonly pb::MessageParser<Formation> _parser = new pb::MessageParser<Formation>(() => new Formation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Formation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.HangRoleReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Formation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Formation(Formation other) : this() {
      id_ = other.id_;
      cardIds_ = other.cardIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Formation Clone() {
      return new Formation(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 队形id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "card_ids" field.</summary>
    public const int CardIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_cardIds_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> cardIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 卡牌列表，空位置用0，一共9个值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> CardIds {
      get { return cardIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Formation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Formation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!cardIds_.Equals(other.cardIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= cardIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      cardIds_.WriteTo(output, _repeated_cardIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += cardIds_.CalculateSize(_repeated_cardIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Formation other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      cardIds_.Add(other.cardIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkillAdd : pb::IMessage<SkillAdd> {
    private static readonly pb::MessageParser<SkillAdd> _parser = new pb::MessageParser<SkillAdd>(() => new SkillAdd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillAdd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.HangRoleReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillAdd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillAdd(SkillAdd other) : this() {
      uniqueId_ = other.uniqueId_;
      activeSkillAdd_ = other.activeSkillAdd_;
      passiveSkill1Add_ = other.passiveSkill1Add_;
      passiveSkill2Add_ = other.passiveSkill2Add_;
      passiveSkill3Add_ = other.passiveSkill3Add_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillAdd Clone() {
      return new SkillAdd(this);
    }

    /// <summary>Field number for the "unique_id" field.</summary>
    public const int UniqueIdFieldNumber = 1;
    private long uniqueId_;
    /// <summary>
    /// 卡牌唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    /// <summary>Field number for the "activeSkillAdd" field.</summary>
    public const int ActiveSkillAddFieldNumber = 2;
    private int activeSkillAdd_;
    /// <summary>
    /// 主动技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveSkillAdd {
      get { return activeSkillAdd_; }
      set {
        activeSkillAdd_ = value;
      }
    }

    /// <summary>Field number for the "passiveSkill1Add" field.</summary>
    public const int PassiveSkill1AddFieldNumber = 3;
    private int passiveSkill1Add_;
    /// <summary>
    /// 被动技能1等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassiveSkill1Add {
      get { return passiveSkill1Add_; }
      set {
        passiveSkill1Add_ = value;
      }
    }

    /// <summary>Field number for the "passiveSkill2Add" field.</summary>
    public const int PassiveSkill2AddFieldNumber = 4;
    private int passiveSkill2Add_;
    /// <summary>
    /// 被动技能2等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassiveSkill2Add {
      get { return passiveSkill2Add_; }
      set {
        passiveSkill2Add_ = value;
      }
    }

    /// <summary>Field number for the "passiveSkill3Add" field.</summary>
    public const int PassiveSkill3AddFieldNumber = 5;
    private int passiveSkill3Add_;
    /// <summary>
    /// 被动技能3等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassiveSkill3Add {
      get { return passiveSkill3Add_; }
      set {
        passiveSkill3Add_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillAdd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillAdd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueId != other.UniqueId) return false;
      if (ActiveSkillAdd != other.ActiveSkillAdd) return false;
      if (PassiveSkill1Add != other.PassiveSkill1Add) return false;
      if (PassiveSkill2Add != other.PassiveSkill2Add) return false;
      if (PassiveSkill3Add != other.PassiveSkill3Add) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueId != 0L) hash ^= UniqueId.GetHashCode();
      if (ActiveSkillAdd != 0) hash ^= ActiveSkillAdd.GetHashCode();
      if (PassiveSkill1Add != 0) hash ^= PassiveSkill1Add.GetHashCode();
      if (PassiveSkill2Add != 0) hash ^= PassiveSkill2Add.GetHashCode();
      if (PassiveSkill3Add != 0) hash ^= PassiveSkill3Add.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UniqueId);
      }
      if (ActiveSkillAdd != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActiveSkillAdd);
      }
      if (PassiveSkill1Add != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PassiveSkill1Add);
      }
      if (PassiveSkill2Add != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PassiveSkill2Add);
      }
      if (PassiveSkill3Add != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PassiveSkill3Add);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UniqueId);
      }
      if (ActiveSkillAdd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveSkillAdd);
      }
      if (PassiveSkill1Add != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassiveSkill1Add);
      }
      if (PassiveSkill2Add != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassiveSkill2Add);
      }
      if (PassiveSkill3Add != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassiveSkill3Add);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillAdd other) {
      if (other == null) {
        return;
      }
      if (other.UniqueId != 0L) {
        UniqueId = other.UniqueId;
      }
      if (other.ActiveSkillAdd != 0) {
        ActiveSkillAdd = other.ActiveSkillAdd;
      }
      if (other.PassiveSkill1Add != 0) {
        PassiveSkill1Add = other.PassiveSkill1Add;
      }
      if (other.PassiveSkill2Add != 0) {
        PassiveSkill2Add = other.PassiveSkill2Add;
      }
      if (other.PassiveSkill3Add != 0) {
        PassiveSkill3Add = other.PassiveSkill3Add;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UniqueId = input.ReadInt64();
            break;
          }
          case 16: {
            ActiveSkillAdd = input.ReadInt32();
            break;
          }
          case 24: {
            PassiveSkill1Add = input.ReadInt32();
            break;
          }
          case 32: {
            PassiveSkill2Add = input.ReadInt32();
            break;
          }
          case 40: {
            PassiveSkill3Add = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RebornItems : pb::IMessage<RebornItems> {
    private static readonly pb::MessageParser<RebornItems> _parser = new pb::MessageParser<RebornItems>(() => new RebornItems());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RebornItems> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.HangRoleReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RebornItems() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RebornItems(RebornItems other) : this() {
      info_ = other.info_ != null ? other.info_.Clone() : null;
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RebornItems Clone() {
      return new RebornItems(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Centersdk.Protobuf.CardInfo info_;
    /// <summary>
    /// 重生后的卡牌状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Centersdk.Protobuf.CardInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.Item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Centersdk.Protobuf.Item.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.Item> items_ = new pbc::RepeatedField<global::Centersdk.Protobuf.Item>();
    /// <summary>
    /// 返还道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.Item> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RebornItems);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RebornItems other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RebornItems other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          info_ = new global::Centersdk.Protobuf.CardInfo();
        }
        Info.MergeFrom(other.Info);
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Centersdk.Protobuf.CardInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StoneReq : pb::IMessage<StoneReq> {
    private static readonly pb::MessageParser<StoneReq> _parser = new pb::MessageParser<StoneReq>(() => new StoneReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StoneReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.HangRoleReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoneReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoneReq(StoneReq other) : this() {
      uniqueId_ = other.uniqueId_;
      pos_ = other.pos_;
      itemId_ = other.itemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoneReq Clone() {
      return new StoneReq(this);
    }

    /// <summary>Field number for the "unique_id" field.</summary>
    public const int UniqueIdFieldNumber = 1;
    private long uniqueId_;
    /// <summary>
    /// 卡牌唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private int pos_;
    /// <summary>
    /// 魂石位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 3;
    private int itemId_;
    /// <summary>
    /// 魂石id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StoneReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StoneReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueId != other.UniqueId) return false;
      if (Pos != other.Pos) return false;
      if (ItemId != other.ItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueId != 0L) hash ^= UniqueId.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UniqueId);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (ItemId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UniqueId);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StoneReq other) {
      if (other == null) {
        return;
      }
      if (other.UniqueId != 0L) {
        UniqueId = other.UniqueId;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UniqueId = input.ReadInt64();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 24: {
            ItemId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecruitResp : pb::IMessage<RecruitResp> {
    private static readonly pb::MessageParser<RecruitResp> _parser = new pb::MessageParser<RecruitResp>(() => new RecruitResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecruitResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.HangRoleReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecruitResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecruitResp(RecruitResp other) : this() {
      poolId_ = other.poolId_;
      count_ = other.count_;
      cards_ = other.cards_.Clone();
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecruitResp Clone() {
      return new RecruitResp(this);
    }

    /// <summary>Field number for the "pool_id" field.</summary>
    public const int PoolIdFieldNumber = 1;
    private int poolId_;
    /// <summary>
    /// 池子id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PoolId {
      get { return poolId_; }
      set {
        poolId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    /// 抽卡次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.CardInfo> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(26, global::Centersdk.Protobuf.CardInfo.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.CardInfo> cards_ = new pbc::RepeatedField<global::Centersdk.Protobuf.CardInfo>();
    /// <summary>
    /// 抽中卡牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.CardInfo> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.Item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(34, global::Centersdk.Protobuf.Item.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.Item> items_ = new pbc::RepeatedField<global::Centersdk.Protobuf.Item>();
    /// <summary>
    /// 抽中道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.Item> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecruitResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecruitResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PoolId != other.PoolId) return false;
      if (Count != other.Count) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PoolId != 0) hash ^= PoolId.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      hash ^= cards_.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PoolId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PoolId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PoolId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PoolId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecruitResp other) {
      if (other == null) {
        return;
      }
      if (other.PoolId != 0) {
        PoolId = other.PoolId;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      cards_.Add(other.cards_);
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PoolId = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 26: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 34: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
