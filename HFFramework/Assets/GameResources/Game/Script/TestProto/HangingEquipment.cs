// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: hanging-equipment.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Centersdk.Protobuf {

  /// <summary>Holder for reflection information generated from hanging-equipment.proto</summary>
  public static partial class HangingEquipmentReflection {

    #region Descriptor
    /// <summary>File descriptor for hanging-equipment.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HangingEquipmentReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdoYW5naW5nLWVxdWlwbWVudC5wcm90bxISY2VudGVyc2RrLnByb3RvYnVm",
            "IrMBChRIYW5naW5nRXF1aXBtZW50TGlzdBI4CgplcXVpcG1lbnRzGAEgAygL",
            "MiQuY2VudGVyc2RrLnByb3RvYnVmLkhhbmdpbmdFcXVpcG1lbnQSDwoHYmFn",
            "U2l6ZRgCIAEoBRIMCgRjb2RlGAMgASgFEg4KBmNhcmRJZBgEIAEoBRIMCgRj",
            "b3N0GAUgASgFEhIKCmV4dGVuZFNpemUYBiABKAUSEAoIdW5pcXVlSWQYByAB",
            "KAMicgoQSGFuZ2luZ0VxdWlwbWVudBIQCgh1bmlxdWVJZBgBIAEoAxIXCg9l",
            "eHRyYUF0dHJpYnV0ZXMYAiADKAkSEAoIc2tpbGxJZHMYAyADKAUSEgoKdGVt",
            "cGxhdGVJZBgEIAEoBRINCgVsZXZlbBgFIAEoBSJzChdIYW5naW5nVXBkYXRl",
            "RXF1aXBtZW50cxI4CgplcXVpcG1lbnRzGAEgAygLMiQuY2VudGVyc2RrLnBy",
            "b3RvYnVmLkhhbmdpbmdFcXVpcG1lbnQSDAoEY29kZRgCIAEoBRIQCgh1bmlx",
            "dWVJZBgDIAEoA0I2Ch1jb20uaG9vbGFpLmNlbnRlcnNkay5wcm90b2J1ZkIV",
            "SGFuZ2luZ0VxdWlwbWVudFByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.HangingEquipmentList), global::Centersdk.Protobuf.HangingEquipmentList.Parser, new[]{ "Equipments", "BagSize", "Code", "CardId", "Cost", "ExtendSize", "UniqueId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.HangingEquipment), global::Centersdk.Protobuf.HangingEquipment.Parser, new[]{ "UniqueId", "ExtraAttributes", "SkillIds", "TemplateId", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.HangingUpdateEquipments), global::Centersdk.Protobuf.HangingUpdateEquipments.Parser, new[]{ "Equipments", "Code", "UniqueId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 装备列表
  /// </summary>
  public sealed partial class HangingEquipmentList : pb::IMessage<HangingEquipmentList> {
    private static readonly pb::MessageParser<HangingEquipmentList> _parser = new pb::MessageParser<HangingEquipmentList>(() => new HangingEquipmentList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HangingEquipmentList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.HangingEquipmentReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangingEquipmentList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangingEquipmentList(HangingEquipmentList other) : this() {
      equipments_ = other.equipments_.Clone();
      bagSize_ = other.bagSize_;
      code_ = other.code_;
      cardId_ = other.cardId_;
      cost_ = other.cost_;
      extendSize_ = other.extendSize_;
      uniqueId_ = other.uniqueId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangingEquipmentList Clone() {
      return new HangingEquipmentList(this);
    }

    /// <summary>Field number for the "equipments" field.</summary>
    public const int EquipmentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.HangingEquipment> _repeated_equipments_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.HangingEquipment.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.HangingEquipment> equipments_ = new pbc::RepeatedField<global::Centersdk.Protobuf.HangingEquipment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.HangingEquipment> Equipments {
      get { return equipments_; }
    }

    /// <summary>Field number for the "bagSize" field.</summary>
    public const int BagSizeFieldNumber = 2;
    private int bagSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BagSize {
      get { return bagSize_; }
      set {
        bagSize_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 4;
    private int cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 5;
    private int cost_;
    /// <summary>
    /// 扩展背包消耗钻石数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "extendSize" field.</summary>
    public const int ExtendSizeFieldNumber = 6;
    private int extendSize_;
    /// <summary>
    /// 每次扩展背包格子数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtendSize {
      get { return extendSize_; }
      set {
        extendSize_ = value;
      }
    }

    /// <summary>Field number for the "uniqueId" field.</summary>
    public const int UniqueIdFieldNumber = 7;
    private long uniqueId_;
    /// <summary>
    /// 卡牌唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HangingEquipmentList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HangingEquipmentList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!equipments_.Equals(other.equipments_)) return false;
      if (BagSize != other.BagSize) return false;
      if (Code != other.Code) return false;
      if (CardId != other.CardId) return false;
      if (Cost != other.Cost) return false;
      if (ExtendSize != other.ExtendSize) return false;
      if (UniqueId != other.UniqueId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= equipments_.GetHashCode();
      if (BagSize != 0) hash ^= BagSize.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (ExtendSize != 0) hash ^= ExtendSize.GetHashCode();
      if (UniqueId != 0L) hash ^= UniqueId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      equipments_.WriteTo(output, _repeated_equipments_codec);
      if (BagSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BagSize);
      }
      if (Code != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Code);
      }
      if (CardId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CardId);
      }
      if (Cost != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Cost);
      }
      if (ExtendSize != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ExtendSize);
      }
      if (UniqueId != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(UniqueId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += equipments_.CalculateSize(_repeated_equipments_codec);
      if (BagSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BagSize);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (ExtendSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtendSize);
      }
      if (UniqueId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UniqueId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HangingEquipmentList other) {
      if (other == null) {
        return;
      }
      equipments_.Add(other.equipments_);
      if (other.BagSize != 0) {
        BagSize = other.BagSize;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      if (other.ExtendSize != 0) {
        ExtendSize = other.ExtendSize;
      }
      if (other.UniqueId != 0L) {
        UniqueId = other.UniqueId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            equipments_.AddEntriesFrom(input, _repeated_equipments_codec);
            break;
          }
          case 16: {
            BagSize = input.ReadInt32();
            break;
          }
          case 24: {
            Code = input.ReadInt32();
            break;
          }
          case 32: {
            CardId = input.ReadInt32();
            break;
          }
          case 40: {
            Cost = input.ReadInt32();
            break;
          }
          case 48: {
            ExtendSize = input.ReadInt32();
            break;
          }
          case 56: {
            UniqueId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HangingEquipment : pb::IMessage<HangingEquipment> {
    private static readonly pb::MessageParser<HangingEquipment> _parser = new pb::MessageParser<HangingEquipment>(() => new HangingEquipment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HangingEquipment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.HangingEquipmentReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangingEquipment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangingEquipment(HangingEquipment other) : this() {
      uniqueId_ = other.uniqueId_;
      extraAttributes_ = other.extraAttributes_.Clone();
      skillIds_ = other.skillIds_.Clone();
      templateId_ = other.templateId_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangingEquipment Clone() {
      return new HangingEquipment(this);
    }

    /// <summary>Field number for the "uniqueId" field.</summary>
    public const int UniqueIdFieldNumber = 1;
    private long uniqueId_;
    /// <summary>
    /// 装备唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    /// <summary>Field number for the "extraAttributes" field.</summary>
    public const int ExtraAttributesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_extraAttributes_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> extraAttributes_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 额外属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ExtraAttributes {
      get { return extraAttributes_; }
    }

    /// <summary>Field number for the "skillIds" field.</summary>
    public const int SkillIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_skillIds_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> skillIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 解锁技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SkillIds {
      get { return skillIds_; }
    }

    /// <summary>Field number for the "templateId" field.</summary>
    public const int TemplateIdFieldNumber = 4;
    private int templateId_;
    /// <summary>
    /// 装备模板ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TemplateId {
      get { return templateId_; }
      set {
        templateId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    /// <summary>
    /// 强化等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HangingEquipment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HangingEquipment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueId != other.UniqueId) return false;
      if(!extraAttributes_.Equals(other.extraAttributes_)) return false;
      if(!skillIds_.Equals(other.skillIds_)) return false;
      if (TemplateId != other.TemplateId) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueId != 0L) hash ^= UniqueId.GetHashCode();
      hash ^= extraAttributes_.GetHashCode();
      hash ^= skillIds_.GetHashCode();
      if (TemplateId != 0) hash ^= TemplateId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UniqueId);
      }
      extraAttributes_.WriteTo(output, _repeated_extraAttributes_codec);
      skillIds_.WriteTo(output, _repeated_skillIds_codec);
      if (TemplateId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TemplateId);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UniqueId);
      }
      size += extraAttributes_.CalculateSize(_repeated_extraAttributes_codec);
      size += skillIds_.CalculateSize(_repeated_skillIds_codec);
      if (TemplateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TemplateId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HangingEquipment other) {
      if (other == null) {
        return;
      }
      if (other.UniqueId != 0L) {
        UniqueId = other.UniqueId;
      }
      extraAttributes_.Add(other.extraAttributes_);
      skillIds_.Add(other.skillIds_);
      if (other.TemplateId != 0) {
        TemplateId = other.TemplateId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UniqueId = input.ReadInt64();
            break;
          }
          case 18: {
            extraAttributes_.AddEntriesFrom(input, _repeated_extraAttributes_codec);
            break;
          }
          case 26:
          case 24: {
            skillIds_.AddEntriesFrom(input, _repeated_skillIds_codec);
            break;
          }
          case 32: {
            TemplateId = input.ReadInt32();
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HangingUpdateEquipments : pb::IMessage<HangingUpdateEquipments> {
    private static readonly pb::MessageParser<HangingUpdateEquipments> _parser = new pb::MessageParser<HangingUpdateEquipments>(() => new HangingUpdateEquipments());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HangingUpdateEquipments> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.HangingEquipmentReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangingUpdateEquipments() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangingUpdateEquipments(HangingUpdateEquipments other) : this() {
      equipments_ = other.equipments_.Clone();
      code_ = other.code_;
      uniqueId_ = other.uniqueId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangingUpdateEquipments Clone() {
      return new HangingUpdateEquipments(this);
    }

    /// <summary>Field number for the "equipments" field.</summary>
    public const int EquipmentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.HangingEquipment> _repeated_equipments_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.HangingEquipment.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.HangingEquipment> equipments_ = new pbc::RepeatedField<global::Centersdk.Protobuf.HangingEquipment>();
    /// <summary>
    /// 装备信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.HangingEquipment> Equipments {
      get { return equipments_; }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private int code_;
    /// <summary>
    /// 错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "uniqueId" field.</summary>
    public const int UniqueIdFieldNumber = 3;
    private long uniqueId_;
    /// <summary>
    /// 卡牌唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HangingUpdateEquipments);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HangingUpdateEquipments other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!equipments_.Equals(other.equipments_)) return false;
      if (Code != other.Code) return false;
      if (UniqueId != other.UniqueId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= equipments_.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (UniqueId != 0L) hash ^= UniqueId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      equipments_.WriteTo(output, _repeated_equipments_codec);
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Code);
      }
      if (UniqueId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UniqueId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += equipments_.CalculateSize(_repeated_equipments_codec);
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (UniqueId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UniqueId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HangingUpdateEquipments other) {
      if (other == null) {
        return;
      }
      equipments_.Add(other.equipments_);
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.UniqueId != 0L) {
        UniqueId = other.UniqueId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            equipments_.AddEntriesFrom(input, _repeated_equipments_codec);
            break;
          }
          case 16: {
            Code = input.ReadInt32();
            break;
          }
          case 24: {
            UniqueId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
