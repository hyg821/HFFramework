// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: item.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Centersdk.Protobuf {

  /// <summary>Holder for reflection information generated from item.proto</summary>
  public static partial class ItemReflection {

    #region Descriptor
    /// <summary>File descriptor for item.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ItemReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgppdGVtLnByb3RvEhJjZW50ZXJzZGsucHJvdG9idWYaD2VxdWlwbWVudC5w",
            "cm90byJMCgRJdGVtEg8KB2l0ZW1faWQYASABKAUSEgoKaXRlbV9jb3VudBgC",
            "IAEoBRIRCgl1bmlxdWVfaWQYAyABKAMSDAoEYXR0chgEIAEoCSJ0CghJdGVt",
            "TGlzdBIMCgRnb2xkGAEgASgFEhAKCGdhc29saW5lGAIgASgFEgsKA2V4cBgD",
            "IAEoBRITCgt2YXJpYW50R2VuZRgFIAEoBRImCgRpdGVtGAYgAygLMhguY2Vu",
            "dGVyc2RrLnByb3RvYnVmLkl0ZW0ibgoIUGFja0dyaWQSDAoEdHlwZRgBIAEo",
            "BRImCgRpdGVtGAIgASgLMhguY2VudGVyc2RrLnByb3RvYnVmLkl0ZW0SLAoF",
            "ZXF1aXAYAyABKAsyHS5jZW50ZXJzZGsucHJvdG9idWYuRXF1aXBtZW50IlUK",
            "CFVzZXJQYWNrEg8KB3VzZXJfaWQYASABKAMSDAoEa2luZBgCIAEoCRIqCgRk",
            "YXRhGAMgAygLMhwuY2VudGVyc2RrLnByb3RvYnVmLlBhY2tHcmlkIkMKB0dp",
            "dmVSZXESEwoLcmVjZWl2ZXJfaWQYASABKAMSDwoHaXRlbV9pZBgCIAEoBRIS",
            "CgppdGVtX2NvdW50GAMgASgFIlwKCUNvbW1vblJlcRIMCgRraW5kGAEgASgJ",
            "Eg0KBWluZGV4GAIgASgFEg8KB2l0ZW1faWQYAyABKAUSEgoKaXRlbV9jb3Vu",
            "dBgEIAEoBRINCgVraW5kMhgFIAEoCSJVCgpFeHBhbmRSZXNwEgwKBGtpbmQY",
            "ASABKAkSEQoJY29pbl90eXBlGAIgASgFEhIKCmNvaW5fY291bnQYAyABKAMS",
            "EgoKY29pbl90b3RhbBgEIAEoAyJqCghTZWxsUmVzcBIPCgdpdGVtX2lkGAEg",
            "ASgFEhIKCml0ZW1fY291bnQYAiABKAUSEQoJY29pbl90eXBlGAMgASgFEhIK",
            "CmNvaW5fY291bnQYBCABKAMSEgoKY29pbl90b3RhbBgFIAEoAyIvCghKb2lu",
            "UmVzcBIPCgdpdGVtX2lkGAEgASgFEhIKCml0ZW1fY291bnQYAiABKAUiMAoJ",
            "QnJlYWtSZXNwEg8KB2l0ZW1faWQYASADKAUSEgoKaXRlbV9jb3VudBgCIAMo",
            "BSJFChBOZXdXYXJlaG91c2VSZXNwEgwKBGtpbmQYASABKAkSEwoLY29zdF9i",
            "cm9uemUYAiABKAMSDgoGYnJvbnplGAMgASgDImgKDEV4cGFuZFN0YXR1cxIY",
            "ChB1cGdyYWRlX2J1aWxkaW5nGAEgASgIEhMKC3VzZV9kaWFtb25kGAIgASgI",
            "EhQKDGNvc3RfZGlhbW9uZBgDIAEoBRITCgt1bmxvY2tfZ3JpZBgEIAEoBUIq",
            "Ch1jb20uaG9vbGFpLmNlbnRlcnNkay5wcm90b2J1ZkIJSXRlbVByb3RvYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Centersdk.Protobuf.EquipmentReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.Item), global::Centersdk.Protobuf.Item.Parser, new[]{ "ItemId", "ItemCount", "UniqueId", "Attr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.ItemList), global::Centersdk.Protobuf.ItemList.Parser, new[]{ "Gold", "Gasoline", "Exp", "VariantGene", "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.PackGrid), global::Centersdk.Protobuf.PackGrid.Parser, new[]{ "Type", "Item", "Equip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.UserPack), global::Centersdk.Protobuf.UserPack.Parser, new[]{ "UserId", "Kind", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.GiveReq), global::Centersdk.Protobuf.GiveReq.Parser, new[]{ "ReceiverId", "ItemId", "ItemCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.CommonReq), global::Centersdk.Protobuf.CommonReq.Parser, new[]{ "Kind", "Index", "ItemId", "ItemCount", "Kind2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.ExpandResp), global::Centersdk.Protobuf.ExpandResp.Parser, new[]{ "Kind", "CoinType", "CoinCount", "CoinTotal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.SellResp), global::Centersdk.Protobuf.SellResp.Parser, new[]{ "ItemId", "ItemCount", "CoinType", "CoinCount", "CoinTotal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.JoinResp), global::Centersdk.Protobuf.JoinResp.Parser, new[]{ "ItemId", "ItemCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.BreakResp), global::Centersdk.Protobuf.BreakResp.Parser, new[]{ "ItemId", "ItemCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.NewWarehouseResp), global::Centersdk.Protobuf.NewWarehouseResp.Parser, new[]{ "Kind", "CostBronze", "Bronze" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.ExpandStatus), global::Centersdk.Protobuf.ExpandStatus.Parser, new[]{ "UpgradeBuilding", "UseDiamond", "CostDiamond", "UnlockGrid" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Item : pb::IMessage<Item> {
    private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Item> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.ItemReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item(Item other) : this() {
      itemId_ = other.itemId_;
      itemCount_ = other.itemCount_;
      uniqueId_ = other.uniqueId_;
      attr_ = other.attr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item Clone() {
      return new Item(this);
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    /// 道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "item_count" field.</summary>
    public const int ItemCountFieldNumber = 2;
    private int itemCount_;
    /// <summary>
    /// 道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    /// <summary>Field number for the "unique_id" field.</summary>
    public const int UniqueIdFieldNumber = 3;
    private long uniqueId_;
    /// <summary>
    /// 特殊宝石唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    /// <summary>Field number for the "attr" field.</summary>
    public const int AttrFieldNumber = 4;
    private string attr_ = "";
    /// <summary>
    /// 特殊宝石额外属性，例如 "101:10;102:13;"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Attr {
      get { return attr_; }
      set {
        attr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Item);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Item other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (ItemCount != other.ItemCount) return false;
      if (UniqueId != other.UniqueId) return false;
      if (Attr != other.Attr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (ItemCount != 0) hash ^= ItemCount.GetHashCode();
      if (UniqueId != 0L) hash ^= UniqueId.GetHashCode();
      if (Attr.Length != 0) hash ^= Attr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemCount);
      }
      if (UniqueId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UniqueId);
      }
      if (Attr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Attr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCount);
      }
      if (UniqueId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UniqueId);
      }
      if (Attr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Attr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Item other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.ItemCount != 0) {
        ItemCount = other.ItemCount;
      }
      if (other.UniqueId != 0L) {
        UniqueId = other.UniqueId;
      }
      if (other.Attr.Length != 0) {
        Attr = other.Attr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemCount = input.ReadInt32();
            break;
          }
          case 24: {
            UniqueId = input.ReadInt64();
            break;
          }
          case 34: {
            Attr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemList : pb::IMessage<ItemList> {
    private static readonly pb::MessageParser<ItemList> _parser = new pb::MessageParser<ItemList>(() => new ItemList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.ItemReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemList(ItemList other) : this() {
      gold_ = other.gold_;
      gasoline_ = other.gasoline_;
      exp_ = other.exp_;
      variantGene_ = other.variantGene_;
      item_ = other.item_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemList Clone() {
      return new ItemList(this);
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 1;
    private int gold_;
    /// <summary>
    /// 货币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "gasoline" field.</summary>
    public const int GasolineFieldNumber = 2;
    private int gasoline_;
    /// <summary>
    /// 汽油
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gasoline {
      get { return gasoline_; }
      set {
        gasoline_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 3;
    private int exp_;
    /// <summary>
    /// 经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "variantGene" field.</summary>
    public const int VariantGeneFieldNumber = 5;
    private int variantGene_;
    /// <summary>
    /// 变异基因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VariantGene {
      get { return variantGene_; }
      set {
        variantGene_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.Item> _repeated_item_codec
        = pb::FieldCodec.ForMessage(50, global::Centersdk.Protobuf.Item.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.Item> item_ = new pbc::RepeatedField<global::Centersdk.Protobuf.Item>();
    /// <summary>
    /// 道具列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.Item> Item {
      get { return item_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gold != other.Gold) return false;
      if (Gasoline != other.Gasoline) return false;
      if (Exp != other.Exp) return false;
      if (VariantGene != other.VariantGene) return false;
      if(!item_.Equals(other.item_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (Gasoline != 0) hash ^= Gasoline.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (VariantGene != 0) hash ^= VariantGene.GetHashCode();
      hash ^= item_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Gold != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Gold);
      }
      if (Gasoline != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Gasoline);
      }
      if (Exp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Exp);
      }
      if (VariantGene != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(VariantGene);
      }
      item_.WriteTo(output, _repeated_item_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (Gasoline != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gasoline);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (VariantGene != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VariantGene);
      }
      size += item_.CalculateSize(_repeated_item_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemList other) {
      if (other == null) {
        return;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.Gasoline != 0) {
        Gasoline = other.Gasoline;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.VariantGene != 0) {
        VariantGene = other.VariantGene;
      }
      item_.Add(other.item_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Gold = input.ReadInt32();
            break;
          }
          case 16: {
            Gasoline = input.ReadInt32();
            break;
          }
          case 24: {
            Exp = input.ReadInt32();
            break;
          }
          case 40: {
            VariantGene = input.ReadInt32();
            break;
          }
          case 50: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PackGrid : pb::IMessage<PackGrid> {
    private static readonly pb::MessageParser<PackGrid> _parser = new pb::MessageParser<PackGrid>(() => new PackGrid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PackGrid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.ItemReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackGrid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackGrid(PackGrid other) : this() {
      type_ = other.type_;
      item_ = other.item_ != null ? other.item_.Clone() : null;
      equip_ = other.equip_ != null ? other.equip_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackGrid Clone() {
      return new PackGrid(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    /// 格子类型，1 = 道具，2 = 装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 2;
    private global::Centersdk.Protobuf.Item item_;
    /// <summary>
    /// 道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Centersdk.Protobuf.Item Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "equip" field.</summary>
    public const int EquipFieldNumber = 3;
    private global::Centersdk.Protobuf.Equipment equip_;
    /// <summary>
    /// 装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Centersdk.Protobuf.Equipment Equip {
      get { return equip_; }
      set {
        equip_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PackGrid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PackGrid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Item, other.Item)) return false;
      if (!object.Equals(Equip, other.Equip)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (equip_ != null) hash ^= Equip.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (item_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Item);
      }
      if (equip_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Equip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (equip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equip);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PackGrid other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          item_ = new global::Centersdk.Protobuf.Item();
        }
        Item.MergeFrom(other.Item);
      }
      if (other.equip_ != null) {
        if (equip_ == null) {
          equip_ = new global::Centersdk.Protobuf.Equipment();
        }
        Equip.MergeFrom(other.Equip);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            if (item_ == null) {
              item_ = new global::Centersdk.Protobuf.Item();
            }
            input.ReadMessage(item_);
            break;
          }
          case 26: {
            if (equip_ == null) {
              equip_ = new global::Centersdk.Protobuf.Equipment();
            }
            input.ReadMessage(equip_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserPack : pb::IMessage<UserPack> {
    private static readonly pb::MessageParser<UserPack> _parser = new pb::MessageParser<UserPack>(() => new UserPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.ItemReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPack(UserPack other) : this() {
      userId_ = other.userId_;
      kind_ = other.kind_;
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPack Clone() {
      return new UserPack(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 2;
    private string kind_ = "";
    /// <summary>
    /// 背包分类
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kind {
      get { return kind_; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.PackGrid> _repeated_data_codec
        = pb::FieldCodec.ForMessage(26, global::Centersdk.Protobuf.PackGrid.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.PackGrid> data_ = new pbc::RepeatedField<global::Centersdk.Protobuf.PackGrid>();
    /// <summary>
    /// 背包数据，每个格子一条数据，空格子按道具算
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.PackGrid> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Kind != other.Kind) return false;
      if(!data_.Equals(other.data_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Kind.Length != 0) hash ^= Kind.GetHashCode();
      hash ^= data_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (Kind.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Kind);
      }
      data_.WriteTo(output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Kind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserPack other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Kind.Length != 0) {
        Kind = other.Kind;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            Kind = input.ReadString();
            break;
          }
          case 26: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 在邮件界面操作
  /// </summary>
  public sealed partial class GiveReq : pb::IMessage<GiveReq> {
    private static readonly pb::MessageParser<GiveReq> _parser = new pb::MessageParser<GiveReq>(() => new GiveReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GiveReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.ItemReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiveReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiveReq(GiveReq other) : this() {
      receiverId_ = other.receiverId_;
      itemId_ = other.itemId_;
      itemCount_ = other.itemCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiveReq Clone() {
      return new GiveReq(this);
    }

    /// <summary>Field number for the "receiver_id" field.</summary>
    public const int ReceiverIdFieldNumber = 1;
    private long receiverId_;
    /// <summary>
    /// 接受者id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReceiverId {
      get { return receiverId_; }
      set {
        receiverId_ = value;
      }
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private int itemId_;
    /// <summary>
    /// 道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "item_count" field.</summary>
    public const int ItemCountFieldNumber = 3;
    private int itemCount_;
    /// <summary>
    /// 道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GiveReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GiveReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReceiverId != other.ReceiverId) return false;
      if (ItemId != other.ItemId) return false;
      if (ItemCount != other.ItemCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReceiverId != 0L) hash ^= ReceiverId.GetHashCode();
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (ItemCount != 0) hash ^= ItemCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReceiverId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReceiverId);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemId);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReceiverId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReceiverId);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GiveReq other) {
      if (other == null) {
        return;
      }
      if (other.ReceiverId != 0L) {
        ReceiverId = other.ReceiverId;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.ItemCount != 0) {
        ItemCount = other.ItemCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReceiverId = input.ReadInt64();
            break;
          }
          case 16: {
            ItemId = input.ReadInt32();
            break;
          }
          case 24: {
            ItemCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommonReq : pb::IMessage<CommonReq> {
    private static readonly pb::MessageParser<CommonReq> _parser = new pb::MessageParser<CommonReq>(() => new CommonReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.ItemReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonReq(CommonReq other) : this() {
      kind_ = other.kind_;
      index_ = other.index_;
      itemId_ = other.itemId_;
      itemCount_ = other.itemCount_;
      kind2_ = other.kind2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonReq Clone() {
      return new CommonReq(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private string kind_ = "";
    /// <summary>
    /// 背包种类
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kind {
      get { return kind_; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    /// <summary>
    /// 背包格子索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 3;
    private int itemId_;
    /// <summary>
    /// 道具ID，如果有前两个字段，这个字段不生效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "item_count" field.</summary>
    public const int ItemCountFieldNumber = 4;
    private int itemCount_;
    /// <summary>
    /// 道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    /// <summary>Field number for the "kind2" field.</summary>
    public const int Kind2FieldNumber = 5;
    private string kind2_ = "";
    /// <summary>
    /// 同时涉及背包仓库时候才用到，作为目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kind2 {
      get { return kind2_; }
      set {
        kind2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (Index != other.Index) return false;
      if (ItemId != other.ItemId) return false;
      if (ItemCount != other.ItemCount) return false;
      if (Kind2 != other.Kind2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Kind.Length != 0) hash ^= Kind.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (ItemCount != 0) hash ^= ItemCount.GetHashCode();
      if (Kind2.Length != 0) hash ^= Kind2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Kind.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Kind);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (ItemId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemId);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ItemCount);
      }
      if (Kind2.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Kind2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Kind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCount);
      }
      if (Kind2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonReq other) {
      if (other == null) {
        return;
      }
      if (other.Kind.Length != 0) {
        Kind = other.Kind;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.ItemCount != 0) {
        ItemCount = other.ItemCount;
      }
      if (other.Kind2.Length != 0) {
        Kind2 = other.Kind2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Kind = input.ReadString();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
          case 24: {
            ItemId = input.ReadInt32();
            break;
          }
          case 32: {
            ItemCount = input.ReadInt32();
            break;
          }
          case 42: {
            Kind2 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExpandResp : pb::IMessage<ExpandResp> {
    private static readonly pb::MessageParser<ExpandResp> _parser = new pb::MessageParser<ExpandResp>(() => new ExpandResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExpandResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.ItemReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpandResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpandResp(ExpandResp other) : this() {
      kind_ = other.kind_;
      coinType_ = other.coinType_;
      coinCount_ = other.coinCount_;
      coinTotal_ = other.coinTotal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpandResp Clone() {
      return new ExpandResp(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private string kind_ = "";
    /// <summary>
    /// 背包种类
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kind {
      get { return kind_; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coin_type" field.</summary>
    public const int CoinTypeFieldNumber = 2;
    private int coinType_;
    /// <summary>
    /// 消耗货币类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CoinType {
      get { return coinType_; }
      set {
        coinType_ = value;
      }
    }

    /// <summary>Field number for the "coin_count" field.</summary>
    public const int CoinCountFieldNumber = 3;
    private long coinCount_;
    /// <summary>
    /// 消耗货币数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CoinCount {
      get { return coinCount_; }
      set {
        coinCount_ = value;
      }
    }

    /// <summary>Field number for the "coin_total" field.</summary>
    public const int CoinTotalFieldNumber = 4;
    private long coinTotal_;
    /// <summary>
    /// 当前货币持有总量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CoinTotal {
      get { return coinTotal_; }
      set {
        coinTotal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExpandResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExpandResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (CoinType != other.CoinType) return false;
      if (CoinCount != other.CoinCount) return false;
      if (CoinTotal != other.CoinTotal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Kind.Length != 0) hash ^= Kind.GetHashCode();
      if (CoinType != 0) hash ^= CoinType.GetHashCode();
      if (CoinCount != 0L) hash ^= CoinCount.GetHashCode();
      if (CoinTotal != 0L) hash ^= CoinTotal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Kind.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Kind);
      }
      if (CoinType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CoinType);
      }
      if (CoinCount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CoinCount);
      }
      if (CoinTotal != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CoinTotal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Kind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
      }
      if (CoinType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CoinType);
      }
      if (CoinCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CoinCount);
      }
      if (CoinTotal != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CoinTotal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExpandResp other) {
      if (other == null) {
        return;
      }
      if (other.Kind.Length != 0) {
        Kind = other.Kind;
      }
      if (other.CoinType != 0) {
        CoinType = other.CoinType;
      }
      if (other.CoinCount != 0L) {
        CoinCount = other.CoinCount;
      }
      if (other.CoinTotal != 0L) {
        CoinTotal = other.CoinTotal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Kind = input.ReadString();
            break;
          }
          case 16: {
            CoinType = input.ReadInt32();
            break;
          }
          case 24: {
            CoinCount = input.ReadInt64();
            break;
          }
          case 32: {
            CoinTotal = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SellResp : pb::IMessage<SellResp> {
    private static readonly pb::MessageParser<SellResp> _parser = new pb::MessageParser<SellResp>(() => new SellResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.ItemReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellResp(SellResp other) : this() {
      itemId_ = other.itemId_;
      itemCount_ = other.itemCount_;
      coinType_ = other.coinType_;
      coinCount_ = other.coinCount_;
      coinTotal_ = other.coinTotal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellResp Clone() {
      return new SellResp(this);
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    /// 道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "item_count" field.</summary>
    public const int ItemCountFieldNumber = 2;
    private int itemCount_;
    /// <summary>
    /// 道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    /// <summary>Field number for the "coin_type" field.</summary>
    public const int CoinTypeFieldNumber = 3;
    private int coinType_;
    /// <summary>
    /// 获得货币类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CoinType {
      get { return coinType_; }
      set {
        coinType_ = value;
      }
    }

    /// <summary>Field number for the "coin_count" field.</summary>
    public const int CoinCountFieldNumber = 4;
    private long coinCount_;
    /// <summary>
    /// 获得货币数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CoinCount {
      get { return coinCount_; }
      set {
        coinCount_ = value;
      }
    }

    /// <summary>Field number for the "coin_total" field.</summary>
    public const int CoinTotalFieldNumber = 5;
    private long coinTotal_;
    /// <summary>
    /// 当前货币持有总量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CoinTotal {
      get { return coinTotal_; }
      set {
        coinTotal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (ItemCount != other.ItemCount) return false;
      if (CoinType != other.CoinType) return false;
      if (CoinCount != other.CoinCount) return false;
      if (CoinTotal != other.CoinTotal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (ItemCount != 0) hash ^= ItemCount.GetHashCode();
      if (CoinType != 0) hash ^= CoinType.GetHashCode();
      if (CoinCount != 0L) hash ^= CoinCount.GetHashCode();
      if (CoinTotal != 0L) hash ^= CoinTotal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemCount);
      }
      if (CoinType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CoinType);
      }
      if (CoinCount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CoinCount);
      }
      if (CoinTotal != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CoinTotal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCount);
      }
      if (CoinType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CoinType);
      }
      if (CoinCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CoinCount);
      }
      if (CoinTotal != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CoinTotal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellResp other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.ItemCount != 0) {
        ItemCount = other.ItemCount;
      }
      if (other.CoinType != 0) {
        CoinType = other.CoinType;
      }
      if (other.CoinCount != 0L) {
        CoinCount = other.CoinCount;
      }
      if (other.CoinTotal != 0L) {
        CoinTotal = other.CoinTotal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemCount = input.ReadInt32();
            break;
          }
          case 24: {
            CoinType = input.ReadInt32();
            break;
          }
          case 32: {
            CoinCount = input.ReadInt64();
            break;
          }
          case 40: {
            CoinTotal = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinResp : pb::IMessage<JoinResp> {
    private static readonly pb::MessageParser<JoinResp> _parser = new pb::MessageParser<JoinResp>(() => new JoinResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.ItemReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinResp(JoinResp other) : this() {
      itemId_ = other.itemId_;
      itemCount_ = other.itemCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinResp Clone() {
      return new JoinResp(this);
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    /// 合成后的道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "item_count" field.</summary>
    public const int ItemCountFieldNumber = 2;
    private int itemCount_;
    /// <summary>
    /// 合成道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (ItemCount != other.ItemCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (ItemCount != 0) hash ^= ItemCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinResp other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.ItemCount != 0) {
        ItemCount = other.ItemCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BreakResp : pb::IMessage<BreakResp> {
    private static readonly pb::MessageParser<BreakResp> _parser = new pb::MessageParser<BreakResp>(() => new BreakResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BreakResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.ItemReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreakResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreakResp(BreakResp other) : this() {
      itemId_ = other.itemId_.Clone();
      itemCount_ = other.itemCount_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreakResp Clone() {
      return new BreakResp(this);
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_itemId_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> itemId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 分解获得的道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ItemId {
      get { return itemId_; }
    }

    /// <summary>Field number for the "item_count" field.</summary>
    public const int ItemCountFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_itemCount_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> itemCount_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 分解获得的道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ItemCount {
      get { return itemCount_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BreakResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BreakResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!itemId_.Equals(other.itemId_)) return false;
      if(!itemCount_.Equals(other.itemCount_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= itemId_.GetHashCode();
      hash ^= itemCount_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      itemId_.WriteTo(output, _repeated_itemId_codec);
      itemCount_.WriteTo(output, _repeated_itemCount_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemId_.CalculateSize(_repeated_itemId_codec);
      size += itemCount_.CalculateSize(_repeated_itemCount_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BreakResp other) {
      if (other == null) {
        return;
      }
      itemId_.Add(other.itemId_);
      itemCount_.Add(other.itemCount_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            itemId_.AddEntriesFrom(input, _repeated_itemId_codec);
            break;
          }
          case 18:
          case 16: {
            itemCount_.AddEntriesFrom(input, _repeated_itemCount_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewWarehouseResp : pb::IMessage<NewWarehouseResp> {
    private static readonly pb::MessageParser<NewWarehouseResp> _parser = new pb::MessageParser<NewWarehouseResp>(() => new NewWarehouseResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewWarehouseResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.ItemReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewWarehouseResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewWarehouseResp(NewWarehouseResp other) : this() {
      kind_ = other.kind_;
      costBronze_ = other.costBronze_;
      bronze_ = other.bronze_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewWarehouseResp Clone() {
      return new NewWarehouseResp(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private string kind_ = "";
    /// <summary>
    /// 仓库分类
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kind {
      get { return kind_; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cost_bronze" field.</summary>
    public const int CostBronzeFieldNumber = 2;
    private long costBronze_;
    /// <summary>
    /// 消耗铜币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CostBronze {
      get { return costBronze_; }
      set {
        costBronze_ = value;
      }
    }

    /// <summary>Field number for the "bronze" field.</summary>
    public const int BronzeFieldNumber = 3;
    private long bronze_;
    /// <summary>
    /// 当前铜币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Bronze {
      get { return bronze_; }
      set {
        bronze_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewWarehouseResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewWarehouseResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (CostBronze != other.CostBronze) return false;
      if (Bronze != other.Bronze) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Kind.Length != 0) hash ^= Kind.GetHashCode();
      if (CostBronze != 0L) hash ^= CostBronze.GetHashCode();
      if (Bronze != 0L) hash ^= Bronze.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Kind.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Kind);
      }
      if (CostBronze != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CostBronze);
      }
      if (Bronze != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Bronze);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Kind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
      }
      if (CostBronze != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CostBronze);
      }
      if (Bronze != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Bronze);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewWarehouseResp other) {
      if (other == null) {
        return;
      }
      if (other.Kind.Length != 0) {
        Kind = other.Kind;
      }
      if (other.CostBronze != 0L) {
        CostBronze = other.CostBronze;
      }
      if (other.Bronze != 0L) {
        Bronze = other.Bronze;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Kind = input.ReadString();
            break;
          }
          case 16: {
            CostBronze = input.ReadInt64();
            break;
          }
          case 24: {
            Bronze = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExpandStatus : pb::IMessage<ExpandStatus> {
    private static readonly pb::MessageParser<ExpandStatus> _parser = new pb::MessageParser<ExpandStatus>(() => new ExpandStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExpandStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.ItemReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpandStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpandStatus(ExpandStatus other) : this() {
      upgradeBuilding_ = other.upgradeBuilding_;
      useDiamond_ = other.useDiamond_;
      costDiamond_ = other.costDiamond_;
      unlockGrid_ = other.unlockGrid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpandStatus Clone() {
      return new ExpandStatus(this);
    }

    /// <summary>Field number for the "upgrade_building" field.</summary>
    public const int UpgradeBuildingFieldNumber = 1;
    private bool upgradeBuilding_;
    /// <summary>
    /// 是否可以升级建筑
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpgradeBuilding {
      get { return upgradeBuilding_; }
      set {
        upgradeBuilding_ = value;
      }
    }

    /// <summary>Field number for the "use_diamond" field.</summary>
    public const int UseDiamondFieldNumber = 2;
    private bool useDiamond_;
    /// <summary>
    /// 是否可以使用钻石解锁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseDiamond {
      get { return useDiamond_; }
      set {
        useDiamond_ = value;
      }
    }

    /// <summary>Field number for the "cost_diamond" field.</summary>
    public const int CostDiamondFieldNumber = 3;
    private int costDiamond_;
    /// <summary>
    /// 消耗钻石数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostDiamond {
      get { return costDiamond_; }
      set {
        costDiamond_ = value;
      }
    }

    /// <summary>Field number for the "unlock_grid" field.</summary>
    public const int UnlockGridFieldNumber = 4;
    private int unlockGrid_;
    /// <summary>
    /// 钻石解锁格子数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnlockGrid {
      get { return unlockGrid_; }
      set {
        unlockGrid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExpandStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExpandStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UpgradeBuilding != other.UpgradeBuilding) return false;
      if (UseDiamond != other.UseDiamond) return false;
      if (CostDiamond != other.CostDiamond) return false;
      if (UnlockGrid != other.UnlockGrid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UpgradeBuilding != false) hash ^= UpgradeBuilding.GetHashCode();
      if (UseDiamond != false) hash ^= UseDiamond.GetHashCode();
      if (CostDiamond != 0) hash ^= CostDiamond.GetHashCode();
      if (UnlockGrid != 0) hash ^= UnlockGrid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UpgradeBuilding != false) {
        output.WriteRawTag(8);
        output.WriteBool(UpgradeBuilding);
      }
      if (UseDiamond != false) {
        output.WriteRawTag(16);
        output.WriteBool(UseDiamond);
      }
      if (CostDiamond != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CostDiamond);
      }
      if (UnlockGrid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UnlockGrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UpgradeBuilding != false) {
        size += 1 + 1;
      }
      if (UseDiamond != false) {
        size += 1 + 1;
      }
      if (CostDiamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostDiamond);
      }
      if (UnlockGrid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnlockGrid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExpandStatus other) {
      if (other == null) {
        return;
      }
      if (other.UpgradeBuilding != false) {
        UpgradeBuilding = other.UpgradeBuilding;
      }
      if (other.UseDiamond != false) {
        UseDiamond = other.UseDiamond;
      }
      if (other.CostDiamond != 0) {
        CostDiamond = other.CostDiamond;
      }
      if (other.UnlockGrid != 0) {
        UnlockGrid = other.UnlockGrid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UpgradeBuilding = input.ReadBool();
            break;
          }
          case 16: {
            UseDiamond = input.ReadBool();
            break;
          }
          case 24: {
            CostDiamond = input.ReadInt32();
            break;
          }
          case 32: {
            UnlockGrid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
