// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: lobby_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Lobbyservice.Protobuf {

  /// <summary>Holder for reflection information generated from lobby_service.proto</summary>
  public static partial class LobbyServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for lobby_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LobbyServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNsb2JieV9zZXJ2aWNlLnByb3RvEhVsb2JieXNlcnZpY2UucHJvdG9idWYi",
            "ogIKDUxvZ2luUmVzcG9uc2USDAoEY29kZRgBIAEoBRIMCgRnb2xkGAIgASgD",
            "Eg4KBnNpbHZlchgDIAEoAxIOCgZicm9uemUYBCABKAMSDwoHZGlhbW9uZBgF",
            "IAEoAxIVCg11cGdyYWRlX3BvaW50GAYgASgDEg8KB2d1aWxkSWQYByABKAUS",
            "EwoLY2hlY2tfcG9pbnQYCCABKAUSDgoGcm9sZUlkGAkgASgDEgwKBG5hbWUY",
            "CiABKAkSDQoFbGV2ZWwYCyABKAUSCwoDc2V4GAwgASgFEhEKCWhlYWRJbWdJ",
            "ZBgNIAEoBRILCgNnYXMYDiABKAMSDQoFcG93ZXIYDyABKAMSCwoDZXhwGBAg",
            "ASgDEhEKCWlzTmV3VXNlchgRIAEoCEIyCh1jb20uaG9vbGFpLmNvbW1vbmFw",
            "cC5wcm90b2J1ZkIRTG9iYnlTZXJ2aWNlUHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Lobbyservice.Protobuf.LoginResponse), global::Lobbyservice.Protobuf.LoginResponse.Parser, new[]{ "Code", "Gold", "Silver", "Bronze", "Diamond", "UpgradePoint", "GuildId", "CheckPoint", "RoleId", "Name", "Level", "Sex", "HeadImgId", "Gas", "Power", "Exp", "IsNewUser" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///用户登录响应信息
  /// </summary>
  public sealed partial class LoginResponse : pb::IMessage<LoginResponse> {
    private static readonly pb::MessageParser<LoginResponse> _parser = new pb::MessageParser<LoginResponse>(() => new LoginResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lobbyservice.Protobuf.LobbyServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse(LoginResponse other) : this() {
      code_ = other.code_;
      gold_ = other.gold_;
      silver_ = other.silver_;
      bronze_ = other.bronze_;
      diamond_ = other.diamond_;
      upgradePoint_ = other.upgradePoint_;
      guildId_ = other.guildId_;
      checkPoint_ = other.checkPoint_;
      roleId_ = other.roleId_;
      name_ = other.name_;
      level_ = other.level_;
      sex_ = other.sex_;
      headImgId_ = other.headImgId_;
      gas_ = other.gas_;
      power_ = other.power_;
      exp_ = other.exp_;
      isNewUser_ = other.isNewUser_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse Clone() {
      return new LoginResponse(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    /// 登录码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 2;
    private long gold_;
    /// <summary>
    /// 金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "silver" field.</summary>
    public const int SilverFieldNumber = 3;
    private long silver_;
    /// <summary>
    /// 银币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Silver {
      get { return silver_; }
      set {
        silver_ = value;
      }
    }

    /// <summary>Field number for the "bronze" field.</summary>
    public const int BronzeFieldNumber = 4;
    private long bronze_;
    /// <summary>
    /// 铜币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Bronze {
      get { return bronze_; }
      set {
        bronze_ = value;
      }
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int DiamondFieldNumber = 5;
    private long diamond_;
    /// <summary>
    /// 钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "upgrade_point" field.</summary>
    public const int UpgradePointFieldNumber = 6;
    private long upgradePoint_;
    /// <summary>
    /// 升级点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpgradePoint {
      get { return upgradePoint_; }
      set {
        upgradePoint_ = value;
      }
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 7;
    private int guildId_;
    /// <summary>
    /// 公会id。大于0为已加入公会
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "check_point" field.</summary>
    public const int CheckPointFieldNumber = 8;
    private int checkPoint_;
    /// <summary>
    /// 当前关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheckPoint {
      get { return checkPoint_; }
      set {
        checkPoint_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 9;
    private long roleId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 10;
    private string name_ = "";
    /// <summary>
    /// 角色名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 11;
    private int level_;
    /// <summary>
    /// 角色等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 12;
    private int sex_;
    /// <summary>
    /// 性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "headImgId" field.</summary>
    public const int HeadImgIdFieldNumber = 13;
    private int headImgId_;
    /// <summary>
    /// 头像ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadImgId {
      get { return headImgId_; }
      set {
        headImgId_ = value;
      }
    }

    /// <summary>Field number for the "gas" field.</summary>
    public const int GasFieldNumber = 14;
    private long gas_;
    /// <summary>
    /// 汽油
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gas {
      get { return gas_; }
      set {
        gas_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 15;
    private long power_;
    /// <summary>
    /// 战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 16;
    private long exp_;
    /// <summary>
    /// 当前经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "isNewUser" field.</summary>
    public const int IsNewUserFieldNumber = 17;
    private bool isNewUser_;
    /// <summary>
    /// 是否新用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNewUser {
      get { return isNewUser_; }
      set {
        isNewUser_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Gold != other.Gold) return false;
      if (Silver != other.Silver) return false;
      if (Bronze != other.Bronze) return false;
      if (Diamond != other.Diamond) return false;
      if (UpgradePoint != other.UpgradePoint) return false;
      if (GuildId != other.GuildId) return false;
      if (CheckPoint != other.CheckPoint) return false;
      if (RoleId != other.RoleId) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (Sex != other.Sex) return false;
      if (HeadImgId != other.HeadImgId) return false;
      if (Gas != other.Gas) return false;
      if (Power != other.Power) return false;
      if (Exp != other.Exp) return false;
      if (IsNewUser != other.IsNewUser) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Gold != 0L) hash ^= Gold.GetHashCode();
      if (Silver != 0L) hash ^= Silver.GetHashCode();
      if (Bronze != 0L) hash ^= Bronze.GetHashCode();
      if (Diamond != 0L) hash ^= Diamond.GetHashCode();
      if (UpgradePoint != 0L) hash ^= UpgradePoint.GetHashCode();
      if (GuildId != 0) hash ^= GuildId.GetHashCode();
      if (CheckPoint != 0) hash ^= CheckPoint.GetHashCode();
      if (RoleId != 0L) hash ^= RoleId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (HeadImgId != 0) hash ^= HeadImgId.GetHashCode();
      if (Gas != 0L) hash ^= Gas.GetHashCode();
      if (Power != 0L) hash ^= Power.GetHashCode();
      if (Exp != 0L) hash ^= Exp.GetHashCode();
      if (IsNewUser != false) hash ^= IsNewUser.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Gold != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Gold);
      }
      if (Silver != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Silver);
      }
      if (Bronze != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Bronze);
      }
      if (Diamond != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Diamond);
      }
      if (UpgradePoint != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(UpgradePoint);
      }
      if (GuildId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GuildId);
      }
      if (CheckPoint != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CheckPoint);
      }
      if (RoleId != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Level);
      }
      if (Sex != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Sex);
      }
      if (HeadImgId != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(HeadImgId);
      }
      if (Gas != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(Gas);
      }
      if (Power != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(Power);
      }
      if (Exp != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(Exp);
      }
      if (IsNewUser != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsNewUser);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (Silver != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Silver);
      }
      if (Bronze != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Bronze);
      }
      if (Diamond != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Diamond);
      }
      if (UpgradePoint != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpgradePoint);
      }
      if (GuildId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildId);
      }
      if (CheckPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheckPoint);
      }
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (HeadImgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadImgId);
      }
      if (Gas != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gas);
      }
      if (Power != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Power);
      }
      if (Exp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Exp);
      }
      if (IsNewUser != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResponse other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Gold != 0L) {
        Gold = other.Gold;
      }
      if (other.Silver != 0L) {
        Silver = other.Silver;
      }
      if (other.Bronze != 0L) {
        Bronze = other.Bronze;
      }
      if (other.Diamond != 0L) {
        Diamond = other.Diamond;
      }
      if (other.UpgradePoint != 0L) {
        UpgradePoint = other.UpgradePoint;
      }
      if (other.GuildId != 0) {
        GuildId = other.GuildId;
      }
      if (other.CheckPoint != 0) {
        CheckPoint = other.CheckPoint;
      }
      if (other.RoleId != 0L) {
        RoleId = other.RoleId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.HeadImgId != 0) {
        HeadImgId = other.HeadImgId;
      }
      if (other.Gas != 0L) {
        Gas = other.Gas;
      }
      if (other.Power != 0L) {
        Power = other.Power;
      }
      if (other.Exp != 0L) {
        Exp = other.Exp;
      }
      if (other.IsNewUser != false) {
        IsNewUser = other.IsNewUser;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Gold = input.ReadInt64();
            break;
          }
          case 24: {
            Silver = input.ReadInt64();
            break;
          }
          case 32: {
            Bronze = input.ReadInt64();
            break;
          }
          case 40: {
            Diamond = input.ReadInt64();
            break;
          }
          case 48: {
            UpgradePoint = input.ReadInt64();
            break;
          }
          case 56: {
            GuildId = input.ReadInt32();
            break;
          }
          case 64: {
            CheckPoint = input.ReadInt32();
            break;
          }
          case 72: {
            RoleId = input.ReadInt64();
            break;
          }
          case 82: {
            Name = input.ReadString();
            break;
          }
          case 88: {
            Level = input.ReadInt32();
            break;
          }
          case 96: {
            Sex = input.ReadInt32();
            break;
          }
          case 104: {
            HeadImgId = input.ReadInt32();
            break;
          }
          case 112: {
            Gas = input.ReadInt64();
            break;
          }
          case 120: {
            Power = input.ReadInt64();
            break;
          }
          case 128: {
            Exp = input.ReadInt64();
            break;
          }
          case 136: {
            IsNewUser = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
