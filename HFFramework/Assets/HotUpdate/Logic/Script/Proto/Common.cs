// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: common.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Centersdk.Protobuf {

  /// <summary>Holder for reflection information generated from common.proto</summary>
  public static partial class CommonReflection {

    #region Descriptor
    /// <summary>File descriptor for common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxjb21tb24ucHJvdG8SEmNlbnRlcnNkay5wcm90b2J1ZhoNcGh6cm9vbS5w",
            "cm90byKAAQoLUGFyYW1zQXJyYXkSKgoGcGFyYW1zGAEgAygLMhouY2VudGVy",
            "c2RrLnByb3RvYnVmLlBhcmFtcxIpCgVwYXJhbRgCIAEoCzIaLmNlbnRlcnNk",
            "ay5wcm90b2J1Zi5QYXJhbXMSDAoEY29kZRgDIAEoBRIMCgR0eXBlGAQgASgF",
            "IpgDCgZQYXJhbXMSDgoGdXNlcklkGAEgASgDEg4KBnJvbGVJZBgCIAEoAxIK",
            "CgJpZBgDIAEoBRIMCgRjb2RlGAQgASgFEg0KBWNvdW50GAUgASgFEg4KBmFt",
            "b3VudBgGIAEoAxINCgV2YWx1ZRgHIAEoBRINCgVpbmRleBgIIAEoBRIOCgZz",
            "dGF0dXMYCSABKAUSDwoHc3RhdHVzQhgKIAEoCBIMCgR0eXBlGAsgASgFEg4K",
            "Bml0ZW1JZBgMIAEoBRIMCgRnb2xkGA0gASgFEgwKBHRpbWUYDiABKAMSDAoE",
            "dGV4dBgPIAEoCRIPCgdjb250ZW50GBAgASgJEg8KB3VzZXJJZHMYESADKAMS",
            "DwoHaW50VmFscxgSIAMoBRIQCghsb25nVmFscxgTIAMoAxIPCgdzdHJWYWxz",
            "GBQgAygJEhEKCWZsb2F0VmFscxgVIAMoAhITCgtjb21tdW5pdHlJZBgWIAEo",
            "BRIMCgRpc0FBGBcgASgIEg0KBWlzRFlKGBggASgIEhMKC3F5cWNyZWF0ZUlk",
            "GBkgASgJIuQCCg1QYXJhbXNNYUppYW5nEg4KBnVzZXJJZBgBIAEoAxIOCgZy",
            "b2xlSWQYAiABKAMSCgoCaWQYAyABKAUSDAoEY29kZRgEIAEoBRINCgVjb3Vu",
            "dBgFIAEoBRIOCgZhbW91bnQYBiABKAMSDQoFdmFsdWUYByABKAUSDQoFaW5k",
            "ZXgYCCABKAUSDgoGc3RhdHVzGAkgASgFEg8KB3N0YXR1c0IYCiABKAgSDAoE",
            "dHlwZRgLIAEoBRIOCgZpdGVtSWQYDCABKAUSDAoEZ29sZBgNIAEoBRIMCgR0",
            "aW1lGA4gASgDEgwKBHRleHQYDyABKAkSDwoHY29udGVudBgQIAEoCRIPCgd1",
            "c2VySWRzGBEgAygDEg8KB2ludFZhbHMYEiADKAUSEAoIbG9uZ1ZhbHMYEyAD",
            "KAMSEQoJZmxvYXRWYWxzGBQgAygCEgwKBGlzQUEYFSABKAgSDQoFaXNEWUoY",
            "FiABKAgiBwoFRW1wdHkiiAMKDlF1aWNrTG9naW5JbmZvEg8KB3VzZXJfSWQY",
            "ASABKAMSDwoHcm9sZV9pZBgCIAEoAxILCgNrZXkYAyABKAMSEQoJc2VydmVy",
            "X2lkGAQgASgJEgoKAmlwGAUgASgJEgwKBHBvcnQYBiABKAUSDAoEdHlwZRgH",
            "IAEoCRINCgVwYXJhbRgIIAEoCRIMCgRjb2RlGAkgASgFEhAKCGdyb3VwX2lk",
            "GAogASgJEg8KB3ZlcnNpb24YCyABKAkSDgoGcm9vbUlkGAwgASgJEjAKCXBh",
            "b2Rla3VhaRgNIAEoCzIdLmNlbnRlcnNkay5wcm90b2J1Zi5QYW9EZUt1YWkS",
            "EwoLY29tbXVuaXR5SWQYDiABKAUSLQoHcGFvaHV6aRgPIAEoCzIcLnBhb2h1",
            "emkucHJvdG9idWYuQ3JlYXRlUm9vbRIxCgZwYXJhbXMYECABKAsyIS5jZW50",
            "ZXJzZGsucHJvdG9idWYuUGFyYW1zTWFKaWFuZxITCgtjb21tdW5pdHlBQRgR",
            "IAEoCCI3Cg1JbnRlZ2VyVmFsdWVzEgoKAmlkGAEgASgFEgwKBHZhbHMYAiAD",
            "KAUSDAoEdmFsMRgDIAEoBSIbCgxJbnRlZ2VyVmFsdWUSCwoDdmFsGAEgASgF",
            "IhgKCUxvbmdWYWx1ZRILCgN2YWwYASABKAMiNAoKTG9uZ1ZhbHVlcxIMCgR2",
            "YWxzGAEgAygDEgoKAmlkGAIgASgFEgwKBHZhbDEYAyABKAUiMwoPVHdvSW50",
            "ZWdlclZhbHVlEg8KB2ludFZhbDEYASABKAUSDwoHaW50VmFsMhgCIAEoBSJW",
            "ChBUd29JbnRlZ2VyVmFsdWVzEjEKBHZhbHMYASADKAsyIy5jZW50ZXJzZGsu",
            "cHJvdG9idWYuVHdvSW50ZWdlclZhbHVlEg8KB2ludFZhbDEYAiABKAUiSwoW",
            "VHdvSW50ZWdlckFuZExvbmdWYWx1ZRIPCgdsb25nVmFsGAEgASgDEg8KB2lu",
            "dFZhbDEYAiABKAUSDwoHaW50VmFsMhgDIAEoBSIaCgtTdHJpbmdWYWx1ZRIL",
            "CgN2YWwYASABKAkiGQoKRmxvYXRWYWx1ZRILCgN2YWwYASABKAIiHAoMU3Ry",
            "aW5nVmFsdWVzEgwKBHZhbHMYASADKAkiJwoGU3RhdHVzEgwKBGNvZGUYASAB",
            "KAUSDwoHbWVzc2FnZRgCIAEoCSIzCg5JbnRlZ2VyQW5kTG9uZxIPCgdpbnRf",
            "dmFsGAEgASgFEhAKCGxvbmdfdmFsGAIgASgDIjcKEEludGVnZXJBbmRTdHJp",
            "bmcSDwoHaW50X3ZhbBgBIAEoBRISCgpzdHJpbmdfdmFsGAIgASgJImYKDEdh",
            "bWVQb3NDYXJkcxIPCgdyb29tX2lkGAEgASgJEhEKCXBvc19pbmRleBgCIAEo",
            "BRINCgVjYXJkcxgDIAMoBRIUCgxmaXJzdFB1c2hQb3MYBCABKAUSDQoFcGFy",
            "YW0YBSABKAkitwEKCkdhbWVBY3Rpb24SDwoHcm9vbV9pZBgBIAEoAxIRCglw",
            "b3NfaW5kZXgYAiABKAUSEwoLYWN0aW9uX3R5cGUYAyABKAUSEAoIbXVsdGlw",
            "bGUYBCABKAUSDQoFY2FyZHMYBSADKAUSDgoGY2FyZHMwGAYgAygFEg4KBmNh",
            "cmRzMRgHIAMoBRIOCgZjYXJkczIYCCADKAUSDAoEcmFuaxgJIAEoBRIRCglj",
            "YXJkc0xlZnQYCiABKAUiPgoNVmlkZW90YXBlTGlzdBIOCgZnYW1lSWQYASAB",
            "KAUSDQoFanZOdW0YAiABKAUSDgoGcm9vbUlkGAMgASgJIqECCglWaWRlb3Rh",
            "cGUSMgoIcG9zQ2FyZHMYASADKAsyIC5jZW50ZXJzZGsucHJvdG9idWYuR2Ft",
            "ZVBvc0NhcmRzEjIKCnJvb21BY3Rpb24YAiADKAsyHi5jZW50ZXJzZGsucHJv",
            "dG9idWYuR2FtZUFjdGlvbhIQCghzdGFydFdpbhgDIAMoBRIOCgZlbmRXaW4Y",
            "BCADKAUSMQoFaW5mb3MYBSADKAsyIi5jZW50ZXJzZGsucHJvdG9idWYuR2Ft",
            "ZVBsYXllckluZm8SEwoLY3VySW5uaW5nSWQYBiABKAUSEAoIaW5uaW5nSWQY",
            "ByABKAUSMAoJcGFvZGVrdWFpGAggASgLMh0uY2VudGVyc2RrLnByb3RvYnVm",
            "LlBhb0RlS3VhaSI+CgpWaWRlb3RhcGVzEjAKCXZpZGVvdGFwZRgBIAMoCzId",
            "LmNlbnRlcnNkay5wcm90b2J1Zi5WaWRlb3RhcGUiywEKDENvbWJhdFJlY29y",
            "ZBIPCgdlbmRUaW1lGAEgASgDEg4KBnJvb21JZBgCIAEoCRIOCgZnYW1lSWQY",
            "AyABKAUSDQoFanZOdW0YBCABKAUSEQoJcGxheWVyTnVtGAUgASgFEg8KB3dp",
            "bkdvbGQYBiABKAUSNwoGcmVjb3JkGAcgASgLMicuY2VudGVyc2RrLnByb3Rv",
            "YnVmLkRldGFpbHNDb21iYXRSZWNvcmQSEAoIY3VySnZOdW0YCCABKAUSDAoE",
            "Y29zdBgJIAEoBSKKAQoNQ29tYmF0UmVjb3JkcxIxCgdyZWNvcmRzGAEgAygL",
            "MiAuY2VudGVyc2RrLnByb3RvYnVmLkNvbWJhdFJlY29yZBIUCgxjb3N0RGlh",
            "bW9uZHMYAiABKAUSDgoGdGFibGVzGAMgASgFEg8KB21heFBhZ2UYBCABKAUS",
            "DwoHY3VyUGFnZRgFIAEoBSLtAQoTRGV0YWlsc0NvbWJhdFJlY29yZBITCgty",
            "b29tT3duZXJJZBgBIAEoAxIRCglvd25lck5hbWUYAiABKAkSFAoMb3duZXJI",
            "ZWFkVVJMGAMgASgJEg4KBnJvb21JZBgEIAEoCRIRCglzdGFydFRpbWUYBSAB",
            "KAMSDwoHZW5kVGltZRgGIAEoAxIOCgZnYW1lSWQYByABKAUSDQoFanZOdW0Y",
            "CCABKAUSEgoKY3JlYXRlVHlwZRgJIAEoBRIxCgVpbmZvcxgKIAMoCzIiLmNl",
            "bnRlcnNkay5wcm90b2J1Zi5HYW1lUGxheWVySW5mbyKYAQoOR2FtZVBsYXll",
            "ckluZm8SDgoGdXNlcklkGAEgASgDEhAKCHVzZXJOYW1lGAIgASgJEg8KB2hl",
            "YWRVcmwYAyABKAkSDwoHd2luR29sZBgEIAEoBRIRCglwb3NfaW5kZXgYBSAB",
            "KAUSLwoGc2NvcmVzGAYgAygLMh8uY2VudGVyc2RrLnByb3RvYnVmLlNjb3Jl",
            "Q2hhbmdlIjEKC1Njb3JlQ2hhbmdlEg0KBXRpbWVzGAEgASgDEhMKC2NoYW5n",
            "ZVZhbHVlGAIgASgFIskBCghEZXNrQ2hhdBIMCgRjb2RlGAEgASgFEhMKC2Rl",
            "c2NyaXB0aW9uGAIgASgJEgwKBHR5cGUYAyABKAUSDgoGdXNlcklkGAQgASgD",
            "EhAKCHVzZXJOYW1lGAUgASgJEhMKC3VzZXJIZWFkVXJsGAYgASgJEgwKBHRp",
            "bWUYByABKAMSEQoJaXNEaXNwbGF5GAggASgIEg8KB3ZvaWNlSWQYCSABKAkS",
            "EgoKdm9pY2VUaW1lcxgKIAEoBRIPCgdpbWFnZUlkGAsgASgJIpoCCglQYW9E",
            "ZUt1YWkSDQoFanZOdW0YASABKAUSEAoIcHVzaENhcmQYAiABKAUSDAoEcnVs",
            "ZRgDIAEoBRIPCgdmaW5hbE9wGAQgAygFEhAKCGdhbWVQbGF5GAUgAygFEhMK",
            "C2Rpc3BsYXlDYXJkGAYgASgFEg8KB3R1b2d1YW4YByABKAUSDAoEcGlhbxgI",
            "IAEoBRINCgVnYW9qaRgJIAMoBRIRCglwbGF5ZXJOdW0YCiABKAUSDgoGdHlw",
            "ZUlkGAsgASgFEg0KBWxvY2FsGAwgASgFEhIKCmNyZWF0ZVR5cGUYDSABKAUS",
            "DgoGZ2FtZUlkGA4gASgFEg8KB3BheVR5cGUYDyABKAUSEQoJcXlxUm9vbUlk",
            "GBAgASgJIjYKClF1aWNrTG9naW4SCgoCaXAYASABKAkSDAoEcG9ydBgCIAEo",
            "BRIOCgZnYW1lSWQYAyABKAUifAoPQ29tbXVuaXR5U3RhdHVzEg4KBnJvb21J",
            "ZBgBIAEoCRITCgtjb21tdW5pdHlJZBgCIAEoAxIOCgZ1c2VySWQYAyABKAMS",
            "EAoIY3JlYXRlSWQYBCABKAkSEAoIY3VyUm91bmQYBSABKAUSEAoIbWF4Um91",
            "bmQYBiABKAVCLAodY29tLmhvb2xhaS5jZW50ZXJzZGsucHJvdG9idWZCC0Nv",
            "bW1vblByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Paohuzi.Protobuf.PhzroomReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.ParamsArray), global::Centersdk.Protobuf.ParamsArray.Parser, new[]{ "Params", "Param", "Code", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.Params), global::Centersdk.Protobuf.Params.Parser, new[]{ "UserId", "RoleId", "Id", "Code", "Count", "Amount", "Value", "Index", "Status", "StatusB", "Type", "ItemId", "Gold", "Time", "Text", "Content", "UserIds", "IntVals", "LongVals", "StrVals", "FloatVals", "CommunityId", "IsAA", "IsDYJ", "QyqcreateId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.ParamsMaJiang), global::Centersdk.Protobuf.ParamsMaJiang.Parser, new[]{ "UserId", "RoleId", "Id", "Code", "Count", "Amount", "Value", "Index", "Status", "StatusB", "Type", "ItemId", "Gold", "Time", "Text", "Content", "UserIds", "IntVals", "LongVals", "FloatVals", "IsAA", "IsDYJ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.Empty), global::Centersdk.Protobuf.Empty.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.QuickLoginInfo), global::Centersdk.Protobuf.QuickLoginInfo.Parser, new[]{ "UserId", "RoleId", "Key", "ServerId", "Ip", "Port", "Type", "Param", "Code", "GroupId", "Version", "RoomId", "Paodekuai", "CommunityId", "Paohuzi", "Params", "CommunityAA" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.IntegerValues), global::Centersdk.Protobuf.IntegerValues.Parser, new[]{ "Id", "Vals", "Val1" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.IntegerValue), global::Centersdk.Protobuf.IntegerValue.Parser, new[]{ "Val" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.LongValue), global::Centersdk.Protobuf.LongValue.Parser, new[]{ "Val" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.LongValues), global::Centersdk.Protobuf.LongValues.Parser, new[]{ "Vals", "Id", "Val1" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.TwoIntegerValue), global::Centersdk.Protobuf.TwoIntegerValue.Parser, new[]{ "IntVal1", "IntVal2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.TwoIntegerValues), global::Centersdk.Protobuf.TwoIntegerValues.Parser, new[]{ "Vals", "IntVal1" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.TwoIntegerAndLongValue), global::Centersdk.Protobuf.TwoIntegerAndLongValue.Parser, new[]{ "LongVal", "IntVal1", "IntVal2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.StringValue), global::Centersdk.Protobuf.StringValue.Parser, new[]{ "Val" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.FloatValue), global::Centersdk.Protobuf.FloatValue.Parser, new[]{ "Val" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.StringValues), global::Centersdk.Protobuf.StringValues.Parser, new[]{ "Vals" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.Status), global::Centersdk.Protobuf.Status.Parser, new[]{ "Code", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.IntegerAndLong), global::Centersdk.Protobuf.IntegerAndLong.Parser, new[]{ "IntVal", "LongVal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.IntegerAndString), global::Centersdk.Protobuf.IntegerAndString.Parser, new[]{ "IntVal", "StringVal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.GamePosCards), global::Centersdk.Protobuf.GamePosCards.Parser, new[]{ "RoomId", "PosIndex", "Cards", "FirstPushPos", "Param" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.GameAction), global::Centersdk.Protobuf.GameAction.Parser, new[]{ "RoomId", "PosIndex", "ActionType", "Multiple", "Cards", "Cards0", "Cards1", "Cards2", "Rank", "CardsLeft" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.VideotapeList), global::Centersdk.Protobuf.VideotapeList.Parser, new[]{ "GameId", "JvNum", "RoomId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.Videotape), global::Centersdk.Protobuf.Videotape.Parser, new[]{ "PosCards", "RoomAction", "StartWin", "EndWin", "Infos", "CurInningId", "InningId", "Paodekuai" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.Videotapes), global::Centersdk.Protobuf.Videotapes.Parser, new[]{ "Videotape" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.CombatRecord), global::Centersdk.Protobuf.CombatRecord.Parser, new[]{ "EndTime", "RoomId", "GameId", "JvNum", "PlayerNum", "WinGold", "Record", "CurJvNum", "Cost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.CombatRecords), global::Centersdk.Protobuf.CombatRecords.Parser, new[]{ "Records", "CostDiamonds", "Tables", "MaxPage", "CurPage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.DetailsCombatRecord), global::Centersdk.Protobuf.DetailsCombatRecord.Parser, new[]{ "RoomOwnerId", "OwnerName", "OwnerHeadURL", "RoomId", "StartTime", "EndTime", "GameId", "JvNum", "CreateType", "Infos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.GamePlayerInfo), global::Centersdk.Protobuf.GamePlayerInfo.Parser, new[]{ "UserId", "UserName", "HeadUrl", "WinGold", "PosIndex", "Scores" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.ScoreChange), global::Centersdk.Protobuf.ScoreChange.Parser, new[]{ "Times", "ChangeValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.DeskChat), global::Centersdk.Protobuf.DeskChat.Parser, new[]{ "Code", "Description", "Type", "UserId", "UserName", "UserHeadUrl", "Time", "IsDisplay", "VoiceId", "VoiceTimes", "ImageId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.PaoDeKuai), global::Centersdk.Protobuf.PaoDeKuai.Parser, new[]{ "JvNum", "PushCard", "Rule", "FinalOp", "GamePlay", "DisplayCard", "Tuoguan", "Piao", "Gaoji", "PlayerNum", "TypeId", "Local", "CreateType", "GameId", "PayType", "QyqRoomId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.QuickLogin), global::Centersdk.Protobuf.QuickLogin.Parser, new[]{ "Ip", "Port", "GameId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centersdk.Protobuf.CommunityStatus), global::Centersdk.Protobuf.CommunityStatus.Parser, new[]{ "RoomId", "CommunityId", "UserId", "CreateId", "CurRound", "MaxRound" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///通用数组参数类
  /// </summary>
  public sealed partial class ParamsArray : pb::IMessage<ParamsArray> {
    private static readonly pb::MessageParser<ParamsArray> _parser = new pb::MessageParser<ParamsArray>(() => new ParamsArray());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParamsArray> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamsArray() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamsArray(ParamsArray other) : this() {
      params_ = other.params_.Clone();
      param_ = other.param_ != null ? other.param_.Clone() : null;
      code_ = other.code_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamsArray Clone() {
      return new ParamsArray(this);
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.Params> _repeated_params_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.Params.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.Params> params_ = new pbc::RepeatedField<global::Centersdk.Protobuf.Params>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.Params> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 2;
    private global::Centersdk.Protobuf.Params param_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Centersdk.Protobuf.Params Param {
      get { return param_; }
      set {
        param_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParamsArray);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParamsArray other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!params_.Equals(other.params_)) return false;
      if (!object.Equals(Param, other.Param)) return false;
      if (Code != other.Code) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= params_.GetHashCode();
      if (param_ != null) hash ^= Param.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      params_.WriteTo(output, _repeated_params_codec);
      if (param_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Param);
      }
      if (Code != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Code);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += params_.CalculateSize(_repeated_params_codec);
      if (param_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Param);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParamsArray other) {
      if (other == null) {
        return;
      }
      params_.Add(other.params_);
      if (other.param_ != null) {
        if (param_ == null) {
          param_ = new global::Centersdk.Protobuf.Params();
        }
        Param.MergeFrom(other.Param);
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
          case 18: {
            if (param_ == null) {
              param_ = new global::Centersdk.Protobuf.Params();
            }
            input.ReadMessage(param_);
            break;
          }
          case 24: {
            Code = input.ReadInt32();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通用参数类。此类目的。避免重复定义VO
  /// </summary>
  public sealed partial class Params : pb::IMessage<Params> {
    private static readonly pb::MessageParser<Params> _parser = new pb::MessageParser<Params>(() => new Params());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Params> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Params() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Params(Params other) : this() {
      userId_ = other.userId_;
      roleId_ = other.roleId_;
      id_ = other.id_;
      code_ = other.code_;
      count_ = other.count_;
      amount_ = other.amount_;
      value_ = other.value_;
      index_ = other.index_;
      status_ = other.status_;
      statusB_ = other.statusB_;
      type_ = other.type_;
      itemId_ = other.itemId_;
      gold_ = other.gold_;
      time_ = other.time_;
      text_ = other.text_;
      content_ = other.content_;
      userIds_ = other.userIds_.Clone();
      intVals_ = other.intVals_.Clone();
      longVals_ = other.longVals_.Clone();
      strVals_ = other.strVals_.Clone();
      floatVals_ = other.floatVals_.Clone();
      communityId_ = other.communityId_;
      isAA_ = other.isAA_;
      isDYJ_ = other.isDYJ_;
      qyqcreateId_ = other.qyqcreateId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Params Clone() {
      return new Params(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private long roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 4;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 5;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 6;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 7;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 8;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 9;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "statusB" field.</summary>
    public const int StatusBFieldNumber = 10;
    private bool statusB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StatusB {
      get { return statusB_; }
      set {
        statusB_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 11;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 12;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 13;
    private int gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 14;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 15;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 16;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userIds" field.</summary>
    public const int UserIdsFieldNumber = 17;
    private static readonly pb::FieldCodec<long> _repeated_userIds_codec
        = pb::FieldCodec.ForInt64(138);
    private readonly pbc::RepeatedField<long> userIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///用户ID数组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> UserIds {
      get { return userIds_; }
    }

    /// <summary>Field number for the "intVals" field.</summary>
    public const int IntValsFieldNumber = 18;
    private static readonly pb::FieldCodec<int> _repeated_intVals_codec
        = pb::FieldCodec.ForInt32(146);
    private readonly pbc::RepeatedField<int> intVals_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///整形数组参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IntVals {
      get { return intVals_; }
    }

    /// <summary>Field number for the "longVals" field.</summary>
    public const int LongValsFieldNumber = 19;
    private static readonly pb::FieldCodec<long> _repeated_longVals_codec
        = pb::FieldCodec.ForInt64(154);
    private readonly pbc::RepeatedField<long> longVals_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///长整型数组参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> LongVals {
      get { return longVals_; }
    }

    /// <summary>Field number for the "strVals" field.</summary>
    public const int StrValsFieldNumber = 20;
    private static readonly pb::FieldCodec<string> _repeated_strVals_codec
        = pb::FieldCodec.ForString(162);
    private readonly pbc::RepeatedField<string> strVals_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///字符数组参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> StrVals {
      get { return strVals_; }
    }

    /// <summary>Field number for the "floatVals" field.</summary>
    public const int FloatValsFieldNumber = 21;
    private static readonly pb::FieldCodec<float> _repeated_floatVals_codec
        = pb::FieldCodec.ForFloat(170);
    private readonly pbc::RepeatedField<float> floatVals_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///float类型参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> FloatVals {
      get { return floatVals_; }
    }

    /// <summary>Field number for the "communityId" field.</summary>
    public const int CommunityIdFieldNumber = 22;
    private int communityId_;
    /// <summary>
    ///亲友圈ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CommunityId {
      get { return communityId_; }
      set {
        communityId_ = value;
      }
    }

    /// <summary>Field number for the "isAA" field.</summary>
    public const int IsAAFieldNumber = 23;
    private bool isAA_;
    /// <summary>
    ///是否是AA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAA {
      get { return isAA_; }
      set {
        isAA_ = value;
      }
    }

    /// <summary>Field number for the "isDYJ" field.</summary>
    public const int IsDYJFieldNumber = 24;
    private bool isDYJ_;
    /// <summary>
    ///是否是大赢家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDYJ {
      get { return isDYJ_; }
      set {
        isDYJ_ = value;
      }
    }

    /// <summary>Field number for the "qyqcreateId" field.</summary>
    public const int QyqcreateIdFieldNumber = 25;
    private string qyqcreateId_ = "";
    /// <summary>
    ///亲友圈牌桌编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QyqcreateId {
      get { return qyqcreateId_; }
      set {
        qyqcreateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Params);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Params other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (RoleId != other.RoleId) return false;
      if (Id != other.Id) return false;
      if (Code != other.Code) return false;
      if (Count != other.Count) return false;
      if (Amount != other.Amount) return false;
      if (Value != other.Value) return false;
      if (Index != other.Index) return false;
      if (Status != other.Status) return false;
      if (StatusB != other.StatusB) return false;
      if (Type != other.Type) return false;
      if (ItemId != other.ItemId) return false;
      if (Gold != other.Gold) return false;
      if (Time != other.Time) return false;
      if (Text != other.Text) return false;
      if (Content != other.Content) return false;
      if(!userIds_.Equals(other.userIds_)) return false;
      if(!intVals_.Equals(other.intVals_)) return false;
      if(!longVals_.Equals(other.longVals_)) return false;
      if(!strVals_.Equals(other.strVals_)) return false;
      if(!floatVals_.Equals(other.floatVals_)) return false;
      if (CommunityId != other.CommunityId) return false;
      if (IsAA != other.IsAA) return false;
      if (IsDYJ != other.IsDYJ) return false;
      if (QyqcreateId != other.QyqcreateId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (RoleId != 0L) hash ^= RoleId.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (StatusB != false) hash ^= StatusB.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      hash ^= userIds_.GetHashCode();
      hash ^= intVals_.GetHashCode();
      hash ^= longVals_.GetHashCode();
      hash ^= strVals_.GetHashCode();
      hash ^= floatVals_.GetHashCode();
      if (CommunityId != 0) hash ^= CommunityId.GetHashCode();
      if (IsAA != false) hash ^= IsAA.GetHashCode();
      if (IsDYJ != false) hash ^= IsDYJ.GetHashCode();
      if (QyqcreateId.Length != 0) hash ^= QyqcreateId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (RoleId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoleId);
      }
      if (Id != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Id);
      }
      if (Code != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Code);
      }
      if (Count != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Count);
      }
      if (Amount != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Amount);
      }
      if (Value != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Value);
      }
      if (Index != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Index);
      }
      if (Status != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Status);
      }
      if (StatusB != false) {
        output.WriteRawTag(80);
        output.WriteBool(StatusB);
      }
      if (Type != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Type);
      }
      if (ItemId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ItemId);
      }
      if (Gold != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Gold);
      }
      if (Time != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(Time);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Text);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Content);
      }
      userIds_.WriteTo(output, _repeated_userIds_codec);
      intVals_.WriteTo(output, _repeated_intVals_codec);
      longVals_.WriteTo(output, _repeated_longVals_codec);
      strVals_.WriteTo(output, _repeated_strVals_codec);
      floatVals_.WriteTo(output, _repeated_floatVals_codec);
      if (CommunityId != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(CommunityId);
      }
      if (IsAA != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(IsAA);
      }
      if (IsDYJ != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(IsDYJ);
      }
      if (QyqcreateId.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(QyqcreateId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (StatusB != false) {
        size += 1 + 1;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (Content.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      size += userIds_.CalculateSize(_repeated_userIds_codec);
      size += intVals_.CalculateSize(_repeated_intVals_codec);
      size += longVals_.CalculateSize(_repeated_longVals_codec);
      size += strVals_.CalculateSize(_repeated_strVals_codec);
      size += floatVals_.CalculateSize(_repeated_floatVals_codec);
      if (CommunityId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CommunityId);
      }
      if (IsAA != false) {
        size += 2 + 1;
      }
      if (IsDYJ != false) {
        size += 2 + 1;
      }
      if (QyqcreateId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(QyqcreateId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Params other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.RoleId != 0L) {
        RoleId = other.RoleId;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.StatusB != false) {
        StatusB = other.StatusB;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      userIds_.Add(other.userIds_);
      intVals_.Add(other.intVals_);
      longVals_.Add(other.longVals_);
      strVals_.Add(other.strVals_);
      floatVals_.Add(other.floatVals_);
      if (other.CommunityId != 0) {
        CommunityId = other.CommunityId;
      }
      if (other.IsAA != false) {
        IsAA = other.IsAA;
      }
      if (other.IsDYJ != false) {
        IsDYJ = other.IsDYJ;
      }
      if (other.QyqcreateId.Length != 0) {
        QyqcreateId = other.QyqcreateId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            RoleId = input.ReadInt64();
            break;
          }
          case 24: {
            Id = input.ReadInt32();
            break;
          }
          case 32: {
            Code = input.ReadInt32();
            break;
          }
          case 40: {
            Count = input.ReadInt32();
            break;
          }
          case 48: {
            Amount = input.ReadInt64();
            break;
          }
          case 56: {
            Value = input.ReadInt32();
            break;
          }
          case 64: {
            Index = input.ReadInt32();
            break;
          }
          case 72: {
            Status = input.ReadInt32();
            break;
          }
          case 80: {
            StatusB = input.ReadBool();
            break;
          }
          case 88: {
            Type = input.ReadInt32();
            break;
          }
          case 96: {
            ItemId = input.ReadInt32();
            break;
          }
          case 104: {
            Gold = input.ReadInt32();
            break;
          }
          case 112: {
            Time = input.ReadInt64();
            break;
          }
          case 122: {
            Text = input.ReadString();
            break;
          }
          case 130: {
            Content = input.ReadString();
            break;
          }
          case 138:
          case 136: {
            userIds_.AddEntriesFrom(input, _repeated_userIds_codec);
            break;
          }
          case 146:
          case 144: {
            intVals_.AddEntriesFrom(input, _repeated_intVals_codec);
            break;
          }
          case 154:
          case 152: {
            longVals_.AddEntriesFrom(input, _repeated_longVals_codec);
            break;
          }
          case 162: {
            strVals_.AddEntriesFrom(input, _repeated_strVals_codec);
            break;
          }
          case 170:
          case 173: {
            floatVals_.AddEntriesFrom(input, _repeated_floatVals_codec);
            break;
          }
          case 176: {
            CommunityId = input.ReadInt32();
            break;
          }
          case 184: {
            IsAA = input.ReadBool();
            break;
          }
          case 192: {
            IsDYJ = input.ReadBool();
            break;
          }
          case 202: {
            QyqcreateId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ParamsMaJiang : pb::IMessage<ParamsMaJiang> {
    private static readonly pb::MessageParser<ParamsMaJiang> _parser = new pb::MessageParser<ParamsMaJiang>(() => new ParamsMaJiang());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParamsMaJiang> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamsMaJiang() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamsMaJiang(ParamsMaJiang other) : this() {
      userId_ = other.userId_;
      roleId_ = other.roleId_;
      id_ = other.id_;
      code_ = other.code_;
      count_ = other.count_;
      amount_ = other.amount_;
      value_ = other.value_;
      index_ = other.index_;
      status_ = other.status_;
      statusB_ = other.statusB_;
      type_ = other.type_;
      itemId_ = other.itemId_;
      gold_ = other.gold_;
      time_ = other.time_;
      text_ = other.text_;
      content_ = other.content_;
      userIds_ = other.userIds_.Clone();
      intVals_ = other.intVals_.Clone();
      longVals_ = other.longVals_.Clone();
      floatVals_ = other.floatVals_.Clone();
      isAA_ = other.isAA_;
      isDYJ_ = other.isDYJ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamsMaJiang Clone() {
      return new ParamsMaJiang(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private long roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 4;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 5;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 6;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 7;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 8;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 9;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "statusB" field.</summary>
    public const int StatusBFieldNumber = 10;
    private bool statusB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StatusB {
      get { return statusB_; }
      set {
        statusB_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 11;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 12;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 13;
    private int gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 14;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 15;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 16;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userIds" field.</summary>
    public const int UserIdsFieldNumber = 17;
    private static readonly pb::FieldCodec<long> _repeated_userIds_codec
        = pb::FieldCodec.ForInt64(138);
    private readonly pbc::RepeatedField<long> userIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///用户ID数组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> UserIds {
      get { return userIds_; }
    }

    /// <summary>Field number for the "intVals" field.</summary>
    public const int IntValsFieldNumber = 18;
    private static readonly pb::FieldCodec<int> _repeated_intVals_codec
        = pb::FieldCodec.ForInt32(146);
    private readonly pbc::RepeatedField<int> intVals_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///整形数组参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IntVals {
      get { return intVals_; }
    }

    /// <summary>Field number for the "longVals" field.</summary>
    public const int LongValsFieldNumber = 19;
    private static readonly pb::FieldCodec<long> _repeated_longVals_codec
        = pb::FieldCodec.ForInt64(154);
    private readonly pbc::RepeatedField<long> longVals_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///长整型数组参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> LongVals {
      get { return longVals_; }
    }

    /// <summary>Field number for the "floatVals" field.</summary>
    public const int FloatValsFieldNumber = 20;
    private static readonly pb::FieldCodec<float> _repeated_floatVals_codec
        = pb::FieldCodec.ForFloat(162);
    private readonly pbc::RepeatedField<float> floatVals_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///float类型参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> FloatVals {
      get { return floatVals_; }
    }

    /// <summary>Field number for the "isAA" field.</summary>
    public const int IsAAFieldNumber = 21;
    private bool isAA_;
    /// <summary>
    ///是否是AA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAA {
      get { return isAA_; }
      set {
        isAA_ = value;
      }
    }

    /// <summary>Field number for the "isDYJ" field.</summary>
    public const int IsDYJFieldNumber = 22;
    private bool isDYJ_;
    /// <summary>
    ///是否是大赢家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDYJ {
      get { return isDYJ_; }
      set {
        isDYJ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParamsMaJiang);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParamsMaJiang other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (RoleId != other.RoleId) return false;
      if (Id != other.Id) return false;
      if (Code != other.Code) return false;
      if (Count != other.Count) return false;
      if (Amount != other.Amount) return false;
      if (Value != other.Value) return false;
      if (Index != other.Index) return false;
      if (Status != other.Status) return false;
      if (StatusB != other.StatusB) return false;
      if (Type != other.Type) return false;
      if (ItemId != other.ItemId) return false;
      if (Gold != other.Gold) return false;
      if (Time != other.Time) return false;
      if (Text != other.Text) return false;
      if (Content != other.Content) return false;
      if(!userIds_.Equals(other.userIds_)) return false;
      if(!intVals_.Equals(other.intVals_)) return false;
      if(!longVals_.Equals(other.longVals_)) return false;
      if(!floatVals_.Equals(other.floatVals_)) return false;
      if (IsAA != other.IsAA) return false;
      if (IsDYJ != other.IsDYJ) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (RoleId != 0L) hash ^= RoleId.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (StatusB != false) hash ^= StatusB.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      hash ^= userIds_.GetHashCode();
      hash ^= intVals_.GetHashCode();
      hash ^= longVals_.GetHashCode();
      hash ^= floatVals_.GetHashCode();
      if (IsAA != false) hash ^= IsAA.GetHashCode();
      if (IsDYJ != false) hash ^= IsDYJ.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (RoleId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoleId);
      }
      if (Id != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Id);
      }
      if (Code != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Code);
      }
      if (Count != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Count);
      }
      if (Amount != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Amount);
      }
      if (Value != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Value);
      }
      if (Index != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Index);
      }
      if (Status != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Status);
      }
      if (StatusB != false) {
        output.WriteRawTag(80);
        output.WriteBool(StatusB);
      }
      if (Type != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Type);
      }
      if (ItemId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ItemId);
      }
      if (Gold != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Gold);
      }
      if (Time != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(Time);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Text);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Content);
      }
      userIds_.WriteTo(output, _repeated_userIds_codec);
      intVals_.WriteTo(output, _repeated_intVals_codec);
      longVals_.WriteTo(output, _repeated_longVals_codec);
      floatVals_.WriteTo(output, _repeated_floatVals_codec);
      if (IsAA != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsAA);
      }
      if (IsDYJ != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsDYJ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (StatusB != false) {
        size += 1 + 1;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (Content.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      size += userIds_.CalculateSize(_repeated_userIds_codec);
      size += intVals_.CalculateSize(_repeated_intVals_codec);
      size += longVals_.CalculateSize(_repeated_longVals_codec);
      size += floatVals_.CalculateSize(_repeated_floatVals_codec);
      if (IsAA != false) {
        size += 2 + 1;
      }
      if (IsDYJ != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParamsMaJiang other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.RoleId != 0L) {
        RoleId = other.RoleId;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.StatusB != false) {
        StatusB = other.StatusB;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      userIds_.Add(other.userIds_);
      intVals_.Add(other.intVals_);
      longVals_.Add(other.longVals_);
      floatVals_.Add(other.floatVals_);
      if (other.IsAA != false) {
        IsAA = other.IsAA;
      }
      if (other.IsDYJ != false) {
        IsDYJ = other.IsDYJ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            RoleId = input.ReadInt64();
            break;
          }
          case 24: {
            Id = input.ReadInt32();
            break;
          }
          case 32: {
            Code = input.ReadInt32();
            break;
          }
          case 40: {
            Count = input.ReadInt32();
            break;
          }
          case 48: {
            Amount = input.ReadInt64();
            break;
          }
          case 56: {
            Value = input.ReadInt32();
            break;
          }
          case 64: {
            Index = input.ReadInt32();
            break;
          }
          case 72: {
            Status = input.ReadInt32();
            break;
          }
          case 80: {
            StatusB = input.ReadBool();
            break;
          }
          case 88: {
            Type = input.ReadInt32();
            break;
          }
          case 96: {
            ItemId = input.ReadInt32();
            break;
          }
          case 104: {
            Gold = input.ReadInt32();
            break;
          }
          case 112: {
            Time = input.ReadInt64();
            break;
          }
          case 122: {
            Text = input.ReadString();
            break;
          }
          case 130: {
            Content = input.ReadString();
            break;
          }
          case 138:
          case 136: {
            userIds_.AddEntriesFrom(input, _repeated_userIds_codec);
            break;
          }
          case 146:
          case 144: {
            intVals_.AddEntriesFrom(input, _repeated_intVals_codec);
            break;
          }
          case 154:
          case 152: {
            longVals_.AddEntriesFrom(input, _repeated_longVals_codec);
            break;
          }
          case 162:
          case 165: {
            floatVals_.AddEntriesFrom(input, _repeated_floatVals_codec);
            break;
          }
          case 168: {
            IsAA = input.ReadBool();
            break;
          }
          case 176: {
            IsDYJ = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Empty : pb::IMessage<Empty> {
    private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Empty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty(Empty other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty Clone() {
      return new Empty(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Empty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Empty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Empty other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 服务器之间跳转时使用
  /// </summary>
  public sealed partial class QuickLoginInfo : pb::IMessage<QuickLoginInfo> {
    private static readonly pb::MessageParser<QuickLoginInfo> _parser = new pb::MessageParser<QuickLoginInfo>(() => new QuickLoginInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuickLoginInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuickLoginInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuickLoginInfo(QuickLoginInfo other) : this() {
      userId_ = other.userId_;
      roleId_ = other.roleId_;
      key_ = other.key_;
      serverId_ = other.serverId_;
      ip_ = other.ip_;
      port_ = other.port_;
      type_ = other.type_;
      param_ = other.param_;
      code_ = other.code_;
      groupId_ = other.groupId_;
      version_ = other.version_;
      roomId_ = other.roomId_;
      paodekuai_ = other.paodekuai_ != null ? other.paodekuai_.Clone() : null;
      communityId_ = other.communityId_;
      paohuzi_ = other.paohuzi_ != null ? other.paohuzi_.Clone() : null;
      params_ = other.params_ != null ? other.params_.Clone() : null;
      communityAA_ = other.communityAA_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuickLoginInfo Clone() {
      return new QuickLoginInfo(this);
    }

    /// <summary>Field number for the "user_Id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "role_id" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private long roleId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 3;
    private long key_;
    /// <summary>
    /// 登录key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 4;
    private string serverId_ = "";
    /// <summary>
    /// 服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerId {
      get { return serverId_; }
      set {
        serverId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 5;
    private string ip_ = "";
    /// <summary>
    /// 服务器域名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 6;
    private int port_;
    /// <summary>
    /// 服务器端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 7;
    private string type_ = "";
    /// <summary>
    /// 服务器类别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 8;
    private string param_ = "";
    /// <summary>
    /// 特有参数，一般由子服务器和前端协商定义。建议使用json格式。方便拓展
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Param {
      get { return param_; }
      set {
        param_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 9;
    private int code_;
    /// <summary>
    /// 消息码，前后端协商定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 10;
    private string groupId_ = "";
    /// <summary>
    /// 玩法的分类ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 11;
    private string version_ = "";
    /// <summary>
    /// 用户登录版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 12;
    private string roomId_ = "";
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "paodekuai" field.</summary>
    public const int PaodekuaiFieldNumber = 13;
    private global::Centersdk.Protobuf.PaoDeKuai paodekuai_;
    /// <summary>
    /// 跑得快玩法设置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Centersdk.Protobuf.PaoDeKuai Paodekuai {
      get { return paodekuai_; }
      set {
        paodekuai_ = value;
      }
    }

    /// <summary>Field number for the "communityId" field.</summary>
    public const int CommunityIdFieldNumber = 14;
    private int communityId_;
    /// <summary>
    /// 亲友圈ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CommunityId {
      get { return communityId_; }
      set {
        communityId_ = value;
      }
    }

    /// <summary>Field number for the "paohuzi" field.</summary>
    public const int PaohuziFieldNumber = 15;
    private global::Paohuzi.Protobuf.CreateRoom paohuzi_;
    /// <summary>
    ///跑胡子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Paohuzi.Protobuf.CreateRoom Paohuzi {
      get { return paohuzi_; }
      set {
        paohuzi_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 16;
    private global::Centersdk.Protobuf.ParamsMaJiang params_;
    /// <summary>
    ///麻将
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Centersdk.Protobuf.ParamsMaJiang Params {
      get { return params_; }
      set {
        params_ = value;
      }
    }

    /// <summary>Field number for the "communityAA" field.</summary>
    public const int CommunityAAFieldNumber = 17;
    private bool communityAA_;
    /// <summary>
    /// 亲友圈是不是AA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CommunityAA {
      get { return communityAA_; }
      set {
        communityAA_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuickLoginInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuickLoginInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (RoleId != other.RoleId) return false;
      if (Key != other.Key) return false;
      if (ServerId != other.ServerId) return false;
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (Type != other.Type) return false;
      if (Param != other.Param) return false;
      if (Code != other.Code) return false;
      if (GroupId != other.GroupId) return false;
      if (Version != other.Version) return false;
      if (RoomId != other.RoomId) return false;
      if (!object.Equals(Paodekuai, other.Paodekuai)) return false;
      if (CommunityId != other.CommunityId) return false;
      if (!object.Equals(Paohuzi, other.Paohuzi)) return false;
      if (!object.Equals(Params, other.Params)) return false;
      if (CommunityAA != other.CommunityAA) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (RoleId != 0L) hash ^= RoleId.GetHashCode();
      if (Key != 0L) hash ^= Key.GetHashCode();
      if (ServerId.Length != 0) hash ^= ServerId.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Param.Length != 0) hash ^= Param.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (paodekuai_ != null) hash ^= Paodekuai.GetHashCode();
      if (CommunityId != 0) hash ^= CommunityId.GetHashCode();
      if (paohuzi_ != null) hash ^= Paohuzi.GetHashCode();
      if (params_ != null) hash ^= Params.GetHashCode();
      if (CommunityAA != false) hash ^= CommunityAA.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (RoleId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoleId);
      }
      if (Key != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Key);
      }
      if (ServerId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ServerId);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Port);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Type);
      }
      if (Param.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Param);
      }
      if (Code != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Code);
      }
      if (GroupId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(GroupId);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Version);
      }
      if (RoomId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(RoomId);
      }
      if (paodekuai_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Paodekuai);
      }
      if (CommunityId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(CommunityId);
      }
      if (paohuzi_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Paohuzi);
      }
      if (params_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Params);
      }
      if (CommunityAA != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(CommunityAA);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (ServerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerId);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Param.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Param);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (paodekuai_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Paodekuai);
      }
      if (CommunityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CommunityId);
      }
      if (paohuzi_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Paohuzi);
      }
      if (params_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Params);
      }
      if (CommunityAA != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuickLoginInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.RoleId != 0L) {
        RoleId = other.RoleId;
      }
      if (other.Key != 0L) {
        Key = other.Key;
      }
      if (other.ServerId.Length != 0) {
        ServerId = other.ServerId;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Param.Length != 0) {
        Param = other.Param;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.paodekuai_ != null) {
        if (paodekuai_ == null) {
          paodekuai_ = new global::Centersdk.Protobuf.PaoDeKuai();
        }
        Paodekuai.MergeFrom(other.Paodekuai);
      }
      if (other.CommunityId != 0) {
        CommunityId = other.CommunityId;
      }
      if (other.paohuzi_ != null) {
        if (paohuzi_ == null) {
          paohuzi_ = new global::Paohuzi.Protobuf.CreateRoom();
        }
        Paohuzi.MergeFrom(other.Paohuzi);
      }
      if (other.params_ != null) {
        if (params_ == null) {
          params_ = new global::Centersdk.Protobuf.ParamsMaJiang();
        }
        Params.MergeFrom(other.Params);
      }
      if (other.CommunityAA != false) {
        CommunityAA = other.CommunityAA;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            RoleId = input.ReadInt64();
            break;
          }
          case 24: {
            Key = input.ReadInt64();
            break;
          }
          case 34: {
            ServerId = input.ReadString();
            break;
          }
          case 42: {
            Ip = input.ReadString();
            break;
          }
          case 48: {
            Port = input.ReadInt32();
            break;
          }
          case 58: {
            Type = input.ReadString();
            break;
          }
          case 66: {
            Param = input.ReadString();
            break;
          }
          case 72: {
            Code = input.ReadInt32();
            break;
          }
          case 82: {
            GroupId = input.ReadString();
            break;
          }
          case 90: {
            Version = input.ReadString();
            break;
          }
          case 98: {
            RoomId = input.ReadString();
            break;
          }
          case 106: {
            if (paodekuai_ == null) {
              paodekuai_ = new global::Centersdk.Protobuf.PaoDeKuai();
            }
            input.ReadMessage(paodekuai_);
            break;
          }
          case 112: {
            CommunityId = input.ReadInt32();
            break;
          }
          case 122: {
            if (paohuzi_ == null) {
              paohuzi_ = new global::Paohuzi.Protobuf.CreateRoom();
            }
            input.ReadMessage(paohuzi_);
            break;
          }
          case 130: {
            if (params_ == null) {
              params_ = new global::Centersdk.Protobuf.ParamsMaJiang();
            }
            input.ReadMessage(params_);
            break;
          }
          case 136: {
            CommunityAA = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// int数组
  /// </summary>
  public sealed partial class IntegerValues : pb::IMessage<IntegerValues> {
    private static readonly pb::MessageParser<IntegerValues> _parser = new pb::MessageParser<IntegerValues>(() => new IntegerValues());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntegerValues> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntegerValues() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntegerValues(IntegerValues other) : this() {
      id_ = other.id_;
      vals_ = other.vals_.Clone();
      val1_ = other.val1_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntegerValues Clone() {
      return new IntegerValues(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "vals" field.</summary>
    public const int ValsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_vals_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> vals_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 整数数组参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Vals {
      get { return vals_; }
    }

    /// <summary>Field number for the "val1" field.</summary>
    public const int Val1FieldNumber = 3;
    private int val1_;
    /// <summary>
    /// 扩展参数1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Val1 {
      get { return val1_; }
      set {
        val1_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntegerValues);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntegerValues other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!vals_.Equals(other.vals_)) return false;
      if (Val1 != other.Val1) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= vals_.GetHashCode();
      if (Val1 != 0) hash ^= Val1.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      vals_.WriteTo(output, _repeated_vals_codec);
      if (Val1 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Val1);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += vals_.CalculateSize(_repeated_vals_codec);
      if (Val1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Val1);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntegerValues other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      vals_.Add(other.vals_);
      if (other.Val1 != 0) {
        Val1 = other.Val1;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            vals_.AddEntriesFrom(input, _repeated_vals_codec);
            break;
          }
          case 24: {
            Val1 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IntegerValue : pb::IMessage<IntegerValue> {
    private static readonly pb::MessageParser<IntegerValue> _parser = new pb::MessageParser<IntegerValue>(() => new IntegerValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntegerValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntegerValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntegerValue(IntegerValue other) : this() {
      val_ = other.val_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntegerValue Clone() {
      return new IntegerValue(this);
    }

    /// <summary>Field number for the "val" field.</summary>
    public const int ValFieldNumber = 1;
    private int val_;
    /// <summary>
    /// 整型参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Val {
      get { return val_; }
      set {
        val_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntegerValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntegerValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Val != other.Val) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Val != 0) hash ^= Val.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Val != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Val);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Val != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Val);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntegerValue other) {
      if (other == null) {
        return;
      }
      if (other.Val != 0) {
        Val = other.Val;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Val = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 长整型参数
  /// </summary>
  public sealed partial class LongValue : pb::IMessage<LongValue> {
    private static readonly pb::MessageParser<LongValue> _parser = new pb::MessageParser<LongValue>(() => new LongValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LongValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LongValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LongValue(LongValue other) : this() {
      val_ = other.val_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LongValue Clone() {
      return new LongValue(this);
    }

    /// <summary>Field number for the "val" field.</summary>
    public const int ValFieldNumber = 1;
    private long val_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Val {
      get { return val_; }
      set {
        val_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LongValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LongValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Val != other.Val) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Val != 0L) hash ^= Val.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Val != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Val);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Val != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Val);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LongValue other) {
      if (other == null) {
        return;
      }
      if (other.Val != 0L) {
        Val = other.Val;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Val = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LongValues : pb::IMessage<LongValues> {
    private static readonly pb::MessageParser<LongValues> _parser = new pb::MessageParser<LongValues>(() => new LongValues());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LongValues> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LongValues() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LongValues(LongValues other) : this() {
      vals_ = other.vals_.Clone();
      id_ = other.id_;
      val1_ = other.val1_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LongValues Clone() {
      return new LongValues(this);
    }

    /// <summary>Field number for the "vals" field.</summary>
    public const int ValsFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_vals_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> vals_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Vals {
      get { return vals_; }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "val1" field.</summary>
    public const int Val1FieldNumber = 3;
    private int val1_;
    /// <summary>
    /// int类型扩展参数1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Val1 {
      get { return val1_; }
      set {
        val1_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LongValues);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LongValues other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!vals_.Equals(other.vals_)) return false;
      if (Id != other.Id) return false;
      if (Val1 != other.Val1) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= vals_.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Val1 != 0) hash ^= Val1.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      vals_.WriteTo(output, _repeated_vals_codec);
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (Val1 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Val1);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += vals_.CalculateSize(_repeated_vals_codec);
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Val1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Val1);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LongValues other) {
      if (other == null) {
        return;
      }
      vals_.Add(other.vals_);
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Val1 != 0) {
        Val1 = other.Val1;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            vals_.AddEntriesFrom(input, _repeated_vals_codec);
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            Val1 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TwoIntegerValue : pb::IMessage<TwoIntegerValue> {
    private static readonly pb::MessageParser<TwoIntegerValue> _parser = new pb::MessageParser<TwoIntegerValue>(() => new TwoIntegerValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TwoIntegerValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoIntegerValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoIntegerValue(TwoIntegerValue other) : this() {
      intVal1_ = other.intVal1_;
      intVal2_ = other.intVal2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoIntegerValue Clone() {
      return new TwoIntegerValue(this);
    }

    /// <summary>Field number for the "intVal1" field.</summary>
    public const int IntVal1FieldNumber = 1;
    private int intVal1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntVal1 {
      get { return intVal1_; }
      set {
        intVal1_ = value;
      }
    }

    /// <summary>Field number for the "intVal2" field.</summary>
    public const int IntVal2FieldNumber = 2;
    private int intVal2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntVal2 {
      get { return intVal2_; }
      set {
        intVal2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TwoIntegerValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TwoIntegerValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IntVal1 != other.IntVal1) return false;
      if (IntVal2 != other.IntVal2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IntVal1 != 0) hash ^= IntVal1.GetHashCode();
      if (IntVal2 != 0) hash ^= IntVal2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IntVal1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IntVal1);
      }
      if (IntVal2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IntVal2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IntVal1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntVal1);
      }
      if (IntVal2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntVal2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TwoIntegerValue other) {
      if (other == null) {
        return;
      }
      if (other.IntVal1 != 0) {
        IntVal1 = other.IntVal1;
      }
      if (other.IntVal2 != 0) {
        IntVal2 = other.IntVal2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IntVal1 = input.ReadInt32();
            break;
          }
          case 16: {
            IntVal2 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TwoIntegerValues : pb::IMessage<TwoIntegerValues> {
    private static readonly pb::MessageParser<TwoIntegerValues> _parser = new pb::MessageParser<TwoIntegerValues>(() => new TwoIntegerValues());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TwoIntegerValues> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoIntegerValues() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoIntegerValues(TwoIntegerValues other) : this() {
      vals_ = other.vals_.Clone();
      intVal1_ = other.intVal1_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoIntegerValues Clone() {
      return new TwoIntegerValues(this);
    }

    /// <summary>Field number for the "vals" field.</summary>
    public const int ValsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.TwoIntegerValue> _repeated_vals_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.TwoIntegerValue.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.TwoIntegerValue> vals_ = new pbc::RepeatedField<global::Centersdk.Protobuf.TwoIntegerValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.TwoIntegerValue> Vals {
      get { return vals_; }
    }

    /// <summary>Field number for the "intVal1" field.</summary>
    public const int IntVal1FieldNumber = 2;
    private int intVal1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntVal1 {
      get { return intVal1_; }
      set {
        intVal1_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TwoIntegerValues);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TwoIntegerValues other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!vals_.Equals(other.vals_)) return false;
      if (IntVal1 != other.IntVal1) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= vals_.GetHashCode();
      if (IntVal1 != 0) hash ^= IntVal1.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      vals_.WriteTo(output, _repeated_vals_codec);
      if (IntVal1 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IntVal1);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += vals_.CalculateSize(_repeated_vals_codec);
      if (IntVal1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntVal1);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TwoIntegerValues other) {
      if (other == null) {
        return;
      }
      vals_.Add(other.vals_);
      if (other.IntVal1 != 0) {
        IntVal1 = other.IntVal1;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            vals_.AddEntriesFrom(input, _repeated_vals_codec);
            break;
          }
          case 16: {
            IntVal1 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 两个整型和一个长整型
  /// </summary>
  public sealed partial class TwoIntegerAndLongValue : pb::IMessage<TwoIntegerAndLongValue> {
    private static readonly pb::MessageParser<TwoIntegerAndLongValue> _parser = new pb::MessageParser<TwoIntegerAndLongValue>(() => new TwoIntegerAndLongValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TwoIntegerAndLongValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoIntegerAndLongValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoIntegerAndLongValue(TwoIntegerAndLongValue other) : this() {
      longVal_ = other.longVal_;
      intVal1_ = other.intVal1_;
      intVal2_ = other.intVal2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoIntegerAndLongValue Clone() {
      return new TwoIntegerAndLongValue(this);
    }

    /// <summary>Field number for the "longVal" field.</summary>
    public const int LongValFieldNumber = 1;
    private long longVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LongVal {
      get { return longVal_; }
      set {
        longVal_ = value;
      }
    }

    /// <summary>Field number for the "intVal1" field.</summary>
    public const int IntVal1FieldNumber = 2;
    private int intVal1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntVal1 {
      get { return intVal1_; }
      set {
        intVal1_ = value;
      }
    }

    /// <summary>Field number for the "intVal2" field.</summary>
    public const int IntVal2FieldNumber = 3;
    private int intVal2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntVal2 {
      get { return intVal2_; }
      set {
        intVal2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TwoIntegerAndLongValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TwoIntegerAndLongValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LongVal != other.LongVal) return false;
      if (IntVal1 != other.IntVal1) return false;
      if (IntVal2 != other.IntVal2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LongVal != 0L) hash ^= LongVal.GetHashCode();
      if (IntVal1 != 0) hash ^= IntVal1.GetHashCode();
      if (IntVal2 != 0) hash ^= IntVal2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LongVal != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LongVal);
      }
      if (IntVal1 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IntVal1);
      }
      if (IntVal2 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IntVal2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LongVal != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LongVal);
      }
      if (IntVal1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntVal1);
      }
      if (IntVal2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntVal2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TwoIntegerAndLongValue other) {
      if (other == null) {
        return;
      }
      if (other.LongVal != 0L) {
        LongVal = other.LongVal;
      }
      if (other.IntVal1 != 0) {
        IntVal1 = other.IntVal1;
      }
      if (other.IntVal2 != 0) {
        IntVal2 = other.IntVal2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LongVal = input.ReadInt64();
            break;
          }
          case 16: {
            IntVal1 = input.ReadInt32();
            break;
          }
          case 24: {
            IntVal2 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StringValue : pb::IMessage<StringValue> {
    private static readonly pb::MessageParser<StringValue> _parser = new pb::MessageParser<StringValue>(() => new StringValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringValue(StringValue other) : this() {
      val_ = other.val_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringValue Clone() {
      return new StringValue(this);
    }

    /// <summary>Field number for the "val" field.</summary>
    public const int ValFieldNumber = 1;
    private string val_ = "";
    /// <summary>
    /// 字符串参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Val {
      get { return val_; }
      set {
        val_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Val != other.Val) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Val.Length != 0) hash ^= Val.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Val.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Val);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Val.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Val);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringValue other) {
      if (other == null) {
        return;
      }
      if (other.Val.Length != 0) {
        Val = other.Val;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Val = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FloatValue : pb::IMessage<FloatValue> {
    private static readonly pb::MessageParser<FloatValue> _parser = new pb::MessageParser<FloatValue>(() => new FloatValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FloatValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FloatValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FloatValue(FloatValue other) : this() {
      val_ = other.val_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FloatValue Clone() {
      return new FloatValue(this);
    }

    /// <summary>Field number for the "val" field.</summary>
    public const int ValFieldNumber = 1;
    private float val_;
    /// <summary>
    /// float参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Val {
      get { return val_; }
      set {
        val_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FloatValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FloatValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Val, other.Val)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Val != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Val);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Val != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Val);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Val != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FloatValue other) {
      if (other == null) {
        return;
      }
      if (other.Val != 0F) {
        Val = other.Val;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Val = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StringValues : pb::IMessage<StringValues> {
    private static readonly pb::MessageParser<StringValues> _parser = new pb::MessageParser<StringValues>(() => new StringValues());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringValues> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringValues() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringValues(StringValues other) : this() {
      vals_ = other.vals_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringValues Clone() {
      return new StringValues(this);
    }

    /// <summary>Field number for the "vals" field.</summary>
    public const int ValsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_vals_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> vals_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 字符数组参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Vals {
      get { return vals_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringValues);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringValues other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!vals_.Equals(other.vals_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= vals_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      vals_.WriteTo(output, _repeated_vals_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += vals_.CalculateSize(_repeated_vals_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringValues other) {
      if (other == null) {
        return;
      }
      vals_.Add(other.vals_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            vals_.AddEntriesFrom(input, _repeated_vals_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Status : pb::IMessage<Status> {
    private static readonly pb::MessageParser<Status> _parser = new pb::MessageParser<Status>(() => new Status());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Status> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status(Status other) : this() {
      code_ = other.code_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status Clone() {
      return new Status(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Status);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Status other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Status other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IntegerAndLong : pb::IMessage<IntegerAndLong> {
    private static readonly pb::MessageParser<IntegerAndLong> _parser = new pb::MessageParser<IntegerAndLong>(() => new IntegerAndLong());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntegerAndLong> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntegerAndLong() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntegerAndLong(IntegerAndLong other) : this() {
      intVal_ = other.intVal_;
      longVal_ = other.longVal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntegerAndLong Clone() {
      return new IntegerAndLong(this);
    }

    /// <summary>Field number for the "int_val" field.</summary>
    public const int IntValFieldNumber = 1;
    private int intVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntVal {
      get { return intVal_; }
      set {
        intVal_ = value;
      }
    }

    /// <summary>Field number for the "long_val" field.</summary>
    public const int LongValFieldNumber = 2;
    private long longVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LongVal {
      get { return longVal_; }
      set {
        longVal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntegerAndLong);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntegerAndLong other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IntVal != other.IntVal) return false;
      if (LongVal != other.LongVal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IntVal != 0) hash ^= IntVal.GetHashCode();
      if (LongVal != 0L) hash ^= LongVal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IntVal != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IntVal);
      }
      if (LongVal != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LongVal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IntVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntVal);
      }
      if (LongVal != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LongVal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntegerAndLong other) {
      if (other == null) {
        return;
      }
      if (other.IntVal != 0) {
        IntVal = other.IntVal;
      }
      if (other.LongVal != 0L) {
        LongVal = other.LongVal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IntVal = input.ReadInt32();
            break;
          }
          case 16: {
            LongVal = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IntegerAndString : pb::IMessage<IntegerAndString> {
    private static readonly pb::MessageParser<IntegerAndString> _parser = new pb::MessageParser<IntegerAndString>(() => new IntegerAndString());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntegerAndString> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntegerAndString() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntegerAndString(IntegerAndString other) : this() {
      intVal_ = other.intVal_;
      stringVal_ = other.stringVal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntegerAndString Clone() {
      return new IntegerAndString(this);
    }

    /// <summary>Field number for the "int_val" field.</summary>
    public const int IntValFieldNumber = 1;
    private int intVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntVal {
      get { return intVal_; }
      set {
        intVal_ = value;
      }
    }

    /// <summary>Field number for the "string_val" field.</summary>
    public const int StringValFieldNumber = 2;
    private string stringVal_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringVal {
      get { return stringVal_; }
      set {
        stringVal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntegerAndString);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntegerAndString other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IntVal != other.IntVal) return false;
      if (StringVal != other.StringVal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IntVal != 0) hash ^= IntVal.GetHashCode();
      if (StringVal.Length != 0) hash ^= StringVal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IntVal != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IntVal);
      }
      if (StringVal.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StringVal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IntVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntVal);
      }
      if (StringVal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringVal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntegerAndString other) {
      if (other == null) {
        return;
      }
      if (other.IntVal != 0) {
        IntVal = other.IntVal;
      }
      if (other.StringVal.Length != 0) {
        StringVal = other.StringVal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IntVal = input.ReadInt32();
            break;
          }
          case 18: {
            StringVal = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像使用 非游戏内
  /// </summary>
  public sealed partial class GamePosCards : pb::IMessage<GamePosCards> {
    private static readonly pb::MessageParser<GamePosCards> _parser = new pb::MessageParser<GamePosCards>(() => new GamePosCards());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GamePosCards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePosCards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePosCards(GamePosCards other) : this() {
      roomId_ = other.roomId_;
      posIndex_ = other.posIndex_;
      cards_ = other.cards_.Clone();
      firstPushPos_ = other.firstPushPos_;
      param_ = other.param_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePosCards Clone() {
      return new GamePosCards(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pos_index" field.</summary>
    public const int PosIndexFieldNumber = 2;
    private int posIndex_;
    /// <summary>
    /// 座位索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosIndex {
      get { return posIndex_; }
      set {
        posIndex_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "firstPushPos" field.</summary>
    public const int FirstPushPosFieldNumber = 4;
    private int firstPushPos_;
    /// <summary>
    /// 先出牌的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstPushPos {
      get { return firstPushPos_; }
      set {
        firstPushPos_ = value;
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 5;
    private string param_ = "";
    /// <summary>
    /// 预留参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Param {
      get { return param_; }
      set {
        param_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GamePosCards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GamePosCards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (PosIndex != other.PosIndex) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if (FirstPushPos != other.FirstPushPos) return false;
      if (Param != other.Param) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (PosIndex != 0) hash ^= PosIndex.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (FirstPushPos != 0) hash ^= FirstPushPos.GetHashCode();
      if (Param.Length != 0) hash ^= Param.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (PosIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PosIndex);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (FirstPushPos != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FirstPushPos);
      }
      if (Param.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Param);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (PosIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosIndex);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (FirstPushPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstPushPos);
      }
      if (Param.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Param);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GamePosCards other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.PosIndex != 0) {
        PosIndex = other.PosIndex;
      }
      cards_.Add(other.cards_);
      if (other.FirstPushPos != 0) {
        FirstPushPos = other.FirstPushPos;
      }
      if (other.Param.Length != 0) {
        Param = other.Param;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 16: {
            PosIndex = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 32: {
            FirstPushPos = input.ReadInt32();
            break;
          }
          case 42: {
            Param = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像使用 非游戏内
  /// </summary>
  public sealed partial class GameAction : pb::IMessage<GameAction> {
    private static readonly pb::MessageParser<GameAction> _parser = new pb::MessageParser<GameAction>(() => new GameAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameAction(GameAction other) : this() {
      roomId_ = other.roomId_;
      posIndex_ = other.posIndex_;
      actionType_ = other.actionType_;
      multiple_ = other.multiple_;
      cards_ = other.cards_.Clone();
      cards0_ = other.cards0_.Clone();
      cards1_ = other.cards1_.Clone();
      cards2_ = other.cards2_.Clone();
      rank_ = other.rank_;
      cardsLeft_ = other.cardsLeft_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameAction Clone() {
      return new GameAction(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private long roomId_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "pos_index" field.</summary>
    public const int PosIndexFieldNumber = 2;
    private int posIndex_;
    /// <summary>
    /// 座位索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosIndex {
      get { return posIndex_; }
      set {
        posIndex_ = value;
      }
    }

    /// <summary>Field number for the "action_type" field.</summary>
    public const int ActionTypeFieldNumber = 3;
    private int actionType_;
    /// <summary>
    /// 动作类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionType {
      get { return actionType_; }
      set {
        actionType_ = value;
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 4;
    private int multiple_;
    /// <summary>
    /// 倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 要出的牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "cards0" field.</summary>
    public const int Cards0FieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_cards0_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> cards0_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards0 {
      get { return cards0_; }
    }

    /// <summary>Field number for the "cards1" field.</summary>
    public const int Cards1FieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_cards1_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> cards1_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards1 {
      get { return cards1_; }
    }

    /// <summary>Field number for the "cards2" field.</summary>
    public const int Cards2FieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_cards2_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> cards2_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards2 {
      get { return cards2_; }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 9;
    private int rank_;
    /// <summary>
    /// 牌力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "cardsLeft" field.</summary>
    public const int CardsLeftFieldNumber = 10;
    private int cardsLeft_;
    /// <summary>
    /// 手里剩下牌的张数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardsLeft {
      get { return cardsLeft_; }
      set {
        cardsLeft_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (PosIndex != other.PosIndex) return false;
      if (ActionType != other.ActionType) return false;
      if (Multiple != other.Multiple) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if(!cards0_.Equals(other.cards0_)) return false;
      if(!cards1_.Equals(other.cards1_)) return false;
      if(!cards2_.Equals(other.cards2_)) return false;
      if (Rank != other.Rank) return false;
      if (CardsLeft != other.CardsLeft) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (PosIndex != 0) hash ^= PosIndex.GetHashCode();
      if (ActionType != 0) hash ^= ActionType.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      hash ^= cards_.GetHashCode();
      hash ^= cards0_.GetHashCode();
      hash ^= cards1_.GetHashCode();
      hash ^= cards2_.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (CardsLeft != 0) hash ^= CardsLeft.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (PosIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PosIndex);
      }
      if (ActionType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActionType);
      }
      if (Multiple != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Multiple);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      cards0_.WriteTo(output, _repeated_cards0_codec);
      cards1_.WriteTo(output, _repeated_cards1_codec);
      cards2_.WriteTo(output, _repeated_cards2_codec);
      if (Rank != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Rank);
      }
      if (CardsLeft != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CardsLeft);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (PosIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosIndex);
      }
      if (ActionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionType);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      size += cards0_.CalculateSize(_repeated_cards0_codec);
      size += cards1_.CalculateSize(_repeated_cards1_codec);
      size += cards2_.CalculateSize(_repeated_cards2_codec);
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (CardsLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardsLeft);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameAction other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.PosIndex != 0) {
        PosIndex = other.PosIndex;
      }
      if (other.ActionType != 0) {
        ActionType = other.ActionType;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
      cards_.Add(other.cards_);
      cards0_.Add(other.cards0_);
      cards1_.Add(other.cards1_);
      cards2_.Add(other.cards2_);
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.CardsLeft != 0) {
        CardsLeft = other.CardsLeft;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            PosIndex = input.ReadInt32();
            break;
          }
          case 24: {
            ActionType = input.ReadInt32();
            break;
          }
          case 32: {
            Multiple = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 50:
          case 48: {
            cards0_.AddEntriesFrom(input, _repeated_cards0_codec);
            break;
          }
          case 58:
          case 56: {
            cards1_.AddEntriesFrom(input, _repeated_cards1_codec);
            break;
          }
          case 66:
          case 64: {
            cards2_.AddEntriesFrom(input, _repeated_cards2_codec);
            break;
          }
          case 72: {
            Rank = input.ReadInt32();
            break;
          }
          case 80: {
            CardsLeft = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///视频列表
  /// </summary>
  public sealed partial class VideotapeList : pb::IMessage<VideotapeList> {
    private static readonly pb::MessageParser<VideotapeList> _parser = new pb::MessageParser<VideotapeList>(() => new VideotapeList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideotapeList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideotapeList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideotapeList(VideotapeList other) : this() {
      gameId_ = other.gameId_;
      jvNum_ = other.jvNum_;
      roomId_ = other.roomId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideotapeList Clone() {
      return new VideotapeList(this);
    }

    /// <summary>Field number for the "gameId" field.</summary>
    public const int GameIdFieldNumber = 1;
    private int gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "jvNum" field.</summary>
    public const int JvNumFieldNumber = 2;
    private int jvNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JvNum {
      get { return jvNum_; }
      set {
        jvNum_ = value;
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 3;
    private string roomId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VideotapeList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VideotapeList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if (JvNum != other.JvNum) return false;
      if (RoomId != other.RoomId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (JvNum != 0) hash ^= JvNum.GetHashCode();
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameId);
      }
      if (JvNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(JvNum);
      }
      if (RoomId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (JvNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JvNum);
      }
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VideotapeList other) {
      if (other == null) {
        return;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      if (other.JvNum != 0) {
        JvNum = other.JvNum;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameId = input.ReadInt32();
            break;
          }
          case 16: {
            JvNum = input.ReadInt32();
            break;
          }
          case 26: {
            RoomId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 单局录像
  /// </summary>
  public sealed partial class Videotape : pb::IMessage<Videotape> {
    private static readonly pb::MessageParser<Videotape> _parser = new pb::MessageParser<Videotape>(() => new Videotape());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Videotape> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Videotape() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Videotape(Videotape other) : this() {
      posCards_ = other.posCards_.Clone();
      roomAction_ = other.roomAction_.Clone();
      startWin_ = other.startWin_.Clone();
      endWin_ = other.endWin_.Clone();
      infos_ = other.infos_.Clone();
      curInningId_ = other.curInningId_;
      inningId_ = other.inningId_;
      paodekuai_ = other.paodekuai_ != null ? other.paodekuai_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Videotape Clone() {
      return new Videotape(this);
    }

    /// <summary>Field number for the "posCards" field.</summary>
    public const int PosCardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.GamePosCards> _repeated_posCards_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.GamePosCards.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.GamePosCards> posCards_ = new pbc::RepeatedField<global::Centersdk.Protobuf.GamePosCards>();
    /// <summary>
    /// 每局的玩家发牌手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.GamePosCards> PosCards {
      get { return posCards_; }
    }

    /// <summary>Field number for the "roomAction" field.</summary>
    public const int RoomActionFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.GameAction> _repeated_roomAction_codec
        = pb::FieldCodec.ForMessage(18, global::Centersdk.Protobuf.GameAction.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.GameAction> roomAction_ = new pbc::RepeatedField<global::Centersdk.Protobuf.GameAction>();
    /// <summary>
    /// 每次玩家的操作出牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.GameAction> RoomAction {
      get { return roomAction_; }
    }

    /// <summary>Field number for the "startWin" field.</summary>
    public const int StartWinFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_startWin_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> startWin_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 每人的输赢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> StartWin {
      get { return startWin_; }
    }

    /// <summary>Field number for the "endWin" field.</summary>
    public const int EndWinFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_endWin_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> endWin_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 每人的输赢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> EndWin {
      get { return endWin_; }
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.GamePlayerInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(42, global::Centersdk.Protobuf.GamePlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.GamePlayerInfo> infos_ = new pbc::RepeatedField<global::Centersdk.Protobuf.GamePlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.GamePlayerInfo> Infos {
      get { return infos_; }
    }

    /// <summary>Field number for the "curInningId" field.</summary>
    public const int CurInningIdFieldNumber = 6;
    private int curInningId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurInningId {
      get { return curInningId_; }
      set {
        curInningId_ = value;
      }
    }

    /// <summary>Field number for the "inningId" field.</summary>
    public const int InningIdFieldNumber = 7;
    private int inningId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InningId {
      get { return inningId_; }
      set {
        inningId_ = value;
      }
    }

    /// <summary>Field number for the "paodekuai" field.</summary>
    public const int PaodekuaiFieldNumber = 8;
    private global::Centersdk.Protobuf.PaoDeKuai paodekuai_;
    /// <summary>
    /// 创建房间规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Centersdk.Protobuf.PaoDeKuai Paodekuai {
      get { return paodekuai_; }
      set {
        paodekuai_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Videotape);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Videotape other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!posCards_.Equals(other.posCards_)) return false;
      if(!roomAction_.Equals(other.roomAction_)) return false;
      if(!startWin_.Equals(other.startWin_)) return false;
      if(!endWin_.Equals(other.endWin_)) return false;
      if(!infos_.Equals(other.infos_)) return false;
      if (CurInningId != other.CurInningId) return false;
      if (InningId != other.InningId) return false;
      if (!object.Equals(Paodekuai, other.Paodekuai)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= posCards_.GetHashCode();
      hash ^= roomAction_.GetHashCode();
      hash ^= startWin_.GetHashCode();
      hash ^= endWin_.GetHashCode();
      hash ^= infos_.GetHashCode();
      if (CurInningId != 0) hash ^= CurInningId.GetHashCode();
      if (InningId != 0) hash ^= InningId.GetHashCode();
      if (paodekuai_ != null) hash ^= Paodekuai.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      posCards_.WriteTo(output, _repeated_posCards_codec);
      roomAction_.WriteTo(output, _repeated_roomAction_codec);
      startWin_.WriteTo(output, _repeated_startWin_codec);
      endWin_.WriteTo(output, _repeated_endWin_codec);
      infos_.WriteTo(output, _repeated_infos_codec);
      if (CurInningId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CurInningId);
      }
      if (InningId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(InningId);
      }
      if (paodekuai_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Paodekuai);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += posCards_.CalculateSize(_repeated_posCards_codec);
      size += roomAction_.CalculateSize(_repeated_roomAction_codec);
      size += startWin_.CalculateSize(_repeated_startWin_codec);
      size += endWin_.CalculateSize(_repeated_endWin_codec);
      size += infos_.CalculateSize(_repeated_infos_codec);
      if (CurInningId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurInningId);
      }
      if (InningId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InningId);
      }
      if (paodekuai_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Paodekuai);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Videotape other) {
      if (other == null) {
        return;
      }
      posCards_.Add(other.posCards_);
      roomAction_.Add(other.roomAction_);
      startWin_.Add(other.startWin_);
      endWin_.Add(other.endWin_);
      infos_.Add(other.infos_);
      if (other.CurInningId != 0) {
        CurInningId = other.CurInningId;
      }
      if (other.InningId != 0) {
        InningId = other.InningId;
      }
      if (other.paodekuai_ != null) {
        if (paodekuai_ == null) {
          paodekuai_ = new global::Centersdk.Protobuf.PaoDeKuai();
        }
        Paodekuai.MergeFrom(other.Paodekuai);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            posCards_.AddEntriesFrom(input, _repeated_posCards_codec);
            break;
          }
          case 18: {
            roomAction_.AddEntriesFrom(input, _repeated_roomAction_codec);
            break;
          }
          case 26:
          case 24: {
            startWin_.AddEntriesFrom(input, _repeated_startWin_codec);
            break;
          }
          case 34:
          case 32: {
            endWin_.AddEntriesFrom(input, _repeated_endWin_codec);
            break;
          }
          case 42: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
          case 48: {
            CurInningId = input.ReadInt32();
            break;
          }
          case 56: {
            InningId = input.ReadInt32();
            break;
          }
          case 66: {
            if (paodekuai_ == null) {
              paodekuai_ = new global::Centersdk.Protobuf.PaoDeKuai();
            }
            input.ReadMessage(paodekuai_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 录像集合
  /// </summary>
  public sealed partial class Videotapes : pb::IMessage<Videotapes> {
    private static readonly pb::MessageParser<Videotapes> _parser = new pb::MessageParser<Videotapes>(() => new Videotapes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Videotapes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Videotapes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Videotapes(Videotapes other) : this() {
      videotape_ = other.videotape_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Videotapes Clone() {
      return new Videotapes(this);
    }

    /// <summary>Field number for the "videotape" field.</summary>
    public const int VideotapeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.Videotape> _repeated_videotape_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.Videotape.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.Videotape> videotape_ = new pbc::RepeatedField<global::Centersdk.Protobuf.Videotape>();
    /// <summary>
    /// 本局录像集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.Videotape> Videotape {
      get { return videotape_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Videotapes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Videotapes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!videotape_.Equals(other.videotape_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= videotape_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      videotape_.WriteTo(output, _repeated_videotape_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += videotape_.CalculateSize(_repeated_videotape_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Videotapes other) {
      if (other == null) {
        return;
      }
      videotape_.Add(other.videotape_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            videotape_.AddEntriesFrom(input, _repeated_videotape_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 单局战绩
  /// </summary>
  public sealed partial class CombatRecord : pb::IMessage<CombatRecord> {
    private static readonly pb::MessageParser<CombatRecord> _parser = new pb::MessageParser<CombatRecord>(() => new CombatRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CombatRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatRecord(CombatRecord other) : this() {
      endTime_ = other.endTime_;
      roomId_ = other.roomId_;
      gameId_ = other.gameId_;
      jvNum_ = other.jvNum_;
      playerNum_ = other.playerNum_;
      winGold_ = other.winGold_;
      record_ = other.record_ != null ? other.record_.Clone() : null;
      curJvNum_ = other.curJvNum_;
      cost_ = other.cost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatRecord Clone() {
      return new CombatRecord(this);
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 1;
    private long endTime_;
    /// <summary>
    /// 结算时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private string roomId_ = "";
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gameId" field.</summary>
    public const int GameIdFieldNumber = 3;
    private int gameId_;
    /// <summary>
    /// 游戏ID 区分哪个游戏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "jvNum" field.</summary>
    public const int JvNumFieldNumber = 4;
    private int jvNum_;
    /// <summary>
    /// 局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JvNum {
      get { return jvNum_; }
      set {
        jvNum_ = value;
      }
    }

    /// <summary>Field number for the "playerNum" field.</summary>
    public const int PlayerNumFieldNumber = 5;
    private int playerNum_;
    /// <summary>
    /// 几人场
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerNum {
      get { return playerNum_; }
      set {
        playerNum_ = value;
      }
    }

    /// <summary>Field number for the "winGold" field.</summary>
    public const int WinGoldFieldNumber = 6;
    private int winGold_;
    /// <summary>
    /// 我的输赢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinGold {
      get { return winGold_; }
      set {
        winGold_ = value;
      }
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 7;
    private global::Centersdk.Protobuf.DetailsCombatRecord record_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Centersdk.Protobuf.DetailsCombatRecord Record {
      get { return record_; }
      set {
        record_ = value;
      }
    }

    /// <summary>Field number for the "curJvNum" field.</summary>
    public const int CurJvNumFieldNumber = 8;
    private int curJvNum_;
    /// <summary>
    /// 进行的局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurJvNum {
      get { return curJvNum_; }
      set {
        curJvNum_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 9;
    private int cost_;
    /// <summary>
    /// 消耗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CombatRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CombatRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EndTime != other.EndTime) return false;
      if (RoomId != other.RoomId) return false;
      if (GameId != other.GameId) return false;
      if (JvNum != other.JvNum) return false;
      if (PlayerNum != other.PlayerNum) return false;
      if (WinGold != other.WinGold) return false;
      if (!object.Equals(Record, other.Record)) return false;
      if (CurJvNum != other.CurJvNum) return false;
      if (Cost != other.Cost) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (JvNum != 0) hash ^= JvNum.GetHashCode();
      if (PlayerNum != 0) hash ^= PlayerNum.GetHashCode();
      if (WinGold != 0) hash ^= WinGold.GetHashCode();
      if (record_ != null) hash ^= Record.GetHashCode();
      if (CurJvNum != 0) hash ^= CurJvNum.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EndTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EndTime);
      }
      if (RoomId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomId);
      }
      if (GameId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GameId);
      }
      if (JvNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(JvNum);
      }
      if (PlayerNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PlayerNum);
      }
      if (WinGold != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(WinGold);
      }
      if (record_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Record);
      }
      if (CurJvNum != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CurJvNum);
      }
      if (Cost != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (JvNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JvNum);
      }
      if (PlayerNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerNum);
      }
      if (WinGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinGold);
      }
      if (record_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Record);
      }
      if (CurJvNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurJvNum);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CombatRecord other) {
      if (other == null) {
        return;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      if (other.JvNum != 0) {
        JvNum = other.JvNum;
      }
      if (other.PlayerNum != 0) {
        PlayerNum = other.PlayerNum;
      }
      if (other.WinGold != 0) {
        WinGold = other.WinGold;
      }
      if (other.record_ != null) {
        if (record_ == null) {
          record_ = new global::Centersdk.Protobuf.DetailsCombatRecord();
        }
        Record.MergeFrom(other.Record);
      }
      if (other.CurJvNum != 0) {
        CurJvNum = other.CurJvNum;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EndTime = input.ReadInt64();
            break;
          }
          case 18: {
            RoomId = input.ReadString();
            break;
          }
          case 24: {
            GameId = input.ReadInt32();
            break;
          }
          case 32: {
            JvNum = input.ReadInt32();
            break;
          }
          case 40: {
            PlayerNum = input.ReadInt32();
            break;
          }
          case 48: {
            WinGold = input.ReadInt32();
            break;
          }
          case 58: {
            if (record_ == null) {
              record_ = new global::Centersdk.Protobuf.DetailsCombatRecord();
            }
            input.ReadMessage(record_);
            break;
          }
          case 64: {
            CurJvNum = input.ReadInt32();
            break;
          }
          case 72: {
            Cost = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 所有战绩
  /// </summary>
  public sealed partial class CombatRecords : pb::IMessage<CombatRecords> {
    private static readonly pb::MessageParser<CombatRecords> _parser = new pb::MessageParser<CombatRecords>(() => new CombatRecords());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CombatRecords> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatRecords() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatRecords(CombatRecords other) : this() {
      records_ = other.records_.Clone();
      costDiamonds_ = other.costDiamonds_;
      tables_ = other.tables_;
      maxPage_ = other.maxPage_;
      curPage_ = other.curPage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatRecords Clone() {
      return new CombatRecords(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.CombatRecord> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.CombatRecord.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.CombatRecord> records_ = new pbc::RepeatedField<global::Centersdk.Protobuf.CombatRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.CombatRecord> Records {
      get { return records_; }
    }

    /// <summary>Field number for the "costDiamonds" field.</summary>
    public const int CostDiamondsFieldNumber = 2;
    private int costDiamonds_;
    /// <summary>
    /// 消耗钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostDiamonds {
      get { return costDiamonds_; }
      set {
        costDiamonds_ = value;
      }
    }

    /// <summary>Field number for the "tables" field.</summary>
    public const int TablesFieldNumber = 3;
    private int tables_;
    /// <summary>
    /// 桌数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tables {
      get { return tables_; }
      set {
        tables_ = value;
      }
    }

    /// <summary>Field number for the "maxPage" field.</summary>
    public const int MaxPageFieldNumber = 4;
    private int maxPage_;
    /// <summary>
    /// 最大页数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPage {
      get { return maxPage_; }
      set {
        maxPage_ = value;
      }
    }

    /// <summary>Field number for the "curPage" field.</summary>
    public const int CurPageFieldNumber = 5;
    private int curPage_;
    /// <summary>
    /// 当前页数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurPage {
      get { return curPage_; }
      set {
        curPage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CombatRecords);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CombatRecords other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!records_.Equals(other.records_)) return false;
      if (CostDiamonds != other.CostDiamonds) return false;
      if (Tables != other.Tables) return false;
      if (MaxPage != other.MaxPage) return false;
      if (CurPage != other.CurPage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= records_.GetHashCode();
      if (CostDiamonds != 0) hash ^= CostDiamonds.GetHashCode();
      if (Tables != 0) hash ^= Tables.GetHashCode();
      if (MaxPage != 0) hash ^= MaxPage.GetHashCode();
      if (CurPage != 0) hash ^= CurPage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      records_.WriteTo(output, _repeated_records_codec);
      if (CostDiamonds != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CostDiamonds);
      }
      if (Tables != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Tables);
      }
      if (MaxPage != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxPage);
      }
      if (CurPage != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CurPage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_repeated_records_codec);
      if (CostDiamonds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostDiamonds);
      }
      if (Tables != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tables);
      }
      if (MaxPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPage);
      }
      if (CurPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurPage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CombatRecords other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
      if (other.CostDiamonds != 0) {
        CostDiamonds = other.CostDiamonds;
      }
      if (other.Tables != 0) {
        Tables = other.Tables;
      }
      if (other.MaxPage != 0) {
        MaxPage = other.MaxPage;
      }
      if (other.CurPage != 0) {
        CurPage = other.CurPage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
          case 16: {
            CostDiamonds = input.ReadInt32();
            break;
          }
          case 24: {
            Tables = input.ReadInt32();
            break;
          }
          case 32: {
            MaxPage = input.ReadInt32();
            break;
          }
          case 40: {
            CurPage = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 详细战绩
  /// </summary>
  public sealed partial class DetailsCombatRecord : pb::IMessage<DetailsCombatRecord> {
    private static readonly pb::MessageParser<DetailsCombatRecord> _parser = new pb::MessageParser<DetailsCombatRecord>(() => new DetailsCombatRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DetailsCombatRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetailsCombatRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetailsCombatRecord(DetailsCombatRecord other) : this() {
      roomOwnerId_ = other.roomOwnerId_;
      ownerName_ = other.ownerName_;
      ownerHeadURL_ = other.ownerHeadURL_;
      roomId_ = other.roomId_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      gameId_ = other.gameId_;
      jvNum_ = other.jvNum_;
      createType_ = other.createType_;
      infos_ = other.infos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetailsCombatRecord Clone() {
      return new DetailsCombatRecord(this);
    }

    /// <summary>Field number for the "roomOwnerId" field.</summary>
    public const int RoomOwnerIdFieldNumber = 1;
    private long roomOwnerId_;
    /// <summary>
    /// 房主ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomOwnerId {
      get { return roomOwnerId_; }
      set {
        roomOwnerId_ = value;
      }
    }

    /// <summary>Field number for the "ownerName" field.</summary>
    public const int OwnerNameFieldNumber = 2;
    private string ownerName_ = "";
    /// <summary>
    /// 房主名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerName {
      get { return ownerName_; }
      set {
        ownerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ownerHeadURL" field.</summary>
    public const int OwnerHeadURLFieldNumber = 3;
    private string ownerHeadURL_ = "";
    /// <summary>
    /// 房主头像地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerHeadURL {
      get { return ownerHeadURL_; }
      set {
        ownerHeadURL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 4;
    private string roomId_ = "";
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private long startTime_;
    /// <summary>
    /// 开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 6;
    private long endTime_;
    /// <summary>
    /// 结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "gameId" field.</summary>
    public const int GameIdFieldNumber = 7;
    private int gameId_;
    /// <summary>
    /// 游戏ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "jvNum" field.</summary>
    public const int JvNumFieldNumber = 8;
    private int jvNum_;
    /// <summary>
    /// 总局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JvNum {
      get { return jvNum_; }
      set {
        jvNum_ = value;
      }
    }

    /// <summary>Field number for the "createType" field.</summary>
    public const int CreateTypeFieldNumber = 9;
    private int createType_;
    /// <summary>
    /// 是否亲友圈创建  0 是 1 不是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CreateType {
      get { return createType_; }
      set {
        createType_ = value;
      }
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.GamePlayerInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(82, global::Centersdk.Protobuf.GamePlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.GamePlayerInfo> infos_ = new pbc::RepeatedField<global::Centersdk.Protobuf.GamePlayerInfo>();
    /// <summary>
    /// 玩家输赢信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.GamePlayerInfo> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DetailsCombatRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DetailsCombatRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomOwnerId != other.RoomOwnerId) return false;
      if (OwnerName != other.OwnerName) return false;
      if (OwnerHeadURL != other.OwnerHeadURL) return false;
      if (RoomId != other.RoomId) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (GameId != other.GameId) return false;
      if (JvNum != other.JvNum) return false;
      if (CreateType != other.CreateType) return false;
      if(!infos_.Equals(other.infos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomOwnerId != 0L) hash ^= RoomOwnerId.GetHashCode();
      if (OwnerName.Length != 0) hash ^= OwnerName.GetHashCode();
      if (OwnerHeadURL.Length != 0) hash ^= OwnerHeadURL.GetHashCode();
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (JvNum != 0) hash ^= JvNum.GetHashCode();
      if (CreateType != 0) hash ^= CreateType.GetHashCode();
      hash ^= infos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomOwnerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomOwnerId);
      }
      if (OwnerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OwnerName);
      }
      if (OwnerHeadURL.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OwnerHeadURL);
      }
      if (RoomId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RoomId);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(EndTime);
      }
      if (GameId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GameId);
      }
      if (JvNum != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(JvNum);
      }
      if (CreateType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CreateType);
      }
      infos_.WriteTo(output, _repeated_infos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomOwnerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomOwnerId);
      }
      if (OwnerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerName);
      }
      if (OwnerHeadURL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerHeadURL);
      }
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (JvNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JvNum);
      }
      if (CreateType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CreateType);
      }
      size += infos_.CalculateSize(_repeated_infos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DetailsCombatRecord other) {
      if (other == null) {
        return;
      }
      if (other.RoomOwnerId != 0L) {
        RoomOwnerId = other.RoomOwnerId;
      }
      if (other.OwnerName.Length != 0) {
        OwnerName = other.OwnerName;
      }
      if (other.OwnerHeadURL.Length != 0) {
        OwnerHeadURL = other.OwnerHeadURL;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      if (other.JvNum != 0) {
        JvNum = other.JvNum;
      }
      if (other.CreateType != 0) {
        CreateType = other.CreateType;
      }
      infos_.Add(other.infos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomOwnerId = input.ReadInt64();
            break;
          }
          case 18: {
            OwnerName = input.ReadString();
            break;
          }
          case 26: {
            OwnerHeadURL = input.ReadString();
            break;
          }
          case 34: {
            RoomId = input.ReadString();
            break;
          }
          case 40: {
            StartTime = input.ReadInt64();
            break;
          }
          case 48: {
            EndTime = input.ReadInt64();
            break;
          }
          case 56: {
            GameId = input.ReadInt32();
            break;
          }
          case 64: {
            JvNum = input.ReadInt32();
            break;
          }
          case 72: {
            CreateType = input.ReadInt32();
            break;
          }
          case 82: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 房间内玩家信息
  /// </summary>
  public sealed partial class GamePlayerInfo : pb::IMessage<GamePlayerInfo> {
    private static readonly pb::MessageParser<GamePlayerInfo> _parser = new pb::MessageParser<GamePlayerInfo>(() => new GamePlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GamePlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePlayerInfo(GamePlayerInfo other) : this() {
      userId_ = other.userId_;
      userName_ = other.userName_;
      headUrl_ = other.headUrl_;
      winGold_ = other.winGold_;
      posIndex_ = other.posIndex_;
      scores_ = other.scores_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePlayerInfo Clone() {
      return new GamePlayerInfo(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    /// <summary>
    /// 玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headUrl" field.</summary>
    public const int HeadUrlFieldNumber = 3;
    private string headUrl_ = "";
    /// <summary>
    /// 头像地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadUrl {
      get { return headUrl_; }
      set {
        headUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "winGold" field.</summary>
    public const int WinGoldFieldNumber = 4;
    private int winGold_;
    /// <summary>
    /// 玩家输赢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinGold {
      get { return winGold_; }
      set {
        winGold_ = value;
      }
    }

    /// <summary>Field number for the "pos_index" field.</summary>
    public const int PosIndexFieldNumber = 5;
    private int posIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosIndex {
      get { return posIndex_; }
      set {
        posIndex_ = value;
      }
    }

    /// <summary>Field number for the "scores" field.</summary>
    public const int ScoresFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.ScoreChange> _repeated_scores_codec
        = pb::FieldCodec.ForMessage(50, global::Centersdk.Protobuf.ScoreChange.Parser);
    private readonly pbc::RepeatedField<global::Centersdk.Protobuf.ScoreChange> scores_ = new pbc::RepeatedField<global::Centersdk.Protobuf.ScoreChange>();
    /// <summary>
    /// 积分变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Centersdk.Protobuf.ScoreChange> Scores {
      get { return scores_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GamePlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GamePlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (UserName != other.UserName) return false;
      if (HeadUrl != other.HeadUrl) return false;
      if (WinGold != other.WinGold) return false;
      if (PosIndex != other.PosIndex) return false;
      if(!scores_.Equals(other.scores_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (HeadUrl.Length != 0) hash ^= HeadUrl.GetHashCode();
      if (WinGold != 0) hash ^= WinGold.GetHashCode();
      if (PosIndex != 0) hash ^= PosIndex.GetHashCode();
      hash ^= scores_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (HeadUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HeadUrl);
      }
      if (WinGold != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WinGold);
      }
      if (PosIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PosIndex);
      }
      scores_.WriteTo(output, _repeated_scores_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (HeadUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadUrl);
      }
      if (WinGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinGold);
      }
      if (PosIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosIndex);
      }
      size += scores_.CalculateSize(_repeated_scores_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GamePlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.HeadUrl.Length != 0) {
        HeadUrl = other.HeadUrl;
      }
      if (other.WinGold != 0) {
        WinGold = other.WinGold;
      }
      if (other.PosIndex != 0) {
        PosIndex = other.PosIndex;
      }
      scores_.Add(other.scores_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 26: {
            HeadUrl = input.ReadString();
            break;
          }
          case 32: {
            WinGold = input.ReadInt32();
            break;
          }
          case 40: {
            PosIndex = input.ReadInt32();
            break;
          }
          case 50: {
            scores_.AddEntriesFrom(input, _repeated_scores_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 每局积分变化
  /// </summary>
  public sealed partial class ScoreChange : pb::IMessage<ScoreChange> {
    private static readonly pb::MessageParser<ScoreChange> _parser = new pb::MessageParser<ScoreChange>(() => new ScoreChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScoreChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreChange(ScoreChange other) : this() {
      times_ = other.times_;
      changeValue_ = other.changeValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreChange Clone() {
      return new ScoreChange(this);
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 1;
    private long times_;
    /// <summary>
    /// 对局时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    /// <summary>Field number for the "changeValue" field.</summary>
    public const int ChangeValueFieldNumber = 2;
    private int changeValue_;
    /// <summary>
    /// 积分变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeValue {
      get { return changeValue_; }
      set {
        changeValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScoreChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScoreChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Times != other.Times) return false;
      if (ChangeValue != other.ChangeValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Times != 0L) hash ^= Times.GetHashCode();
      if (ChangeValue != 0) hash ^= ChangeValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Times != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Times);
      }
      if (ChangeValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChangeValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Times != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Times);
      }
      if (ChangeValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScoreChange other) {
      if (other == null) {
        return;
      }
      if (other.Times != 0L) {
        Times = other.Times;
      }
      if (other.ChangeValue != 0) {
        ChangeValue = other.ChangeValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Times = input.ReadInt64();
            break;
          }
          case 16: {
            ChangeValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///聊天
  /// </summary>
  public sealed partial class DeskChat : pb::IMessage<DeskChat> {
    private static readonly pb::MessageParser<DeskChat> _parser = new pb::MessageParser<DeskChat>(() => new DeskChat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeskChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeskChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeskChat(DeskChat other) : this() {
      code_ = other.code_;
      description_ = other.description_;
      type_ = other.type_;
      userId_ = other.userId_;
      userName_ = other.userName_;
      userHeadUrl_ = other.userHeadUrl_;
      time_ = other.time_;
      isDisplay_ = other.isDisplay_;
      voiceId_ = other.voiceId_;
      voiceTimes_ = other.voiceTimes_;
      imageId_ = other.imageId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeskChat Clone() {
      return new DeskChat(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    /// 状态码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// 描述信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    /// 类型  1 文字 2 语音 3 图片
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 4;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 5;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userHeadUrl" field.</summary>
    public const int UserHeadUrlFieldNumber = 6;
    private string userHeadUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserHeadUrl {
      get { return userHeadUrl_; }
      set {
        userHeadUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 7;
    private long time_;
    /// <summary>
    /// 当前发言时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "isDisplay" field.</summary>
    public const int IsDisplayFieldNumber = 8;
    private bool isDisplay_;
    /// <summary>
    /// 是否显示时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDisplay {
      get { return isDisplay_; }
      set {
        isDisplay_ = value;
      }
    }

    /// <summary>Field number for the "voiceId" field.</summary>
    public const int VoiceIdFieldNumber = 9;
    private string voiceId_ = "";
    /// <summary>
    /// 语音聊天的语音ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VoiceId {
      get { return voiceId_; }
      set {
        voiceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "voiceTimes" field.</summary>
    public const int VoiceTimesFieldNumber = 10;
    private int voiceTimes_;
    /// <summary>
    /// 语音聊天秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VoiceTimes {
      get { return voiceTimes_; }
      set {
        voiceTimes_ = value;
      }
    }

    /// <summary>Field number for the "imageId" field.</summary>
    public const int ImageIdFieldNumber = 11;
    private string imageId_ = "";
    /// <summary>
    /// 图片
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageId {
      get { return imageId_; }
      set {
        imageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeskChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeskChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Description != other.Description) return false;
      if (Type != other.Type) return false;
      if (UserId != other.UserId) return false;
      if (UserName != other.UserName) return false;
      if (UserHeadUrl != other.UserHeadUrl) return false;
      if (Time != other.Time) return false;
      if (IsDisplay != other.IsDisplay) return false;
      if (VoiceId != other.VoiceId) return false;
      if (VoiceTimes != other.VoiceTimes) return false;
      if (ImageId != other.ImageId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (UserHeadUrl.Length != 0) hash ^= UserHeadUrl.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (IsDisplay != false) hash ^= IsDisplay.GetHashCode();
      if (VoiceId.Length != 0) hash ^= VoiceId.GetHashCode();
      if (VoiceTimes != 0) hash ^= VoiceTimes.GetHashCode();
      if (ImageId.Length != 0) hash ^= ImageId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (UserId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UserId);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UserName);
      }
      if (UserHeadUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UserHeadUrl);
      }
      if (Time != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Time);
      }
      if (IsDisplay != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsDisplay);
      }
      if (VoiceId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(VoiceId);
      }
      if (VoiceTimes != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(VoiceTimes);
      }
      if (ImageId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ImageId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (UserHeadUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserHeadUrl);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (IsDisplay != false) {
        size += 1 + 1;
      }
      if (VoiceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VoiceId);
      }
      if (VoiceTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VoiceTimes);
      }
      if (ImageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeskChat other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.UserHeadUrl.Length != 0) {
        UserHeadUrl = other.UserHeadUrl;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.IsDisplay != false) {
        IsDisplay = other.IsDisplay;
      }
      if (other.VoiceId.Length != 0) {
        VoiceId = other.VoiceId;
      }
      if (other.VoiceTimes != 0) {
        VoiceTimes = other.VoiceTimes;
      }
      if (other.ImageId.Length != 0) {
        ImageId = other.ImageId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            UserId = input.ReadInt64();
            break;
          }
          case 42: {
            UserName = input.ReadString();
            break;
          }
          case 50: {
            UserHeadUrl = input.ReadString();
            break;
          }
          case 56: {
            Time = input.ReadInt64();
            break;
          }
          case 64: {
            IsDisplay = input.ReadBool();
            break;
          }
          case 74: {
            VoiceId = input.ReadString();
            break;
          }
          case 80: {
            VoiceTimes = input.ReadInt32();
            break;
          }
          case 90: {
            ImageId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 创建房间请求
  /// </summary>
  public sealed partial class PaoDeKuai : pb::IMessage<PaoDeKuai> {
    private static readonly pb::MessageParser<PaoDeKuai> _parser = new pb::MessageParser<PaoDeKuai>(() => new PaoDeKuai());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PaoDeKuai> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaoDeKuai() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaoDeKuai(PaoDeKuai other) : this() {
      jvNum_ = other.jvNum_;
      pushCard_ = other.pushCard_;
      rule_ = other.rule_;
      finalOp_ = other.finalOp_.Clone();
      gamePlay_ = other.gamePlay_.Clone();
      displayCard_ = other.displayCard_;
      tuoguan_ = other.tuoguan_;
      piao_ = other.piao_;
      gaoji_ = other.gaoji_.Clone();
      playerNum_ = other.playerNum_;
      typeId_ = other.typeId_;
      local_ = other.local_;
      createType_ = other.createType_;
      gameId_ = other.gameId_;
      payType_ = other.payType_;
      qyqRoomId_ = other.qyqRoomId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaoDeKuai Clone() {
      return new PaoDeKuai(this);
    }

    /// <summary>Field number for the "jvNum" field.</summary>
    public const int JvNumFieldNumber = 1;
    private int jvNum_;
    /// <summary>
    /// 局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JvNum {
      get { return jvNum_; }
      set {
        jvNum_ = value;
      }
    }

    /// <summary>Field number for the "pushCard" field.</summary>
    public const int PushCardFieldNumber = 2;
    private int pushCard_;
    /// <summary>
    /// 出牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PushCard {
      get { return pushCard_; }
      set {
        pushCard_ = value;
      }
    }

    /// <summary>Field number for the "rule" field.</summary>
    public const int RuleFieldNumber = 3;
    private int rule_;
    /// <summary>
    /// 规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rule {
      get { return rule_; }
      set {
        rule_ = value;
      }
    }

    /// <summary>Field number for the "finalOp" field.</summary>
    public const int FinalOpFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_finalOp_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> finalOp_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 最后 从左至右 0123
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FinalOp {
      get { return finalOp_; }
    }

    /// <summary>Field number for the "gamePlay" field.</summary>
    public const int GamePlayFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_gamePlay_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> gamePlay_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩法 从左至右 0123
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GamePlay {
      get { return gamePlay_; }
    }

    /// <summary>Field number for the "displayCard" field.</summary>
    public const int DisplayCardFieldNumber = 6;
    private int displayCard_;
    /// <summary>
    /// 余牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DisplayCard {
      get { return displayCard_; }
      set {
        displayCard_ = value;
      }
    }

    /// <summary>Field number for the "tuoguan" field.</summary>
    public const int TuoguanFieldNumber = 7;
    private int tuoguan_;
    /// <summary>
    /// 托管
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tuoguan {
      get { return tuoguan_; }
      set {
        tuoguan_ = value;
      }
    }

    /// <summary>Field number for the "piao" field.</summary>
    public const int PiaoFieldNumber = 8;
    private int piao_;
    /// <summary>
    /// 飘   0不开启飘功能  123 开启对应的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Piao {
      get { return piao_; }
      set {
        piao_ = value;
      }
    }

    /// <summary>Field number for the "gaoji" field.</summary>
    public const int GaojiFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_gaoji_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> gaoji_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 高级 从左至右 01234
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Gaoji {
      get { return gaoji_; }
    }

    /// <summary>Field number for the "playerNum" field.</summary>
    public const int PlayerNumFieldNumber = 10;
    private int playerNum_;
    /// <summary>
    /// 几人玩法  目前只有3人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerNum {
      get { return playerNum_; }
      set {
        playerNum_ = value;
      }
    }

    /// <summary>Field number for the "typeId" field.</summary>
    public const int TypeIdFieldNumber = 11;
    private int typeId_;
    /// <summary>
    /// 16张  还是  15张 还是其他
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeId {
      get { return typeId_; }
      set {
        typeId_ = value;
      }
    }

    /// <summary>Field number for the "local" field.</summary>
    public const int LocalFieldNumber = 12;
    private int local_;
    /// <summary>
    /// 是否添加测试机器人  0 不添加  1 添加
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Local {
      get { return local_; }
      set {
        local_ = value;
      }
    }

    /// <summary>Field number for the "createType" field.</summary>
    public const int CreateTypeFieldNumber = 13;
    private int createType_;
    /// <summary>
    /// 0 非亲友圈 其他 亲友圈ID 7位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CreateType {
      get { return createType_; }
      set {
        createType_ = value;
      }
    }

    /// <summary>Field number for the "gameId" field.</summary>
    public const int GameIdFieldNumber = 14;
    private int gameId_;
    /// <summary>
    /// 游戏id 跑得快 1；长沙麻将 2；歪胡子 3；
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "payType" field.</summary>
    public const int PayTypeFieldNumber = 15;
    private int payType_;
    /// <summary>
    /// 房费类型 0 (如果亲友圈ID是0则是房卡否则是大赢家)  1 AA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PayType {
      get { return payType_; }
      set {
        payType_ = value;
      }
    }

    /// <summary>Field number for the "qyqRoomId" field.</summary>
    public const int QyqRoomIdFieldNumber = 16;
    private string qyqRoomId_ = "";
    /// <summary>
    /// 亲友圈牌桌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QyqRoomId {
      get { return qyqRoomId_; }
      set {
        qyqRoomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PaoDeKuai);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PaoDeKuai other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (JvNum != other.JvNum) return false;
      if (PushCard != other.PushCard) return false;
      if (Rule != other.Rule) return false;
      if(!finalOp_.Equals(other.finalOp_)) return false;
      if(!gamePlay_.Equals(other.gamePlay_)) return false;
      if (DisplayCard != other.DisplayCard) return false;
      if (Tuoguan != other.Tuoguan) return false;
      if (Piao != other.Piao) return false;
      if(!gaoji_.Equals(other.gaoji_)) return false;
      if (PlayerNum != other.PlayerNum) return false;
      if (TypeId != other.TypeId) return false;
      if (Local != other.Local) return false;
      if (CreateType != other.CreateType) return false;
      if (GameId != other.GameId) return false;
      if (PayType != other.PayType) return false;
      if (QyqRoomId != other.QyqRoomId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (JvNum != 0) hash ^= JvNum.GetHashCode();
      if (PushCard != 0) hash ^= PushCard.GetHashCode();
      if (Rule != 0) hash ^= Rule.GetHashCode();
      hash ^= finalOp_.GetHashCode();
      hash ^= gamePlay_.GetHashCode();
      if (DisplayCard != 0) hash ^= DisplayCard.GetHashCode();
      if (Tuoguan != 0) hash ^= Tuoguan.GetHashCode();
      if (Piao != 0) hash ^= Piao.GetHashCode();
      hash ^= gaoji_.GetHashCode();
      if (PlayerNum != 0) hash ^= PlayerNum.GetHashCode();
      if (TypeId != 0) hash ^= TypeId.GetHashCode();
      if (Local != 0) hash ^= Local.GetHashCode();
      if (CreateType != 0) hash ^= CreateType.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (PayType != 0) hash ^= PayType.GetHashCode();
      if (QyqRoomId.Length != 0) hash ^= QyqRoomId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (JvNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(JvNum);
      }
      if (PushCard != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PushCard);
      }
      if (Rule != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rule);
      }
      finalOp_.WriteTo(output, _repeated_finalOp_codec);
      gamePlay_.WriteTo(output, _repeated_gamePlay_codec);
      if (DisplayCard != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DisplayCard);
      }
      if (Tuoguan != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Tuoguan);
      }
      if (Piao != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Piao);
      }
      gaoji_.WriteTo(output, _repeated_gaoji_codec);
      if (PlayerNum != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(PlayerNum);
      }
      if (TypeId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TypeId);
      }
      if (Local != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Local);
      }
      if (CreateType != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CreateType);
      }
      if (GameId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(GameId);
      }
      if (PayType != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(PayType);
      }
      if (QyqRoomId.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(QyqRoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JvNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JvNum);
      }
      if (PushCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PushCard);
      }
      if (Rule != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rule);
      }
      size += finalOp_.CalculateSize(_repeated_finalOp_codec);
      size += gamePlay_.CalculateSize(_repeated_gamePlay_codec);
      if (DisplayCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DisplayCard);
      }
      if (Tuoguan != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tuoguan);
      }
      if (Piao != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Piao);
      }
      size += gaoji_.CalculateSize(_repeated_gaoji_codec);
      if (PlayerNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerNum);
      }
      if (TypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeId);
      }
      if (Local != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Local);
      }
      if (CreateType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CreateType);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (PayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PayType);
      }
      if (QyqRoomId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(QyqRoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PaoDeKuai other) {
      if (other == null) {
        return;
      }
      if (other.JvNum != 0) {
        JvNum = other.JvNum;
      }
      if (other.PushCard != 0) {
        PushCard = other.PushCard;
      }
      if (other.Rule != 0) {
        Rule = other.Rule;
      }
      finalOp_.Add(other.finalOp_);
      gamePlay_.Add(other.gamePlay_);
      if (other.DisplayCard != 0) {
        DisplayCard = other.DisplayCard;
      }
      if (other.Tuoguan != 0) {
        Tuoguan = other.Tuoguan;
      }
      if (other.Piao != 0) {
        Piao = other.Piao;
      }
      gaoji_.Add(other.gaoji_);
      if (other.PlayerNum != 0) {
        PlayerNum = other.PlayerNum;
      }
      if (other.TypeId != 0) {
        TypeId = other.TypeId;
      }
      if (other.Local != 0) {
        Local = other.Local;
      }
      if (other.CreateType != 0) {
        CreateType = other.CreateType;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      if (other.PayType != 0) {
        PayType = other.PayType;
      }
      if (other.QyqRoomId.Length != 0) {
        QyqRoomId = other.QyqRoomId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            JvNum = input.ReadInt32();
            break;
          }
          case 16: {
            PushCard = input.ReadInt32();
            break;
          }
          case 24: {
            Rule = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            finalOp_.AddEntriesFrom(input, _repeated_finalOp_codec);
            break;
          }
          case 42:
          case 40: {
            gamePlay_.AddEntriesFrom(input, _repeated_gamePlay_codec);
            break;
          }
          case 48: {
            DisplayCard = input.ReadInt32();
            break;
          }
          case 56: {
            Tuoguan = input.ReadInt32();
            break;
          }
          case 64: {
            Piao = input.ReadInt32();
            break;
          }
          case 74:
          case 72: {
            gaoji_.AddEntriesFrom(input, _repeated_gaoji_codec);
            break;
          }
          case 80: {
            PlayerNum = input.ReadInt32();
            break;
          }
          case 88: {
            TypeId = input.ReadInt32();
            break;
          }
          case 96: {
            Local = input.ReadInt32();
            break;
          }
          case 104: {
            CreateType = input.ReadInt32();
            break;
          }
          case 112: {
            GameId = input.ReadInt32();
            break;
          }
          case 120: {
            PayType = input.ReadInt32();
            break;
          }
          case 130: {
            QyqRoomId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 大厅和服务器间跳转
  /// </summary>
  public sealed partial class QuickLogin : pb::IMessage<QuickLogin> {
    private static readonly pb::MessageParser<QuickLogin> _parser = new pb::MessageParser<QuickLogin>(() => new QuickLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuickLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuickLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuickLogin(QuickLogin other) : this() {
      ip_ = other.ip_;
      port_ = other.port_;
      gameId_ = other.gameId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuickLogin Clone() {
      return new QuickLogin(this);
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 1;
    private string ip_ = "";
    /// <summary>
    /// 服务器域名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    /// <summary>
    /// 服务器端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "gameId" field.</summary>
    public const int GameIdFieldNumber = 3;
    private int gameId_;
    /// <summary>
    /// 游戏类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuickLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuickLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (GameId != other.GameId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (GameId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuickLogin other) {
      if (other == null) {
        return;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ip = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
          case 24: {
            GameId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 亲友圈房间状态
  /// </summary>
  public sealed partial class CommunityStatus : pb::IMessage<CommunityStatus> {
    private static readonly pb::MessageParser<CommunityStatus> _parser = new pb::MessageParser<CommunityStatus>(() => new CommunityStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommunityStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centersdk.Protobuf.CommonReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunityStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunityStatus(CommunityStatus other) : this() {
      roomId_ = other.roomId_;
      communityId_ = other.communityId_;
      userId_ = other.userId_;
      createId_ = other.createId_;
      curRound_ = other.curRound_;
      maxRound_ = other.maxRound_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunityStatus Clone() {
      return new CommunityStatus(this);
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "communityId" field.</summary>
    public const int CommunityIdFieldNumber = 2;
    private long communityId_;
    /// <summary>
    /// 亲友圈ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CommunityId {
      get { return communityId_; }
      set {
        communityId_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 3;
    private long userId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "createId" field.</summary>
    public const int CreateIdFieldNumber = 4;
    private string createId_ = "";
    /// <summary>
    /// 亲友圈牌桌玩法编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateId {
      get { return createId_; }
      set {
        createId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "curRound" field.</summary>
    public const int CurRoundFieldNumber = 5;
    private int curRound_;
    /// <summary>
    /// 当前局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurRound {
      get { return curRound_; }
      set {
        curRound_ = value;
      }
    }

    /// <summary>Field number for the "maxRound" field.</summary>
    public const int MaxRoundFieldNumber = 6;
    private int maxRound_;
    /// <summary>
    /// 最大局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxRound {
      get { return maxRound_; }
      set {
        maxRound_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommunityStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommunityStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (CommunityId != other.CommunityId) return false;
      if (UserId != other.UserId) return false;
      if (CreateId != other.CreateId) return false;
      if (CurRound != other.CurRound) return false;
      if (MaxRound != other.MaxRound) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (CommunityId != 0L) hash ^= CommunityId.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (CreateId.Length != 0) hash ^= CreateId.GetHashCode();
      if (CurRound != 0) hash ^= CurRound.GetHashCode();
      if (MaxRound != 0) hash ^= MaxRound.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (CommunityId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CommunityId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
      if (CreateId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CreateId);
      }
      if (CurRound != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CurRound);
      }
      if (MaxRound != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxRound);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (CommunityId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommunityId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (CreateId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateId);
      }
      if (CurRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurRound);
      }
      if (MaxRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRound);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommunityStatus other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.CommunityId != 0L) {
        CommunityId = other.CommunityId;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.CreateId.Length != 0) {
        CreateId = other.CreateId;
      }
      if (other.CurRound != 0) {
        CurRound = other.CurRound;
      }
      if (other.MaxRound != 0) {
        MaxRound = other.MaxRound;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 16: {
            CommunityId = input.ReadInt64();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
          case 34: {
            CreateId = input.ReadString();
            break;
          }
          case 40: {
            CurRound = input.ReadInt32();
            break;
          }
          case 48: {
            MaxRound = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
