// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: lobby_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Lobbyservice.Protobuf {

  /// <summary>Holder for reflection information generated from lobby_service.proto</summary>
  public static partial class LobbyServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for lobby_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LobbyServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNsb2JieV9zZXJ2aWNlLnByb3RvEhVsb2JieXNlcnZpY2UucHJvdG9idWYi",
            "3AEKDExvZ2luUmVxdWVzdBIOCgZvcGVuSWQYASABKAkSEgoKcHJvZHVjdF9p",
            "ZBgCIAEoCRIKCgJwZhgDIAEoCRIPCgdjaGFubmVsGAQgASgJEhMKC2NoYW5u",
            "ZWxfdWlkGAUgASgJEhQKDGFjY2Vzc190b2tlbhgGIAEoCRIRCgljaGFubmVs",
            "SWQYByABKAkSDwoHdmVyc2lvbhgIIAEoCRISCgpwaG9uZV90eXBlGAkgASgJ",
            "EgwKBGlkZmEYCiABKAkSDAoEaWRmdhgLIAEoCRIMCgRpbWVpGAwgASgJIrYB",
            "Cg1Mb2dpblJlc3BvbnNlEgwKBGNvZGUYASABKAUSDAoEZ29sZBgCIAEoAxIP",
            "CgdkaWFtb25kGAMgASgDEg4KBnVzZXJJZBgEIAEoAxIMCgRuYW1lGAUgASgJ",
            "Eg0KBWxldmVsGAYgASgFEgsKA3NleBgHIAEoCRISCgpoZWFkSW1nVXJsGAgg",
            "ASgJEgsKA2V4cBgJIAEoAxIRCglpc05ld1VzZXIYCiABKAgSCgoCaXAYCyAB",
            "KAkirgEKEVdlY2hhdExvZ2luT2JqZWN0Eg0KBWFwcElkGAEgASgJEg8KB3d4",
            "QXBwSWQYAiABKAkSDQoFdG9rZW4YAyABKAkSDgoGb3BlbklkGAQgASgJEgoK",
            "AnBmGAUgASgJEg0KBXBmS2V5GAYgASgJEg8KB3ZlcnNpb24YByABKAkSEgoK",
            "cGhvbmVfdHlwZRgIIAEoCRIMCgRpZGZhGAkgASgJEgwKBGlkZnYYCiABKAlC",
            "MgodY29tLmhvb2xhaS5jb21tb25hcHAucHJvdG9idWZCEUxvYmJ5U2Vydmlj",
            "ZVByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Lobbyservice.Protobuf.LoginRequest), global::Lobbyservice.Protobuf.LoginRequest.Parser, new[]{ "OpenId", "ProductId", "Pf", "Channel", "ChannelUid", "AccessToken", "ChannelId", "Version", "PhoneType", "Idfa", "Idfv", "Imei" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lobbyservice.Protobuf.LoginResponse), global::Lobbyservice.Protobuf.LoginResponse.Parser, new[]{ "Code", "Gold", "Diamond", "UserId", "Name", "Level", "Sex", "HeadImgUrl", "Exp", "IsNewUser", "Ip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lobbyservice.Protobuf.WechatLoginObject), global::Lobbyservice.Protobuf.WechatLoginObject.Parser, new[]{ "AppId", "WxAppId", "Token", "OpenId", "Pf", "PfKey", "Version", "PhoneType", "Idfa", "Idfv" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///用户登录响应信息
  ///用户登录请求信息
  /// </summary>
  public sealed partial class LoginRequest : pb::IMessage<LoginRequest> {
    private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lobbyservice.Protobuf.LobbyServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest(LoginRequest other) : this() {
      openId_ = other.openId_;
      productId_ = other.productId_;
      pf_ = other.pf_;
      channel_ = other.channel_;
      channelUid_ = other.channelUid_;
      accessToken_ = other.accessToken_;
      channelId_ = other.channelId_;
      version_ = other.version_;
      phoneType_ = other.phoneType_;
      idfa_ = other.idfa_;
      idfv_ = other.idfv_;
      imei_ = other.imei_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest Clone() {
      return new LoginRequest(this);
    }

    /// <summary>Field number for the "openId" field.</summary>
    public const int OpenIdFieldNumber = 1;
    private string openId_ = "";
    /// <summary>
    /// 用户唯一标识。(一般是用户登录后，游戏客户端获取的uid)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpenId {
      get { return openId_; }
      set {
        openId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "product_id" field.</summary>
    public const int ProductIdFieldNumber = 2;
    private string productId_ = "";
    /// <summary>
    /// 该产品的产品id (客户端代码:FastSdk.getChannelInterface().getChannelInfo().getProductId())
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pf" field.</summary>
    public const int PfFieldNumber = 3;
    private string pf_ = "";
    /// <summary>
    /// 平台信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pf {
      get { return pf_; }
      set {
        pf_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 4;
    private string channel_ = "";
    /// <summary>
    /// 用户登录后，游戏客户端获取的channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel_uid" field.</summary>
    public const int ChannelUidFieldNumber = 5;
    private string channelUid_ = "";
    /// <summary>
    /// 用户登录后，游戏客户端获取的channelUid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelUid {
      get { return channelUid_; }
      set {
        channelUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "access_token" field.</summary>
    public const int AccessTokenFieldNumber = 6;
    private string accessToken_ = "";
    /// <summary>
    /// 用户登录后，游戏客户端获取的登陆令牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channelId" field.</summary>
    public const int ChannelIdFieldNumber = 7;
    private string channelId_ = "";
    /// <summary>
    /// 渠道ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelId {
      get { return channelId_; }
      set {
        channelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 8;
    private string version_ = "";
    /// <summary>
    /// 用户登录版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "phone_type" field.</summary>
    public const int PhoneTypeFieldNumber = 9;
    private string phoneType_ = "";
    /// <summary>
    /// 手机型号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhoneType {
      get { return phoneType_; }
      set {
        phoneType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "idfa" field.</summary>
    public const int IdfaFieldNumber = 10;
    private string idfa_ = "";
    /// <summary>
    /// 广告标示符
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Idfa {
      get { return idfa_; }
      set {
        idfa_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "idfv" field.</summary>
    public const int IdfvFieldNumber = 11;
    private string idfv_ = "";
    /// <summary>
    /// Vindor标示符
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Idfv {
      get { return idfv_; }
      set {
        idfv_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imei" field.</summary>
    public const int ImeiFieldNumber = 12;
    private string imei_ = "";
    /// <summary>
    /// 手机的唯一识别号码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Imei {
      get { return imei_; }
      set {
        imei_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OpenId != other.OpenId) return false;
      if (ProductId != other.ProductId) return false;
      if (Pf != other.Pf) return false;
      if (Channel != other.Channel) return false;
      if (ChannelUid != other.ChannelUid) return false;
      if (AccessToken != other.AccessToken) return false;
      if (ChannelId != other.ChannelId) return false;
      if (Version != other.Version) return false;
      if (PhoneType != other.PhoneType) return false;
      if (Idfa != other.Idfa) return false;
      if (Idfv != other.Idfv) return false;
      if (Imei != other.Imei) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OpenId.Length != 0) hash ^= OpenId.GetHashCode();
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      if (Pf.Length != 0) hash ^= Pf.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (ChannelUid.Length != 0) hash ^= ChannelUid.GetHashCode();
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      if (ChannelId.Length != 0) hash ^= ChannelId.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (PhoneType.Length != 0) hash ^= PhoneType.GetHashCode();
      if (Idfa.Length != 0) hash ^= Idfa.GetHashCode();
      if (Idfv.Length != 0) hash ^= Idfv.GetHashCode();
      if (Imei.Length != 0) hash ^= Imei.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OpenId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OpenId);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductId);
      }
      if (Pf.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Pf);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Channel);
      }
      if (ChannelUid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ChannelUid);
      }
      if (AccessToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AccessToken);
      }
      if (ChannelId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ChannelId);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Version);
      }
      if (PhoneType.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PhoneType);
      }
      if (Idfa.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Idfa);
      }
      if (Idfv.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Idfv);
      }
      if (Imei.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Imei);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OpenId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenId);
      }
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (Pf.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pf);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (ChannelUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelUid);
      }
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (ChannelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelId);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (PhoneType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhoneType);
      }
      if (Idfa.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Idfa);
      }
      if (Idfv.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Idfv);
      }
      if (Imei.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Imei);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.OpenId.Length != 0) {
        OpenId = other.OpenId;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
      if (other.Pf.Length != 0) {
        Pf = other.Pf;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.ChannelUid.Length != 0) {
        ChannelUid = other.ChannelUid;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      if (other.ChannelId.Length != 0) {
        ChannelId = other.ChannelId;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.PhoneType.Length != 0) {
        PhoneType = other.PhoneType;
      }
      if (other.Idfa.Length != 0) {
        Idfa = other.Idfa;
      }
      if (other.Idfv.Length != 0) {
        Idfv = other.Idfv;
      }
      if (other.Imei.Length != 0) {
        Imei = other.Imei;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OpenId = input.ReadString();
            break;
          }
          case 18: {
            ProductId = input.ReadString();
            break;
          }
          case 26: {
            Pf = input.ReadString();
            break;
          }
          case 34: {
            Channel = input.ReadString();
            break;
          }
          case 42: {
            ChannelUid = input.ReadString();
            break;
          }
          case 50: {
            AccessToken = input.ReadString();
            break;
          }
          case 58: {
            ChannelId = input.ReadString();
            break;
          }
          case 66: {
            Version = input.ReadString();
            break;
          }
          case 74: {
            PhoneType = input.ReadString();
            break;
          }
          case 82: {
            Idfa = input.ReadString();
            break;
          }
          case 90: {
            Idfv = input.ReadString();
            break;
          }
          case 98: {
            Imei = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户登录响应信息
  /// </summary>
  public sealed partial class LoginResponse : pb::IMessage<LoginResponse> {
    private static readonly pb::MessageParser<LoginResponse> _parser = new pb::MessageParser<LoginResponse>(() => new LoginResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lobbyservice.Protobuf.LobbyServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse(LoginResponse other) : this() {
      code_ = other.code_;
      gold_ = other.gold_;
      diamond_ = other.diamond_;
      userId_ = other.userId_;
      name_ = other.name_;
      level_ = other.level_;
      sex_ = other.sex_;
      headImgUrl_ = other.headImgUrl_;
      exp_ = other.exp_;
      isNewUser_ = other.isNewUser_;
      ip_ = other.ip_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse Clone() {
      return new LoginResponse(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    /// 登录码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 2;
    private long gold_;
    /// <summary>
    /// 金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int DiamondFieldNumber = 3;
    private long diamond_;
    /// <summary>
    /// 钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 4;
    private long userId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    /// <summary>
    /// 角色名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 6;
    private int level_;
    /// <summary>
    /// 角色等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 7;
    private string sex_ = "";
    /// <summary>
    /// 性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sex {
      get { return sex_; }
      set {
        sex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headImgUrl" field.</summary>
    public const int HeadImgUrlFieldNumber = 8;
    private string headImgUrl_ = "";
    /// <summary>
    /// 头像地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadImgUrl {
      get { return headImgUrl_; }
      set {
        headImgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 9;
    private long exp_;
    /// <summary>
    /// 当前经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "isNewUser" field.</summary>
    public const int IsNewUserFieldNumber = 10;
    private bool isNewUser_;
    /// <summary>
    /// 是否新用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNewUser {
      get { return isNewUser_; }
      set {
        isNewUser_ = value;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 11;
    private string ip_ = "";
    /// <summary>
    /// IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Gold != other.Gold) return false;
      if (Diamond != other.Diamond) return false;
      if (UserId != other.UserId) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (Sex != other.Sex) return false;
      if (HeadImgUrl != other.HeadImgUrl) return false;
      if (Exp != other.Exp) return false;
      if (IsNewUser != other.IsNewUser) return false;
      if (Ip != other.Ip) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Gold != 0L) hash ^= Gold.GetHashCode();
      if (Diamond != 0L) hash ^= Diamond.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Sex.Length != 0) hash ^= Sex.GetHashCode();
      if (HeadImgUrl.Length != 0) hash ^= HeadImgUrl.GetHashCode();
      if (Exp != 0L) hash ^= Exp.GetHashCode();
      if (IsNewUser != false) hash ^= IsNewUser.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Gold != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Gold);
      }
      if (Diamond != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Diamond);
      }
      if (UserId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UserId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Level);
      }
      if (Sex.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Sex);
      }
      if (HeadImgUrl.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(HeadImgUrl);
      }
      if (Exp != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Exp);
      }
      if (IsNewUser != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsNewUser);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Ip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (Diamond != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Diamond);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Sex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sex);
      }
      if (HeadImgUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadImgUrl);
      }
      if (Exp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Exp);
      }
      if (IsNewUser != false) {
        size += 1 + 1;
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResponse other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Gold != 0L) {
        Gold = other.Gold;
      }
      if (other.Diamond != 0L) {
        Diamond = other.Diamond;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Sex.Length != 0) {
        Sex = other.Sex;
      }
      if (other.HeadImgUrl.Length != 0) {
        HeadImgUrl = other.HeadImgUrl;
      }
      if (other.Exp != 0L) {
        Exp = other.Exp;
      }
      if (other.IsNewUser != false) {
        IsNewUser = other.IsNewUser;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Gold = input.ReadInt64();
            break;
          }
          case 24: {
            Diamond = input.ReadInt64();
            break;
          }
          case 32: {
            UserId = input.ReadInt64();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 48: {
            Level = input.ReadInt32();
            break;
          }
          case 58: {
            Sex = input.ReadString();
            break;
          }
          case 66: {
            HeadImgUrl = input.ReadString();
            break;
          }
          case 72: {
            Exp = input.ReadInt64();
            break;
          }
          case 80: {
            IsNewUser = input.ReadBool();
            break;
          }
          case 90: {
            Ip = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///* 微信登录信息*
  /// </summary>
  public sealed partial class WechatLoginObject : pb::IMessage<WechatLoginObject> {
    private static readonly pb::MessageParser<WechatLoginObject> _parser = new pb::MessageParser<WechatLoginObject>(() => new WechatLoginObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WechatLoginObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lobbyservice.Protobuf.LobbyServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WechatLoginObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WechatLoginObject(WechatLoginObject other) : this() {
      appId_ = other.appId_;
      wxAppId_ = other.wxAppId_;
      token_ = other.token_;
      openId_ = other.openId_;
      pf_ = other.pf_;
      pfKey_ = other.pfKey_;
      version_ = other.version_;
      phoneType_ = other.phoneType_;
      idfa_ = other.idfa_;
      idfv_ = other.idfv_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WechatLoginObject Clone() {
      return new WechatLoginObject(this);
    }

    /// <summary>Field number for the "appId" field.</summary>
    public const int AppIdFieldNumber = 1;
    private string appId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppId {
      get { return appId_; }
      set {
        appId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wxAppId" field.</summary>
    public const int WxAppIdFieldNumber = 2;
    private string wxAppId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WxAppId {
      get { return wxAppId_; }
      set {
        wxAppId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    /// <summary>
    /// 微信的token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "openId" field.</summary>
    public const int OpenIdFieldNumber = 4;
    private string openId_ = "";
    /// <summary>
    /// 微信的openId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpenId {
      get { return openId_; }
      set {
        openId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pf" field.</summary>
    public const int PfFieldNumber = 5;
    private string pf_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pf {
      get { return pf_; }
      set {
        pf_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pfKey" field.</summary>
    public const int PfKeyFieldNumber = 6;
    private string pfKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PfKey {
      get { return pfKey_; }
      set {
        pfKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 7;
    private string version_ = "";
    /// <summary>
    /// 用户登录版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "phone_type" field.</summary>
    public const int PhoneTypeFieldNumber = 8;
    private string phoneType_ = "";
    /// <summary>
    /// 手机型号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhoneType {
      get { return phoneType_; }
      set {
        phoneType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "idfa" field.</summary>
    public const int IdfaFieldNumber = 9;
    private string idfa_ = "";
    /// <summary>
    /// 广告标示符
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Idfa {
      get { return idfa_; }
      set {
        idfa_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "idfv" field.</summary>
    public const int IdfvFieldNumber = 10;
    private string idfv_ = "";
    /// <summary>
    /// Vindor标示符
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Idfv {
      get { return idfv_; }
      set {
        idfv_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WechatLoginObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WechatLoginObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AppId != other.AppId) return false;
      if (WxAppId != other.WxAppId) return false;
      if (Token != other.Token) return false;
      if (OpenId != other.OpenId) return false;
      if (Pf != other.Pf) return false;
      if (PfKey != other.PfKey) return false;
      if (Version != other.Version) return false;
      if (PhoneType != other.PhoneType) return false;
      if (Idfa != other.Idfa) return false;
      if (Idfv != other.Idfv) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AppId.Length != 0) hash ^= AppId.GetHashCode();
      if (WxAppId.Length != 0) hash ^= WxAppId.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (OpenId.Length != 0) hash ^= OpenId.GetHashCode();
      if (Pf.Length != 0) hash ^= Pf.GetHashCode();
      if (PfKey.Length != 0) hash ^= PfKey.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (PhoneType.Length != 0) hash ^= PhoneType.GetHashCode();
      if (Idfa.Length != 0) hash ^= Idfa.GetHashCode();
      if (Idfv.Length != 0) hash ^= Idfv.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AppId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AppId);
      }
      if (WxAppId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WxAppId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (OpenId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(OpenId);
      }
      if (Pf.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Pf);
      }
      if (PfKey.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PfKey);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Version);
      }
      if (PhoneType.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PhoneType);
      }
      if (Idfa.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Idfa);
      }
      if (Idfv.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Idfv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AppId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppId);
      }
      if (WxAppId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WxAppId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (OpenId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenId);
      }
      if (Pf.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pf);
      }
      if (PfKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PfKey);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (PhoneType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhoneType);
      }
      if (Idfa.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Idfa);
      }
      if (Idfv.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Idfv);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WechatLoginObject other) {
      if (other == null) {
        return;
      }
      if (other.AppId.Length != 0) {
        AppId = other.AppId;
      }
      if (other.WxAppId.Length != 0) {
        WxAppId = other.WxAppId;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.OpenId.Length != 0) {
        OpenId = other.OpenId;
      }
      if (other.Pf.Length != 0) {
        Pf = other.Pf;
      }
      if (other.PfKey.Length != 0) {
        PfKey = other.PfKey;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.PhoneType.Length != 0) {
        PhoneType = other.PhoneType;
      }
      if (other.Idfa.Length != 0) {
        Idfa = other.Idfa;
      }
      if (other.Idfv.Length != 0) {
        Idfv = other.Idfv;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AppId = input.ReadString();
            break;
          }
          case 18: {
            WxAppId = input.ReadString();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 34: {
            OpenId = input.ReadString();
            break;
          }
          case 42: {
            Pf = input.ReadString();
            break;
          }
          case 50: {
            PfKey = input.ReadString();
            break;
          }
          case 58: {
            Version = input.ReadString();
            break;
          }
          case 66: {
            PhoneType = input.ReadString();
            break;
          }
          case 74: {
            Idfa = input.ReadString();
            break;
          }
          case 82: {
            Idfv = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
