// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: equipment.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Centersdk.Protobuf {

  #region Messages
  /// <summary>
  /// 装备列表
  /// </summary>
  public sealed class EquipmentList : pb::IMessage {
    private static readonly pb::MessageParser<EquipmentList> _parser = new pb::MessageParser<EquipmentList>(() => new EquipmentList());
    public static pb::MessageParser<EquipmentList> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.Equipment> _repeated_equipments_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.Equipment.Parser);
    private pbc::RepeatedField<global::Centersdk.Protobuf.Equipment> equipments_ = new pbc::RepeatedField<global::Centersdk.Protobuf.Equipment>();
    public pbc::RepeatedField<global::Centersdk.Protobuf.Equipment> Equipments {
      get { return equipments_; }
      set {
        equipments_ = value;
      }
    }

    private int bagSize_;
    public int BagSize {
      get { return bagSize_; }
      set {
        bagSize_ = value;
      }
    }

    private int code_;
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      equipments_.WriteTo(output, _repeated_equipments_codec);
      if (BagSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BagSize);
      }
      if (Code != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Code);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += equipments_.CalculateSize(_repeated_equipments_codec);
      if (BagSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BagSize);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            equipments_.AddEntriesFrom(input, _repeated_equipments_codec);
            break;
          }
          case 16: {
            BagSize = input.ReadInt32();
            break;
          }
          case 24: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class Equipment : pb::IMessage {
    private static readonly pb::MessageParser<Equipment> _parser = new pb::MessageParser<Equipment>(() => new Equipment());
    public static pb::MessageParser<Equipment> Parser { get { return _parser; } }

    private long uniqueId_;
    /// <summary>
    /// 装备唯一ID
    /// </summary>
    public long UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    private static readonly pb::FieldCodec<string> _repeated_basicAttributes_codec
        = pb::FieldCodec.ForString(18);
    private pbc::RepeatedField<string> basicAttributes_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 基础属性 属性格式：属性类型1:属性值1;属性类型2:属性值2;
    /// </summary>
    public pbc::RepeatedField<string> BasicAttributes {
      get { return basicAttributes_; }
      set {
        basicAttributes_ = value;
      }
    }

    private static readonly pb::FieldCodec<string> _repeated_succinctAttributes_codec
        = pb::FieldCodec.ForString(26);
    private pbc::RepeatedField<string> succinctAttributes_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 洗练属性 属性格式：属性类型1:属性值1;属性类型2:属性值2;
    /// </summary>
    public pbc::RepeatedField<string> SuccinctAttributes {
      get { return succinctAttributes_; }
      set {
        succinctAttributes_ = value;
      }
    }

    private static readonly pb::FieldCodec<long> _repeated_diamonds_codec
        = pb::FieldCodec.ForInt64(34);
    private pbc::RepeatedField<long> diamonds_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 镶嵌宝石 宝石唯一ID列表
    /// </summary>
    public pbc::RepeatedField<long> Diamonds {
      get { return diamonds_; }
      set {
        diamonds_ = value;
      }
    }

    private int templateId_;
    /// <summary>
    /// 装备模板ID
    /// </summary>
    public int TemplateId {
      get { return templateId_; }
      set {
        templateId_ = value;
      }
    }

    private bool isBind_;
    /// <summary>
    /// 是否绑定状态
    /// </summary>
    public bool IsBind {
      get { return isBind_; }
      set {
        isBind_ = value;
      }
    }

    private int strengtheningLevel_;
    /// <summary>
    /// 强化等级
    /// </summary>
    public int StrengtheningLevel {
      get { return strengtheningLevel_; }
      set {
        strengtheningLevel_ = value;
      }
    }

    private int strengtheningExp_;
    /// <summary>
    /// 强化等级
    /// </summary>
    public int StrengtheningExp {
      get { return strengtheningExp_; }
      set {
        strengtheningExp_ = value;
      }
    }

    private int advancedLevel_;
    /// <summary>
    /// 进阶等级
    /// </summary>
    public int AdvancedLevel {
      get { return advancedLevel_; }
      set {
        advancedLevel_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UniqueId);
      }
      basicAttributes_.WriteTo(output, _repeated_basicAttributes_codec);
      succinctAttributes_.WriteTo(output, _repeated_succinctAttributes_codec);
      diamonds_.WriteTo(output, _repeated_diamonds_codec);
      if (TemplateId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TemplateId);
      }
      if (IsBind != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsBind);
      }
      if (StrengtheningLevel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(StrengtheningLevel);
      }
      if (StrengtheningExp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(StrengtheningExp);
      }
      if (AdvancedLevel != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AdvancedLevel);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UniqueId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UniqueId);
      }
      size += basicAttributes_.CalculateSize(_repeated_basicAttributes_codec);
      size += succinctAttributes_.CalculateSize(_repeated_succinctAttributes_codec);
      size += diamonds_.CalculateSize(_repeated_diamonds_codec);
      if (TemplateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TemplateId);
      }
      if (IsBind != false) {
        size += 1 + 1;
      }
      if (StrengtheningLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StrengtheningLevel);
      }
      if (StrengtheningExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StrengtheningExp);
      }
      if (AdvancedLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdvancedLevel);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UniqueId = input.ReadInt64();
            break;
          }
          case 18: {
            basicAttributes_.AddEntriesFrom(input, _repeated_basicAttributes_codec);
            break;
          }
          case 26: {
            succinctAttributes_.AddEntriesFrom(input, _repeated_succinctAttributes_codec);
            break;
          }
          case 34:
          case 32: {
            diamonds_.AddEntriesFrom(input, _repeated_diamonds_codec);
            break;
          }
          case 40: {
            TemplateId = input.ReadInt32();
            break;
          }
          case 48: {
            IsBind = input.ReadBool();
            break;
          }
          case 56: {
            StrengtheningLevel = input.ReadInt32();
            break;
          }
          case 64: {
            StrengtheningExp = input.ReadInt32();
            break;
          }
          case 72: {
            AdvancedLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 装备强化
  /// </summary>
  public sealed class EquipmentStrengthening : pb::IMessage {
    private static readonly pb::MessageParser<EquipmentStrengthening> _parser = new pb::MessageParser<EquipmentStrengthening>(() => new EquipmentStrengthening());
    public static pb::MessageParser<EquipmentStrengthening> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.TwoIntegerValue> _repeated_costs_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.TwoIntegerValue.Parser);
    private pbc::RepeatedField<global::Centersdk.Protobuf.TwoIntegerValue> costs_ = new pbc::RepeatedField<global::Centersdk.Protobuf.TwoIntegerValue>();
    /// <summary>
    /// 强化石消耗列表
    /// </summary>
    public pbc::RepeatedField<global::Centersdk.Protobuf.TwoIntegerValue> Costs {
      get { return costs_; }
      set {
        costs_ = value;
      }
    }

    private long uniqueId_;
    /// <summary>
    /// 强化装备ID
    /// </summary>
    public long UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      costs_.WriteTo(output, _repeated_costs_codec);
      if (UniqueId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UniqueId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += costs_.CalculateSize(_repeated_costs_codec);
      if (UniqueId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UniqueId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            costs_.AddEntriesFrom(input, _repeated_costs_codec);
            break;
          }
          case 16: {
            UniqueId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 装备洗练请求
  /// </summary>
  public sealed class EquipmentSuccinctReq : pb::IMessage {
    private static readonly pb::MessageParser<EquipmentSuccinctReq> _parser = new pb::MessageParser<EquipmentSuccinctReq>(() => new EquipmentSuccinctReq());
    public static pb::MessageParser<EquipmentSuccinctReq> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_lockLocs_codec
        = pb::FieldCodec.ForInt32(10);
    private pbc::RepeatedField<int> lockLocs_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 属性锁定位置
    /// </summary>
    public pbc::RepeatedField<int> LockLocs {
      get { return lockLocs_; }
      set {
        lockLocs_ = value;
      }
    }

    private long uniqueId_;
    /// <summary>
    /// 装备唯一ID
    /// </summary>
    public long UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    private int costId_;
    /// <summary>
    /// 消耗洗练石ID
    /// </summary>
    public int CostId {
      get { return costId_; }
      set {
        costId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      lockLocs_.WriteTo(output, _repeated_lockLocs_codec);
      if (UniqueId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UniqueId);
      }
      if (CostId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CostId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += lockLocs_.CalculateSize(_repeated_lockLocs_codec);
      if (UniqueId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UniqueId);
      }
      if (CostId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            lockLocs_.AddEntriesFrom(input, _repeated_lockLocs_codec);
            break;
          }
          case 16: {
            UniqueId = input.ReadInt64();
            break;
          }
          case 24: {
            CostId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 装备洗练应答
  /// </summary>
  public sealed class EquipmentSuccinctResp : pb::IMessage {
    private static readonly pb::MessageParser<EquipmentSuccinctResp> _parser = new pb::MessageParser<EquipmentSuccinctResp>(() => new EquipmentSuccinctResp());
    public static pb::MessageParser<EquipmentSuccinctResp> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.TwoIntegerAndLongValue> _repeated_atts_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.TwoIntegerAndLongValue.Parser);
    private pbc::RepeatedField<global::Centersdk.Protobuf.TwoIntegerAndLongValue> atts_ = new pbc::RepeatedField<global::Centersdk.Protobuf.TwoIntegerAndLongValue>();
    /// <summary>
    /// 洗练属性
    /// </summary>
    public pbc::RepeatedField<global::Centersdk.Protobuf.TwoIntegerAndLongValue> Atts {
      get { return atts_; }
      set {
        atts_ = value;
      }
    }

    private long uniqueId_;
    /// <summary>
    /// 装备唯一ID
    /// </summary>
    public long UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    private int code_;
    /// <summary>
    /// 错误码
    /// </summary>
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      atts_.WriteTo(output, _repeated_atts_codec);
      if (UniqueId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UniqueId);
      }
      if (Code != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Code);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += atts_.CalculateSize(_repeated_atts_codec);
      if (UniqueId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UniqueId);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            atts_.AddEntriesFrom(input, _repeated_atts_codec);
            break;
          }
          case 16: {
            UniqueId = input.ReadInt64();
            break;
          }
          case 24: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 装备继承
  /// </summary>
  public sealed class EquipmentInherit : pb::IMessage {
    private static readonly pb::MessageParser<EquipmentInherit> _parser = new pb::MessageParser<EquipmentInherit>(() => new EquipmentInherit());
    public static pb::MessageParser<EquipmentInherit> Parser { get { return _parser; } }

    private global::Centersdk.Protobuf.Equipment equipment_;
    /// <summary>
    /// 继承后的装备
    /// </summary>
    public global::Centersdk.Protobuf.Equipment Equipment {
      get { return equipment_; }
      set {
        equipment_ = value;
      }
    }

    private int code_;
    /// <summary>
    /// 错误码
    /// </summary>
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (equipment_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Equipment);
      }
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Code);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (equipment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equipment);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (equipment_ == null) {
              equipment_ = new global::Centersdk.Protobuf.Equipment();
            }
            input.ReadMessage(equipment_);
            break;
          }
          case 16: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class UpdateEquipment : pb::IMessage {
    private static readonly pb::MessageParser<UpdateEquipment> _parser = new pb::MessageParser<UpdateEquipment>(() => new UpdateEquipment());
    public static pb::MessageParser<UpdateEquipment> Parser { get { return _parser; } }

    private global::Centersdk.Protobuf.Equipment equipment_;
    /// <summary>
    /// 装备信息
    /// </summary>
    public global::Centersdk.Protobuf.Equipment Equipment {
      get { return equipment_; }
      set {
        equipment_ = value;
      }
    }

    private int code_;
    /// <summary>
    /// 错误码
    /// </summary>
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (equipment_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Equipment);
      }
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Code);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (equipment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equipment);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (equipment_ == null) {
              equipment_ = new global::Centersdk.Protobuf.Equipment();
            }
            input.ReadMessage(equipment_);
            break;
          }
          case 16: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
