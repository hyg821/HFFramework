// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Centersdk.Protobuf {

  #region Messages
  public sealed class Item : pb::IMessage {
    private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
    public static pb::MessageParser<Item> Parser { get { return _parser; } }

    private int itemId_;
    /// <summary>
    /// 道具id
    /// </summary>
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    private int itemCount_;
    /// <summary>
    /// 道具数量
    /// </summary>
    public int ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    private long uniqueId_;
    /// <summary>
    /// 特殊宝石唯一ID
    /// </summary>
    public long UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    private string attr_ = "";
    /// <summary>
    /// 特殊宝石额外属性，例如 "101:10;102:13;"
    /// </summary>
    public string Attr {
      get { return attr_; }
      set {
        attr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemCount);
      }
      if (UniqueId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UniqueId);
      }
      if (Attr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Attr);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCount);
      }
      if (UniqueId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UniqueId);
      }
      if (Attr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Attr);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemCount = input.ReadInt32();
            break;
          }
          case 24: {
            UniqueId = input.ReadInt64();
            break;
          }
          case 34: {
            Attr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class PackGrid : pb::IMessage {
    private static readonly pb::MessageParser<PackGrid> _parser = new pb::MessageParser<PackGrid>(() => new PackGrid());
    public static pb::MessageParser<PackGrid> Parser { get { return _parser; } }

    private int type_;
    /// <summary>
    /// 格子类型，1 = 道具，2 = 装备
    /// </summary>
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private global::Centersdk.Protobuf.Item item_;
    /// <summary>
    /// 道具
    /// </summary>
    public global::Centersdk.Protobuf.Item Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    private global::Centersdk.Protobuf.Equipment equip_;
    /// <summary>
    /// 装备
    /// </summary>
    public global::Centersdk.Protobuf.Equipment Equip {
      get { return equip_; }
      set {
        equip_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (item_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Item);
      }
      if (equip_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Equip);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (equip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equip);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            if (item_ == null) {
              item_ = new global::Centersdk.Protobuf.Item();
            }
            input.ReadMessage(item_);
            break;
          }
          case 26: {
            if (equip_ == null) {
              equip_ = new global::Centersdk.Protobuf.Equipment();
            }
            input.ReadMessage(equip_);
            break;
          }
        }
      }
    }

  }

  public sealed class UserPack : pb::IMessage {
    private static readonly pb::MessageParser<UserPack> _parser = new pb::MessageParser<UserPack>(() => new UserPack());
    public static pb::MessageParser<UserPack> Parser { get { return _parser; } }

    private long userId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private string kind_ = "";
    /// <summary>
    /// 背包分类
    /// </summary>
    public string Kind {
      get { return kind_; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.PackGrid> _repeated_data_codec
        = pb::FieldCodec.ForMessage(26, global::Centersdk.Protobuf.PackGrid.Parser);
    private pbc::RepeatedField<global::Centersdk.Protobuf.PackGrid> data_ = new pbc::RepeatedField<global::Centersdk.Protobuf.PackGrid>();
    /// <summary>
    /// 背包数据，每个格子一条数据，空格子按道具算
    /// </summary>
    public pbc::RepeatedField<global::Centersdk.Protobuf.PackGrid> Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (Kind.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Kind);
      }
      data_.WriteTo(output, _repeated_data_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Kind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            Kind = input.ReadString();
            break;
          }
          case 26: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 在邮件界面操作
  /// </summary>
  public sealed class GiveReq : pb::IMessage {
    private static readonly pb::MessageParser<GiveReq> _parser = new pb::MessageParser<GiveReq>(() => new GiveReq());
    public static pb::MessageParser<GiveReq> Parser { get { return _parser; } }

    private long receiverId_;
    /// <summary>
    /// 接受者id
    /// </summary>
    public long ReceiverId {
      get { return receiverId_; }
      set {
        receiverId_ = value;
      }
    }

    private int itemId_;
    /// <summary>
    /// 道具id
    /// </summary>
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    private int itemCount_;
    /// <summary>
    /// 道具数量
    /// </summary>
    public int ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ReceiverId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReceiverId);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemId);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ReceiverId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReceiverId);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReceiverId = input.ReadInt64();
            break;
          }
          case 16: {
            ItemId = input.ReadInt32();
            break;
          }
          case 24: {
            ItemCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CommonReq : pb::IMessage {
    private static readonly pb::MessageParser<CommonReq> _parser = new pb::MessageParser<CommonReq>(() => new CommonReq());
    public static pb::MessageParser<CommonReq> Parser { get { return _parser; } }

    private string kind_ = "";
    /// <summary>
    /// 背包种类
    /// </summary>
    public string Kind {
      get { return kind_; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int index_;
    /// <summary>
    /// 背包格子索引
    /// </summary>
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    private int itemId_;
    /// <summary>
    /// 道具ID，如果有前两个字段，这个字段不生效
    /// </summary>
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    private int itemCount_;
    /// <summary>
    /// 道具数量
    /// </summary>
    public int ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    private string kind2_ = "";
    /// <summary>
    /// 同时涉及背包仓库时候才用到，作为目标
    /// </summary>
    public string Kind2 {
      get { return kind2_; }
      set {
        kind2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Kind.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Kind);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (ItemId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemId);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ItemCount);
      }
      if (Kind2.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Kind2);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Kind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCount);
      }
      if (Kind2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind2);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Kind = input.ReadString();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
          case 24: {
            ItemId = input.ReadInt32();
            break;
          }
          case 32: {
            ItemCount = input.ReadInt32();
            break;
          }
          case 42: {
            Kind2 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class ExpandResp : pb::IMessage {
    private static readonly pb::MessageParser<ExpandResp> _parser = new pb::MessageParser<ExpandResp>(() => new ExpandResp());
    public static pb::MessageParser<ExpandResp> Parser { get { return _parser; } }

    private string kind_ = "";
    /// <summary>
    /// 背包种类
    /// </summary>
    public string Kind {
      get { return kind_; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int coinType_;
    /// <summary>
    /// 消耗货币类型
    /// </summary>
    public int CoinType {
      get { return coinType_; }
      set {
        coinType_ = value;
      }
    }

    private long coinCount_;
    /// <summary>
    /// 消耗货币数量
    /// </summary>
    public long CoinCount {
      get { return coinCount_; }
      set {
        coinCount_ = value;
      }
    }

    private long coinTotal_;
    /// <summary>
    /// 当前货币持有总量
    /// </summary>
    public long CoinTotal {
      get { return coinTotal_; }
      set {
        coinTotal_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Kind.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Kind);
      }
      if (CoinType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CoinType);
      }
      if (CoinCount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CoinCount);
      }
      if (CoinTotal != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CoinTotal);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Kind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
      }
      if (CoinType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CoinType);
      }
      if (CoinCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CoinCount);
      }
      if (CoinTotal != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CoinTotal);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Kind = input.ReadString();
            break;
          }
          case 16: {
            CoinType = input.ReadInt32();
            break;
          }
          case 24: {
            CoinCount = input.ReadInt64();
            break;
          }
          case 32: {
            CoinTotal = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class SellResp : pb::IMessage {
    private static readonly pb::MessageParser<SellResp> _parser = new pb::MessageParser<SellResp>(() => new SellResp());
    public static pb::MessageParser<SellResp> Parser { get { return _parser; } }

    private int itemId_;
    /// <summary>
    /// 道具id
    /// </summary>
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    private int itemCount_;
    /// <summary>
    /// 道具数量
    /// </summary>
    public int ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    private int coinType_;
    /// <summary>
    /// 获得货币类型
    /// </summary>
    public int CoinType {
      get { return coinType_; }
      set {
        coinType_ = value;
      }
    }

    private long coinCount_;
    /// <summary>
    /// 获得货币数量
    /// </summary>
    public long CoinCount {
      get { return coinCount_; }
      set {
        coinCount_ = value;
      }
    }

    private long coinTotal_;
    /// <summary>
    /// 当前货币持有总量
    /// </summary>
    public long CoinTotal {
      get { return coinTotal_; }
      set {
        coinTotal_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemCount);
      }
      if (CoinType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CoinType);
      }
      if (CoinCount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CoinCount);
      }
      if (CoinTotal != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CoinTotal);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCount);
      }
      if (CoinType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CoinType);
      }
      if (CoinCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CoinCount);
      }
      if (CoinTotal != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CoinTotal);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemCount = input.ReadInt32();
            break;
          }
          case 24: {
            CoinType = input.ReadInt32();
            break;
          }
          case 32: {
            CoinCount = input.ReadInt64();
            break;
          }
          case 40: {
            CoinTotal = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class JoinResp : pb::IMessage {
    private static readonly pb::MessageParser<JoinResp> _parser = new pb::MessageParser<JoinResp>(() => new JoinResp());
    public static pb::MessageParser<JoinResp> Parser { get { return _parser; } }

    private int itemId_;
    /// <summary>
    /// 合成后的道具id
    /// </summary>
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    private int itemCount_;
    /// <summary>
    /// 合成道具数量
    /// </summary>
    public int ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class BreakResp : pb::IMessage {
    private static readonly pb::MessageParser<BreakResp> _parser = new pb::MessageParser<BreakResp>(() => new BreakResp());
    public static pb::MessageParser<BreakResp> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_itemId_codec
        = pb::FieldCodec.ForInt32(10);
    private pbc::RepeatedField<int> itemId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 分解获得的道具id
    /// </summary>
    public pbc::RepeatedField<int> ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_itemCount_codec
        = pb::FieldCodec.ForInt32(18);
    private pbc::RepeatedField<int> itemCount_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 分解获得的道具数量
    /// </summary>
    public pbc::RepeatedField<int> ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      itemId_.WriteTo(output, _repeated_itemId_codec);
      itemCount_.WriteTo(output, _repeated_itemCount_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += itemId_.CalculateSize(_repeated_itemId_codec);
      size += itemCount_.CalculateSize(_repeated_itemCount_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            itemId_.AddEntriesFrom(input, _repeated_itemId_codec);
            break;
          }
          case 18:
          case 16: {
            itemCount_.AddEntriesFrom(input, _repeated_itemCount_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class NewWarehouseResp : pb::IMessage {
    private static readonly pb::MessageParser<NewWarehouseResp> _parser = new pb::MessageParser<NewWarehouseResp>(() => new NewWarehouseResp());
    public static pb::MessageParser<NewWarehouseResp> Parser { get { return _parser; } }

    private string kind_ = "";
    /// <summary>
    /// 仓库分类
    /// </summary>
    public string Kind {
      get { return kind_; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long costBronze_;
    /// <summary>
    /// 消耗铜币
    /// </summary>
    public long CostBronze {
      get { return costBronze_; }
      set {
        costBronze_ = value;
      }
    }

    private long bronze_;
    /// <summary>
    /// 当前铜币
    /// </summary>
    public long Bronze {
      get { return bronze_; }
      set {
        bronze_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Kind.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Kind);
      }
      if (CostBronze != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CostBronze);
      }
      if (Bronze != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Bronze);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Kind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
      }
      if (CostBronze != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CostBronze);
      }
      if (Bronze != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Bronze);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Kind = input.ReadString();
            break;
          }
          case 16: {
            CostBronze = input.ReadInt64();
            break;
          }
          case 24: {
            Bronze = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
