// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lobby_service.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Lobbyservice.Protobuf {

  #region Messages
  /// <summary>
  ///用户登录响应信息
  /// </summary>
  public sealed class LoginResponse : pb::IMessage {
    private static readonly pb::MessageParser<LoginResponse> _parser = new pb::MessageParser<LoginResponse>(() => new LoginResponse());
    public static pb::MessageParser<LoginResponse> Parser { get { return _parser; } }

    private int code_;
    /// <summary>
    /// 登录码
    /// </summary>
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    private long gold_;
    /// <summary>
    /// 金币
    /// </summary>
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    private long silver_;
    /// <summary>
    /// 银币
    /// </summary>
    public long Silver {
      get { return silver_; }
      set {
        silver_ = value;
      }
    }

    private long bronze_;
    /// <summary>
    /// 铜币
    /// </summary>
    public long Bronze {
      get { return bronze_; }
      set {
        bronze_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Gold != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Gold);
      }
      if (Silver != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Silver);
      }
      if (Bronze != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Bronze);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (Silver != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Silver);
      }
      if (Bronze != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Bronze);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Gold = input.ReadInt64();
            break;
          }
          case 24: {
            Silver = input.ReadInt64();
            break;
          }
          case 32: {
            Bronze = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
