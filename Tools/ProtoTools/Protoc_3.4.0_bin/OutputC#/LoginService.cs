// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login_service.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Loginservice.Protobuf {

  #region Messages
  /// <summary>
  ///用户登录请求信息
  /// </summary>
  public sealed class LoginRequest : pb::IMessage {
    private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
    public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

    private string openId_ = "";
    /// <summary>
    /// 用户唯一标识。(一般是用户登录后，游戏客户端获取的uid)
    /// </summary>
    public string OpenId {
      get { return openId_; }
      set {
        openId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string productId_ = "";
    /// <summary>
    /// 该产品的产品id (客户端代码:FastSdk.getChannelInterface().getChannelInfo().getProductId())
    /// </summary>
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string pf_ = "";
    /// <summary>
    /// 平台信息
    /// </summary>
    public string Pf {
      get { return pf_; }
      set {
        pf_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string channel_ = "";
    /// <summary>
    /// 用户登录后，游戏客户端获取的channel
    /// </summary>
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string channelUid_ = "";
    /// <summary>
    /// 用户登录后，游戏客户端获取的channelUid
    /// </summary>
    public string ChannelUid {
      get { return channelUid_; }
      set {
        channelUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string accessToken_ = "";
    /// <summary>
    /// 用户登录后，游戏客户端获取的登陆令牌
    /// </summary>
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string channelId_ = "";
    /// <summary>
    /// 渠道ID
    /// </summary>
    public string ChannelId {
      get { return channelId_; }
      set {
        channelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string version_ = "";
    /// <summary>
    /// 用户登录版本号
    /// </summary>
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string phoneType_ = "";
    /// <summary>
    /// 手机型号
    /// </summary>
    public string PhoneType {
      get { return phoneType_; }
      set {
        phoneType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string idfa_ = "";
    /// <summary>
    /// 广告标示符
    /// </summary>
    public string Idfa {
      get { return idfa_; }
      set {
        idfa_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string idfv_ = "";
    /// <summary>
    /// Vindor标示符
    /// </summary>
    public string Idfv {
      get { return idfv_; }
      set {
        idfv_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string imei_ = "";
    /// <summary>
    /// 手机的唯一识别号码
    /// </summary>
    public string Imei {
      get { return imei_; }
      set {
        imei_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (OpenId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OpenId);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductId);
      }
      if (Pf.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Pf);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Channel);
      }
      if (ChannelUid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ChannelUid);
      }
      if (AccessToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AccessToken);
      }
      if (ChannelId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ChannelId);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Version);
      }
      if (PhoneType.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PhoneType);
      }
      if (Idfa.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Idfa);
      }
      if (Idfv.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Idfv);
      }
      if (Imei.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Imei);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (OpenId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenId);
      }
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (Pf.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pf);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (ChannelUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelUid);
      }
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (ChannelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelId);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (PhoneType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhoneType);
      }
      if (Idfa.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Idfa);
      }
      if (Idfv.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Idfv);
      }
      if (Imei.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Imei);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OpenId = input.ReadString();
            break;
          }
          case 18: {
            ProductId = input.ReadString();
            break;
          }
          case 26: {
            Pf = input.ReadString();
            break;
          }
          case 34: {
            Channel = input.ReadString();
            break;
          }
          case 42: {
            ChannelUid = input.ReadString();
            break;
          }
          case 50: {
            AccessToken = input.ReadString();
            break;
          }
          case 58: {
            ChannelId = input.ReadString();
            break;
          }
          case 66: {
            Version = input.ReadString();
            break;
          }
          case 74: {
            PhoneType = input.ReadString();
            break;
          }
          case 82: {
            Idfa = input.ReadString();
            break;
          }
          case 90: {
            Idfv = input.ReadString();
            break;
          }
          case 98: {
            Imei = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户登录响应信息
  /// </summary>
  public sealed class LoginResponse : pb::IMessage {
    private static readonly pb::MessageParser<LoginResponse> _parser = new pb::MessageParser<LoginResponse>(() => new LoginResponse());
    public static pb::MessageParser<LoginResponse> Parser { get { return _parser; } }

    private int code_;
    /// <summary>
    /// 登录码
    /// </summary>
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    private global::Loginservice.Protobuf.Server server_;
    /// <summary>
    /// 上次登录服务器信息
    /// </summary>
    public global::Loginservice.Protobuf.Server Server {
      get { return server_; }
      set {
        server_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (server_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Server);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (server_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            if (server_ == null) {
              server_ = new global::Loginservice.Protobuf.Server();
            }
            input.ReadMessage(server_);
            break;
          }
        }
      }
    }

  }

  public sealed class ServerArray : pb::IMessage {
    private static readonly pb::MessageParser<ServerArray> _parser = new pb::MessageParser<ServerArray>(() => new ServerArray());
    public static pb::MessageParser<ServerArray> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::Loginservice.Protobuf.Server> _repeated_servers_codec
        = pb::FieldCodec.ForMessage(10, global::Loginservice.Protobuf.Server.Parser);
    private pbc::RepeatedField<global::Loginservice.Protobuf.Server> servers_ = new pbc::RepeatedField<global::Loginservice.Protobuf.Server>();
    /// <summary>
    ///服务列表
    /// </summary>
    public pbc::RepeatedField<global::Loginservice.Protobuf.Server> Servers {
      get { return servers_; }
      set {
        servers_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      servers_.WriteTo(output, _repeated_servers_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += servers_.CalculateSize(_repeated_servers_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            servers_.AddEntriesFrom(input, _repeated_servers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class Server : pb::IMessage {
    private static readonly pb::MessageParser<Server> _parser = new pb::MessageParser<Server>(() => new Server());
    public static pb::MessageParser<Server> Parser { get { return _parser; } }

    private int zoneId_;
    /// <summary>
    ///大区ID
    /// </summary>
    public int ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = value;
      }
    }

    private string zoneName_ = "";
    /// <summary>
    ///大区名称
    /// </summary>
    public string ZoneName {
      get { return zoneName_; }
      set {
        zoneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int serverId_;
    /// <summary>
    ///服务器ID
    /// </summary>
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    private string serverName_ = "";
    /// <summary>
    ///服务器名称
    /// </summary>
    public string ServerName {
      get { return serverName_; }
      set {
        serverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int status_;
    /// <summary>
    ///服务器状态
    /// </summary>
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    private int userCount_;
    /// <summary>
    ///在线用户数
    /// </summary>
    public int UserCount {
      get { return userCount_; }
      set {
        userCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ZoneId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ZoneId);
      }
      if (ZoneName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ZoneName);
      }
      if (ServerId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ServerId);
      }
      if (ServerName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ServerName);
      }
      if (Status != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Status);
      }
      if (UserCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(UserCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ZoneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZoneId);
      }
      if (ZoneName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZoneName);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (ServerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerName);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (UserCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ZoneId = input.ReadInt32();
            break;
          }
          case 18: {
            ZoneName = input.ReadString();
            break;
          }
          case 24: {
            ServerId = input.ReadInt32();
            break;
          }
          case 34: {
            ServerName = input.ReadString();
            break;
          }
          case 40: {
            Status = input.ReadInt32();
            break;
          }
          case 48: {
            UserCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
