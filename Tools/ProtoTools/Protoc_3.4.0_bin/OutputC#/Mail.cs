// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mail.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Centersdk.Protobuf {

  #region Messages
  public sealed class Attachment : pb::IMessage {
    private static readonly pb::MessageParser<Attachment> _parser = new pb::MessageParser<Attachment>(() => new Attachment());
    public static pb::MessageParser<Attachment> Parser { get { return _parser; } }

    private int type_;
    /// <summary>
    /// 附件类型，1 = 道具，2 = 装备
    /// </summary>
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private global::Centersdk.Protobuf.Item item_;
    /// <summary>
    /// 道具
    /// </summary>
    public global::Centersdk.Protobuf.Item Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    private global::Centersdk.Protobuf.Equipment equip_;
    /// <summary>
    /// 装备
    /// </summary>
    public global::Centersdk.Protobuf.Equipment Equip {
      get { return equip_; }
      set {
        equip_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (item_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Item);
      }
      if (equip_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Equip);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (equip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equip);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            if (item_ == null) {
              item_ = new global::Centersdk.Protobuf.Item();
            }
            input.ReadMessage(item_);
            break;
          }
          case 26: {
            if (equip_ == null) {
              equip_ = new global::Centersdk.Protobuf.Equipment();
            }
            input.ReadMessage(equip_);
            break;
          }
        }
      }
    }

  }

  public sealed class Mail : pb::IMessage {
    private static readonly pb::MessageParser<Mail> _parser = new pb::MessageParser<Mail>(() => new Mail());
    public static pb::MessageParser<Mail> Parser { get { return _parser; } }

    private long createTime_;
    /// <summary>
    /// 创建时间
    /// </summary>
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    private long expireTime_;
    /// <summary>
    /// 过期时间，超过这个时间系统会自动删除
    /// </summary>
    public long ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    private int readState_;
    /// <summary>
    /// 读取状态，1 = 未读 2 = 已读
    /// </summary>
    public int ReadState {
      get { return readState_; }
      set {
        readState_ = value;
      }
    }

    private int attachState_;
    /// <summary>
    /// 附件状态，0 = 无附件，1 = 有附件未领，2 = 有附件已领
    /// </summary>
    public int AttachState {
      get { return attachState_; }
      set {
        attachState_ = value;
      }
    }

    private long senderId_;
    /// <summary>
    /// 发送者id
    /// </summary>
    public long SenderId {
      get { return senderId_; }
      set {
        senderId_ = value;
      }
    }

    private string senderName_ = "";
    /// <summary>
    /// 发送者姓名
    /// </summary>
    public string SenderName {
      get { return senderName_; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int senderHead_;
    /// <summary>
    /// 发送者头像
    /// </summary>
    public int SenderHead {
      get { return senderHead_; }
      set {
        senderHead_ = value;
      }
    }

    private long receiverId_;
    /// <summary>
    /// 接受者id
    /// </summary>
    public long ReceiverId {
      get { return receiverId_; }
      set {
        receiverId_ = value;
      }
    }

    private string receiverName_ = "";
    /// <summary>
    /// 接受者姓名
    /// </summary>
    public string ReceiverName {
      get { return receiverName_; }
      set {
        receiverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int receiverHead_;
    /// <summary>
    /// 接受者头像
    /// </summary>
    public int ReceiverHead {
      get { return receiverHead_; }
      set {
        receiverHead_ = value;
      }
    }

    private string title_ = "";
    /// <summary>
    /// 邮件标题
    /// </summary>
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string content_ = "";
    /// <summary>
    /// 邮件内容
    /// </summary>
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.Attachment> _repeated_attachments_codec
        = pb::FieldCodec.ForMessage(106, global::Centersdk.Protobuf.Attachment.Parser);
    private pbc::RepeatedField<global::Centersdk.Protobuf.Attachment> attachments_ = new pbc::RepeatedField<global::Centersdk.Protobuf.Attachment>();
    /// <summary>
    /// 附件列表
    /// </summary>
    public pbc::RepeatedField<global::Centersdk.Protobuf.Attachment> Attachments {
      get { return attachments_; }
      set {
        attachments_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CreateTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CreateTime);
      }
      if (ExpireTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ExpireTime);
      }
      if (ReadState != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ReadState);
      }
      if (AttachState != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AttachState);
      }
      if (SenderId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SenderId);
      }
      if (SenderName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SenderName);
      }
      if (SenderHead != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SenderHead);
      }
      if (ReceiverId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(ReceiverId);
      }
      if (ReceiverName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ReceiverName);
      }
      if (ReceiverHead != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ReceiverHead);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Title);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Content);
      }
      attachments_.WriteTo(output, _repeated_attachments_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      if (ExpireTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireTime);
      }
      if (ReadState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReadState);
      }
      if (AttachState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttachState);
      }
      if (SenderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SenderId);
      }
      if (SenderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderName);
      }
      if (SenderHead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SenderHead);
      }
      if (ReceiverId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReceiverId);
      }
      if (ReceiverName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReceiverName);
      }
      if (ReceiverHead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReceiverHead);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      size += attachments_.CalculateSize(_repeated_attachments_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 16: {
            ExpireTime = input.ReadInt64();
            break;
          }
          case 24: {
            ReadState = input.ReadInt32();
            break;
          }
          case 32: {
            AttachState = input.ReadInt32();
            break;
          }
          case 40: {
            SenderId = input.ReadInt64();
            break;
          }
          case 50: {
            SenderName = input.ReadString();
            break;
          }
          case 56: {
            SenderHead = input.ReadInt32();
            break;
          }
          case 64: {
            ReceiverId = input.ReadInt64();
            break;
          }
          case 74: {
            ReceiverName = input.ReadString();
            break;
          }
          case 80: {
            ReceiverHead = input.ReadInt32();
            break;
          }
          case 90: {
            Title = input.ReadString();
            break;
          }
          case 98: {
            Content = input.ReadString();
            break;
          }
          case 106: {
            attachments_.AddEntriesFrom(input, _repeated_attachments_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class MailList : pb::IMessage {
    private static readonly pb::MessageParser<MailList> _parser = new pb::MessageParser<MailList>(() => new MailList());
    public static pb::MessageParser<MailList> Parser { get { return _parser; } }

    private long userId_;
    /// <summary>
    /// 用户id
    /// </summary>
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.Mail> _repeated_data_codec
        = pb::FieldCodec.ForMessage(18, global::Centersdk.Protobuf.Mail.Parser);
    private pbc::RepeatedField<global::Centersdk.Protobuf.Mail> data_ = new pbc::RepeatedField<global::Centersdk.Protobuf.Mail>();
    /// <summary>
    /// 邮件列表
    /// </summary>
    public pbc::RepeatedField<global::Centersdk.Protobuf.Mail> Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      data_.WriteTo(output, _repeated_data_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class NewAttachment : pb::IMessage {
    private static readonly pb::MessageParser<NewAttachment> _parser = new pb::MessageParser<NewAttachment>(() => new NewAttachment());
    public static pb::MessageParser<NewAttachment> Parser { get { return _parser; } }

    private int type_;
    /// <summary>
    /// 附件类型，1 = 道具，2 = 装备
    /// </summary>
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private string kind_ = "";
    /// <summary>
    /// 道具分类
    /// </summary>
    public string Kind {
      get { return kind_; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int index_;
    /// <summary>
    /// 道具在背包的格子索引
    /// </summary>
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    private int itemCount_;
    /// <summary>
    /// 道具数量
    /// </summary>
    public int ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    private long uniqueId_;
    /// <summary>
    /// 装备唯一id
    /// </summary>
    public long UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Kind.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Kind);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Index);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ItemCount);
      }
      if (UniqueId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(UniqueId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Kind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCount);
      }
      if (UniqueId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UniqueId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            Kind = input.ReadString();
            break;
          }
          case 24: {
            Index = input.ReadInt32();
            break;
          }
          case 32: {
            ItemCount = input.ReadInt32();
            break;
          }
          case 40: {
            UniqueId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class NewMail : pb::IMessage {
    private static readonly pb::MessageParser<NewMail> _parser = new pb::MessageParser<NewMail>(() => new NewMail());
    public static pb::MessageParser<NewMail> Parser { get { return _parser; } }

    private long receiverId_;
    /// <summary>
    /// 接受者id
    /// </summary>
    public long ReceiverId {
      get { return receiverId_; }
      set {
        receiverId_ = value;
      }
    }

    private string title_ = "";
    /// <summary>
    /// 邮件标题
    /// </summary>
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string content_ = "";
    /// <summary>
    /// 邮件内容
    /// </summary>
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.NewAttachment> _repeated_attachments_codec
        = pb::FieldCodec.ForMessage(34, global::Centersdk.Protobuf.NewAttachment.Parser);
    private pbc::RepeatedField<global::Centersdk.Protobuf.NewAttachment> attachments_ = new pbc::RepeatedField<global::Centersdk.Protobuf.NewAttachment>();
    /// <summary>
    /// 附件列表
    /// </summary>
    public pbc::RepeatedField<global::Centersdk.Protobuf.NewAttachment> Attachments {
      get { return attachments_; }
      set {
        attachments_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ReceiverId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReceiverId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      attachments_.WriteTo(output, _repeated_attachments_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (ReceiverId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReceiverId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      size += attachments_.CalculateSize(_repeated_attachments_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReceiverId = input.ReadInt64();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 34: {
            attachments_.AddEntriesFrom(input, _repeated_attachments_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class MailBatchReq : pb::IMessage {
    private static readonly pb::MessageParser<MailBatchReq> _parser = new pb::MessageParser<MailBatchReq>(() => new MailBatchReq());
    public static pb::MessageParser<MailBatchReq> Parser { get { return _parser; } }

    private string box_ = "";
    /// <summary>
    /// "Inbox" or "Outbox"
    /// </summary>
    public string Box {
      get { return box_; }
      set {
        box_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<long> _repeated_createTimes_codec
        = pb::FieldCodec.ForInt64(18);
    private pbc::RepeatedField<long> createTimes_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 邮件的创建时间
    /// </summary>
    public pbc::RepeatedField<long> CreateTimes {
      get { return createTimes_; }
      set {
        createTimes_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Box.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Box);
      }
      createTimes_.WriteTo(output, _repeated_createTimes_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Box.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Box);
      }
      size += createTimes_.CalculateSize(_repeated_createTimes_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Box = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            createTimes_.AddEntriesFrom(input, _repeated_createTimes_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
