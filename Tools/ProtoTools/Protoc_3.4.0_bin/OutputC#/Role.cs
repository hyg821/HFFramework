// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: role.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Centersdk.Protobuf {

  #region Messages
  /// <summary>
  ///角色信息列表
  /// </summary>
  public sealed class RoleArray : pb::IMessage {
    private static readonly pb::MessageParser<RoleArray> _parser = new pb::MessageParser<RoleArray>(() => new RoleArray());
    public static pb::MessageParser<RoleArray> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.RoleInfo> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.RoleInfo.Parser);
    private pbc::RepeatedField<global::Centersdk.Protobuf.RoleInfo> roles_ = new pbc::RepeatedField<global::Centersdk.Protobuf.RoleInfo>();
    public pbc::RepeatedField<global::Centersdk.Protobuf.RoleInfo> Roles {
      get { return roles_; }
      set {
        roles_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      roles_.WriteTo(output, _repeated_roles_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += roles_.CalculateSize(_repeated_roles_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///角色信息
  /// </summary>
  public sealed class RoleInfo : pb::IMessage {
    private static readonly pb::MessageParser<RoleInfo> _parser = new pb::MessageParser<RoleInfo>(() => new RoleInfo());
    public static pb::MessageParser<RoleInfo> Parser { get { return _parser; } }

    private long roleId_;
    /// <summary>
    /// 全局唯一角色ID
    /// </summary>
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private string name_ = "";
    /// <summary>
    /// 角色名称
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long userId_;
    /// <summary>
    /// 根ID.就是用户ID
    /// </summary>
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int serverId_;
    /// <summary>
    /// 服务器ID
    /// </summary>
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    private string serverName_ = "";
    /// <summary>
    /// 服务器名称
    /// </summary>
    public string ServerName {
      get { return serverName_; }
      set {
        serverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int type_;
    /// <summary>
    /// 角色类型
    /// </summary>
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private int level_;
    /// <summary>
    /// 角色等级
    /// </summary>
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private int sex_;
    /// <summary>
    /// 性别
    /// </summary>
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    private int headImgId_;
    /// <summary>
    /// 头像ID
    /// </summary>
    public int HeadImgId {
      get { return headImgId_; }
      set {
        headImgId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
      if (ServerId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ServerId);
      }
      if (ServerName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ServerName);
      }
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Type);
      }
      if (Level != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Level);
      }
      if (Sex != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Sex);
      }
      if (HeadImgId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(HeadImgId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (ServerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerName);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (HeadImgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadImgId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
          case 32: {
            ServerId = input.ReadInt32();
            break;
          }
          case 42: {
            ServerName = input.ReadString();
            break;
          }
          case 48: {
            Type = input.ReadInt32();
            break;
          }
          case 56: {
            Level = input.ReadInt32();
            break;
          }
          case 64: {
            Sex = input.ReadInt32();
            break;
          }
          case 72: {
            HeadImgId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///精简的角色信息列表
  /// </summary>
  public sealed class SimpleRoleArray : pb::IMessage {
    private static readonly pb::MessageParser<SimpleRoleArray> _parser = new pb::MessageParser<SimpleRoleArray>(() => new SimpleRoleArray());
    public static pb::MessageParser<SimpleRoleArray> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::Centersdk.Protobuf.SimpleRoleInfo> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(10, global::Centersdk.Protobuf.SimpleRoleInfo.Parser);
    private pbc::RepeatedField<global::Centersdk.Protobuf.SimpleRoleInfo> roles_ = new pbc::RepeatedField<global::Centersdk.Protobuf.SimpleRoleInfo>();
    /// <summary>
    ///角色列表
    /// </summary>
    public pbc::RepeatedField<global::Centersdk.Protobuf.SimpleRoleInfo> Roles {
      get { return roles_; }
      set {
        roles_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      roles_.WriteTo(output, _repeated_roles_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += roles_.CalculateSize(_repeated_roles_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///精简的角色信息。只填充角色ID,角色名,职业等一些精简信息
  /// </summary>
  public sealed class SimpleRoleInfo : pb::IMessage {
    private static readonly pb::MessageParser<SimpleRoleInfo> _parser = new pb::MessageParser<SimpleRoleInfo>(() => new SimpleRoleInfo());
    public static pb::MessageParser<SimpleRoleInfo> Parser { get { return _parser; } }

    private long roleId_;
    /// <summary>
    /// 全局唯一角色ID
    /// </summary>
    public long RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private string name_ = "";
    /// <summary>
    /// 角色名称
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long userId_;
    /// <summary>
    /// 根ID.就是用户ID
    /// </summary>
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int serverId_;
    /// <summary>
    /// 服务器ID
    /// </summary>
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    private int type_;
    /// <summary>
    /// 角色类型
    /// </summary>
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private int level_;
    /// <summary>
    /// 角色等级
    /// </summary>
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private int sex_;
    /// <summary>
    /// 性别
    /// </summary>
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    private int headImgId_;
    /// <summary>
    /// 头像ID
    /// </summary>
    public int HeadImgId {
      get { return headImgId_; }
      set {
        headImgId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
      if (ServerId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ServerId);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Type);
      }
      if (Level != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Level);
      }
      if (Sex != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Sex);
      }
      if (HeadImgId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(HeadImgId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (HeadImgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadImgId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
          case 32: {
            ServerId = input.ReadInt32();
            break;
          }
          case 40: {
            Type = input.ReadInt32();
            break;
          }
          case 48: {
            Level = input.ReadInt32();
            break;
          }
          case 56: {
            Sex = input.ReadInt32();
            break;
          }
          case 64: {
            HeadImgId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
