// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mj_room.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Lobbyservice.Protobuf {

  /// <summary>Holder for reflection information generated from mj_room.proto</summary>
  public static partial class MjRoomReflection {

    #region Descriptor
    /// <summary>File descriptor for mj_room.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MjRoomReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1tal9yb29tLnByb3RvEhVsb2JieXNlcnZpY2UucHJvdG9idWYiSgoLRGVz",
            "a1JlcXVlc3QSDgoGZGVza0lkGAEgASgFEg4KBmFtb3VudBgCIAEoBRINCgV2",
            "YWx1ZRgDIAEoBRIMCgR0eXBlGAQgASgFIrgBCg9NZXNzYWdlRGVza0Z1bGwS",
            "DgoGZGVza0lkGAEgASgFEgwKBGNvZGUYAiABKAUSEAoIcG9zaXRpb24YAyAB",
            "KAUSOAoIZGVza0luZm8YBCABKAsyJi5sb2JieXNlcnZpY2UucHJvdG9idWYu",
            "TWVzc2FnZURlc2tJbmZvEjsKB3BsYXllcnMYBSADKAsyKi5sb2JieXNlcnZp",
            "Y2UucHJvdG9idWYuTWVzc2FnZVBsYXllckRldGFpbCKQBAoPTWVzc2FnZURl",
            "c2tJbmZvEg4KBmRlc2tJZBgBIAEoBRIPCgdncm91cElkGAIgASgFEhEKCWdh",
            "bWVTdGFnZRgDIAEoBRIQCghkZXNrTmFtZRgEIAEoCRIQCghkZXNrVHlwZRgF",
            "IAEoBRIQCghwYXNzV29yZBgGIAEoCRIVCg1sYXN0Q2FyZENvdW50GAcgASgF",
            "EhEKCXJvb21Pd25lchgIIAEoAxIQCgh6aHVhbmdJZBgJIAEoAxIRCgluaWFv",
            "Q291bnQYCiABKAUSEwoLbmlhb0FkZFR5cGUYCyABKAUSEgoKYm9hcmRDb3Vu",
            "dBgMIAEoBRITCgtjYXJkVHlwZUlkcxgNIAMoBRIPCgdwaWFvRmVuGA4gASgF",
            "EhAKCGxhc3ROaWFvGA8gASgFEhMKC3p1b0JpU3RhdHVzGBAgASgFEhEKCXJl",
            "YWxDb3VudBgRIAEoBRISCgp0b3RhbENvdW50GBIgASgFEhYKDmZyaWVuZENp",
            "cmNsZUlkGBMgASgFEhkKEWxhc3RPdXRDYXJkVXNlcklkGBQgASgDEhMKC2tl",
            "WHVhbkluZGV4GBUgAygFEhIKCmxhaVppQ291bnQYFiABKAUSGQoRcWlhbmdH",
            "YW5nWmh1YU5pYW8YGCABKAUSEwoLcWluZ01vSmlhTWEYGSABKAUSDAoEaXNB",
            "QRgaIAEoCBINCgVpc0RZShgbIAEoCCLNAgoTTWVzc2FnZVBsYXllckRldGFp",
            "bBIOCgZkZXNrSWQYASABKAUSDgoGdXNlcklkGAIgASgDEhAKCHBvc2l0aW9u",
            "GAMgASgFEhMKC3BsYXllclN0YXRlGAQgASgFEhEKCWhhbmRDYXJkcxgFIAMo",
            "BRIQCghuaWNrTmFtZRgGIAEoCRISCgpoZWFkSW1nVXJsGAcgASgJEgsKA3Nl",
            "eBgIIAEoCRIQCghnYW1lR29sZBgJIAEoAxIQCghnYW5nTGlzdBgKIAMoBRIS",
            "CgphbkdhbmdMaXN0GAsgAygFEhAKCHBlbmdMaXN0GAwgAygFEjgKB2NoaUxp",
            "c3QYDSADKAsyJy5sb2JieXNlcnZpY2UucHJvdG9idWYuTWVzc2FnZURlc2tD",
            "YXJkcxITCgtvdXRDYXJkTGlzdBgOIAMoBRIQCgh0b3RhbEZhbhgPIAEoBSJ6",
            "ChFNZXNzYWdlUGxheWVySW5mbxIOCgZkZXNrSWQYASABKAUSDgoGdXNlcklk",
            "GAIgASgDEhAKCHBvc2l0aW9uGAMgASgFEhMKC3BsYXllclN0YXRlGAQgASgF",
            "EgwKBGNvZGUYBSABKAUSEAoIbmlja05hbWUYBiABKAkifQoSTWVzc2FnZVBs",
            "YXllckluZm9zEg4KBmRlc2tJZBgBIAEoBRIOCgZ1c2VySWQYAiABKAMSDgoG",
            "YW1vdW50GAMgASgDEjcKBWluZm9zGAQgAygLMigubG9iYnlzZXJ2aWNlLnBy",
            "b3RvYnVmLk1lc3NhZ2VQbGF5ZXJJbmZvIukBChFNZXNzYWdlRGVza0NvbW1v",
            "bhIOCgZkZXNrSWQYASABKAUSDAoEY2FyZBgCIAEoBRIMCgRjb2RlGAMgASgF",
            "Eg4KBnVzZXJJZBgEIAEoAxITCgtvdGhlclVzZXJJZBgFIAEoAxIPCgd1c2Vy",
            "SWRzGAYgAygDEhAKCHBvc2l0aW9uGAcgASgFEg4KBmFtb3VudBgIIAEoAxIN",
            "CgVjb3VudBgJIAEoBRIVCg1sYXN0Q2FyZENvdW50GAogASgFEg4KBnN0clZh",
            "bBgLIAEoCRINCgVjYXJkcxgMIAMoBRILCgNpZHMYDSADKAUiMQoQTWVzc2Fn",
            "ZURlc2tDYXJkcxIOCgZkZXNrSWQYASABKAUSDQoFY2FyZHMYAiADKAUigwEK",
            "Dk1lc3NhZ2VTdGFydEh1Eg4KBmRlc2tJZBgBIAEoBRIOCgZ1c2VySWQYAiAB",
            "KAMSDAoEY29kZRgDIAEoBRILCgNpZHMYBCADKAUSNgoFY2FyZHMYBSADKAsy",
            "Jy5sb2JieXNlcnZpY2UucHJvdG9idWYuTWVzc2FnZURlc2tDYXJkcyJFCgtN",
            "ZXNzYWdlVGluZxIPCgdvdXRDYXJkGAEgASgFEhEKCXRpbmdDYXJkcxgCIAMo",
            "BRISCgp0aW5nQ291bnRzGAMgAygFIvQBCg9NZXNzYWdlQ2FyZFRpcHMSDgoG",
            "ZGVza0lkGAEgASgFEg4KBnVzZXJJZBgCIAEoAxINCgVjYXJkcxgDIAMoBRIO",
            "CgZodUxpc3QYBCADKAUSEAoIZ2FuZ0xpc3QYBSADKAUSDgoGYnVMaXN0GAYg",
            "AygFEhAKCHBlbmdMaXN0GAcgAygFEjgKB2NoaUxpc3QYCCADKAsyJy5sb2Ji",
            "eXNlcnZpY2UucHJvdG9idWYuTWVzc2FnZURlc2tDYXJkcxI0Cgh0aW5nTGlz",
            "dBgJIAMoCzIiLmxvYmJ5c2VydmljZS5wcm90b2J1Zi5NZXNzYWdlVGluZyJS",
            "Cg9NZXNzYWdlRGVza1BsYXkSDgoGZGVza0lkGAEgASgFEg4KBnVzZXJJZBgC",
            "IAEoAxIRCglnYW1lU3RhZ2UYAyABKAUSDAoEdGltZRgEIAEoAyKGAQoSTWVz",
            "c2FnZURlc2tDb21wYXJlEg4KBmRlc2tJZBgBIAEoBRIRCgloYW5kQ2FyZHMY",
            "AiADKAUSEQoJbmlhb0NhcmRzGAMgAygFEjoKBWluZm9zGAQgAygLMisubG9i",
            "YnlzZXJ2aWNlLnByb3RvYnVmLk1lc3NhZ2VQbGF5ZXJDb21wYXJlIpYCChRN",
            "ZXNzYWdlUGxheWVyQ29tcGFyZRIOCgZ1c2VySWQYASABKAMSDwoHaHVDYXJk",
            "cxgCIAMoBRINCgVodUZhbhgDIAEoBRIOCgZodVR5cGUYBCABKAUSEQoJaGFu",
            "ZENhcmRzGAUgAygFEhAKCGdhbmdMaXN0GAYgAygFEhIKCmFuR2FuZ0xpc3QY",
            "ByADKAUSEAoIcGVuZ0xpc3QYCCADKAUSOAoHY2hpTGlzdBgJIAMoCzInLmxv",
            "YmJ5c2VydmljZS5wcm90b2J1Zi5NZXNzYWdlRGVza0NhcmRzEhAKCG5pYW9M",
            "aXN0GAogAygFEhAKCGh1SWRMaXN0GAsgAygFEhUKDXN0YXJ0SHVJZExpc3QY",
            "DCADKAUi1gEKF01lc3NhZ2VEZXNrRmluYWxDb21wYXJlEg4KBmRlc2tJZBgB",
            "IAEoBRIMCgR0eXBlGAIgASgFEhEKCXJvb21Pd25lchgDIAEoAxISCgp0b3Rh",
            "bENvdW50GAQgASgDEhEKCXJlYWxDb3VudBgFIAEoBRIRCglzdGFydFRpbWUY",
            "BiABKAMSDwoHZW5kVGltZRgHIAEoAxI/CgVpbmZvcxgIIAMoCzIwLmxvYmJ5",
            "c2VydmljZS5wcm90b2J1Zi5NZXNzYWdlUGxheWVyRmluYWxDb21wYXJlItsB",
            "ChlNZXNzYWdlUGxheWVyRmluYWxDb21wYXJlEg4KBnVzZXJJZBgBIAEoAxIQ",
            "CghuaWNrTmFtZRgCIAEoCRISCgpoZWFkSW1nVXJsGAMgASgJEhMKC3podWFu",
            "Z0NvdW50GAQgASgFEg8KB2h1Q291bnQYBSABKAUSEQoJZGFIdUNvdW50GAYg",
            "ASgFEhAKCHBhb0NvdW50GAcgASgFEhAKCHRvdGFsRmFuGAggASgFEhQKDGpp",
            "ZUdhbmdDb3VudBgJIAEoBRIVCg1kaWFuR2FuZ0NvdW50GAogASgFIk4KDE1l",
            "c3NhZ2VWaWRlbxIOCgZ1c2VySWQYASABKAMSLgoHcmVjb3JkcxgCIAMoCzId",
            "LmxvYmJ5c2VydmljZS5wcm90b2J1Zi5SZWNvcmQisgIKBlJlY29yZBIKCgJp",
            "ZBgBIAEoBRI4CghkZXNrRnVsbBgCIAEoCzImLmxvYmJ5c2VydmljZS5wcm90",
            "b2J1Zi5NZXNzYWdlRGVza0Z1bGwSOAoGY29tbW9uGAMgASgLMigubG9iYnlz",
            "ZXJ2aWNlLnByb3RvYnVmLk1lc3NhZ2VEZXNrQ29tbW9uEjYKB3N0YXJ0SHUY",
            "BCABKAsyJS5sb2JieXNlcnZpY2UucHJvdG9idWYuTWVzc2FnZVN0YXJ0SHUS",
            "NAoEdGlwcxgFIAEoCzImLmxvYmJ5c2VydmljZS5wcm90b2J1Zi5NZXNzYWdl",
            "Q2FyZFRpcHMSOgoHY29tcGFyZRgGIAEoCzIpLmxvYmJ5c2VydmljZS5wcm90",
            "b2J1Zi5NZXNzYWdlRGVza0NvbXBhcmVCKAodY29tLmhvb2xhaS5jZW50ZXJz",
            "ZGsucHJvdG9idWZCB01qUHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Lobbyservice.Protobuf.DeskRequest), global::Lobbyservice.Protobuf.DeskRequest.Parser, new[]{ "DeskId", "Amount", "Value", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lobbyservice.Protobuf.MessageDeskFull), global::Lobbyservice.Protobuf.MessageDeskFull.Parser, new[]{ "DeskId", "Code", "Position", "DeskInfo", "Players" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lobbyservice.Protobuf.MessageDeskInfo), global::Lobbyservice.Protobuf.MessageDeskInfo.Parser, new[]{ "DeskId", "GroupId", "GameStage", "DeskName", "DeskType", "PassWord", "LastCardCount", "RoomOwner", "ZhuangId", "NiaoCount", "NiaoAddType", "BoardCount", "CardTypeIds", "PiaoFen", "LastNiao", "ZuoBiStatus", "RealCount", "TotalCount", "FriendCircleId", "LastOutCardUserId", "KeXuanIndex", "LaiZiCount", "QiangGangZhuaNiao", "QingMoJiaMa", "IsAA", "IsDYJ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lobbyservice.Protobuf.MessagePlayerDetail), global::Lobbyservice.Protobuf.MessagePlayerDetail.Parser, new[]{ "DeskId", "UserId", "Position", "PlayerState", "HandCards", "NickName", "HeadImgUrl", "Sex", "GameGold", "GangList", "AnGangList", "PengList", "ChiList", "OutCardList", "TotalFan" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lobbyservice.Protobuf.MessagePlayerInfo), global::Lobbyservice.Protobuf.MessagePlayerInfo.Parser, new[]{ "DeskId", "UserId", "Position", "PlayerState", "Code", "NickName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lobbyservice.Protobuf.MessagePlayerInfos), global::Lobbyservice.Protobuf.MessagePlayerInfos.Parser, new[]{ "DeskId", "UserId", "Amount", "Infos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lobbyservice.Protobuf.MessageDeskCommon), global::Lobbyservice.Protobuf.MessageDeskCommon.Parser, new[]{ "DeskId", "Card", "Code", "UserId", "OtherUserId", "UserIds", "Position", "Amount", "Count", "LastCardCount", "StrVal", "Cards", "Ids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lobbyservice.Protobuf.MessageDeskCards), global::Lobbyservice.Protobuf.MessageDeskCards.Parser, new[]{ "DeskId", "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lobbyservice.Protobuf.MessageStartHu), global::Lobbyservice.Protobuf.MessageStartHu.Parser, new[]{ "DeskId", "UserId", "Code", "Ids", "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lobbyservice.Protobuf.MessageTing), global::Lobbyservice.Protobuf.MessageTing.Parser, new[]{ "OutCard", "TingCards", "TingCounts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lobbyservice.Protobuf.MessageCardTips), global::Lobbyservice.Protobuf.MessageCardTips.Parser, new[]{ "DeskId", "UserId", "Cards", "HuList", "GangList", "BuList", "PengList", "ChiList", "TingList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lobbyservice.Protobuf.MessageDeskPlay), global::Lobbyservice.Protobuf.MessageDeskPlay.Parser, new[]{ "DeskId", "UserId", "GameStage", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lobbyservice.Protobuf.MessageDeskCompare), global::Lobbyservice.Protobuf.MessageDeskCompare.Parser, new[]{ "DeskId", "HandCards", "NiaoCards", "Infos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lobbyservice.Protobuf.MessagePlayerCompare), global::Lobbyservice.Protobuf.MessagePlayerCompare.Parser, new[]{ "UserId", "HuCards", "HuFan", "HuType", "HandCards", "GangList", "AnGangList", "PengList", "ChiList", "NiaoList", "HuIdList", "StartHuIdList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lobbyservice.Protobuf.MessageDeskFinalCompare), global::Lobbyservice.Protobuf.MessageDeskFinalCompare.Parser, new[]{ "DeskId", "Type", "RoomOwner", "TotalCount", "RealCount", "StartTime", "EndTime", "Infos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lobbyservice.Protobuf.MessagePlayerFinalCompare), global::Lobbyservice.Protobuf.MessagePlayerFinalCompare.Parser, new[]{ "UserId", "NickName", "HeadImgUrl", "ZhuangCount", "HuCount", "DaHuCount", "PaoCount", "TotalFan", "JieGangCount", "DianGangCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lobbyservice.Protobuf.MessageVideo), global::Lobbyservice.Protobuf.MessageVideo.Parser, new[]{ "UserId", "Records" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lobbyservice.Protobuf.Record), global::Lobbyservice.Protobuf.Record.Parser, new[]{ "Id", "DeskFull", "Common", "StartHu", "Tips", "Compare" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///牌桌请求类,此类为牌桌内前端向后端请求的类,其定义了很多属性,属性的具体释意由逻辑负责,避免重复定义消息体.
  /// </summary>
  public sealed partial class DeskRequest : pb::IMessage<DeskRequest> {
    private static readonly pb::MessageParser<DeskRequest> _parser = new pb::MessageParser<DeskRequest>(() => new DeskRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeskRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lobbyservice.Protobuf.MjRoomReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeskRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeskRequest(DeskRequest other) : this() {
      deskId_ = other.deskId_;
      amount_ = other.amount_;
      value_ = other.value_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeskRequest Clone() {
      return new DeskRequest(this);
    }

    /// <summary>Field number for the "deskId" field.</summary>
    public const int DeskIdFieldNumber = 1;
    private int deskId_;
    /// <summary>
    /// 牌桌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeskId {
      get { return deskId_; }
      set {
        deskId_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private int amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeskRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeskRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeskId != other.DeskId) return false;
      if (Amount != other.Amount) return false;
      if (Value != other.Value) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeskId != 0) hash ^= DeskId.GetHashCode();
      if (Amount != 0) hash ^= Amount.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeskId);
      }
      if (Amount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Amount);
      }
      if (Value != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Value);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeskId);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeskRequest other) {
      if (other == null) {
        return;
      }
      if (other.DeskId != 0) {
        DeskId = other.DeskId;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeskId = input.ReadInt32();
            break;
          }
          case 16: {
            Amount = input.ReadInt32();
            break;
          }
          case 24: {
            Value = input.ReadInt32();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///牌桌消息集合类,是很多消息组件的集合，例如：牌桌信息、牌桌变量、玩家详细信息
  /// </summary>
  public sealed partial class MessageDeskFull : pb::IMessage<MessageDeskFull> {
    private static readonly pb::MessageParser<MessageDeskFull> _parser = new pb::MessageParser<MessageDeskFull>(() => new MessageDeskFull());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageDeskFull> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lobbyservice.Protobuf.MjRoomReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDeskFull() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDeskFull(MessageDeskFull other) : this() {
      deskId_ = other.deskId_;
      code_ = other.code_;
      position_ = other.position_;
      deskInfo_ = other.deskInfo_ != null ? other.deskInfo_.Clone() : null;
      players_ = other.players_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDeskFull Clone() {
      return new MessageDeskFull(this);
    }

    /// <summary>Field number for the "deskId" field.</summary>
    public const int DeskIdFieldNumber = 1;
    private int deskId_;
    /// <summary>
    /// 牌桌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeskId {
      get { return deskId_; }
      set {
        deskId_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private int code_;
    /// <summary>
    /// 返回码。具体释义由每个逻辑详细解释
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private int position_;
    /// <summary>
    /// 当前玩家的座位号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "deskInfo" field.</summary>
    public const int DeskInfoFieldNumber = 4;
    private global::Lobbyservice.Protobuf.MessageDeskInfo deskInfo_;
    /// <summary>
    /// 牌桌信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lobbyservice.Protobuf.MessageDeskInfo DeskInfo {
      get { return deskInfo_; }
      set {
        deskInfo_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Lobbyservice.Protobuf.MessagePlayerDetail> _repeated_players_codec
        = pb::FieldCodec.ForMessage(42, global::Lobbyservice.Protobuf.MessagePlayerDetail.Parser);
    private readonly pbc::RepeatedField<global::Lobbyservice.Protobuf.MessagePlayerDetail> players_ = new pbc::RepeatedField<global::Lobbyservice.Protobuf.MessagePlayerDetail>();
    /// <summary>
    /// 玩家列表信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lobbyservice.Protobuf.MessagePlayerDetail> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageDeskFull);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageDeskFull other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeskId != other.DeskId) return false;
      if (Code != other.Code) return false;
      if (Position != other.Position) return false;
      if (!object.Equals(DeskInfo, other.DeskInfo)) return false;
      if(!players_.Equals(other.players_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeskId != 0) hash ^= DeskId.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      if (deskInfo_ != null) hash ^= DeskInfo.GetHashCode();
      hash ^= players_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeskId);
      }
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Code);
      }
      if (Position != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Position);
      }
      if (deskInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DeskInfo);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeskId);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (deskInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeskInfo);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageDeskFull other) {
      if (other == null) {
        return;
      }
      if (other.DeskId != 0) {
        DeskId = other.DeskId;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
      if (other.deskInfo_ != null) {
        if (deskInfo_ == null) {
          deskInfo_ = new global::Lobbyservice.Protobuf.MessageDeskInfo();
        }
        DeskInfo.MergeFrom(other.DeskInfo);
      }
      players_.Add(other.players_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeskId = input.ReadInt32();
            break;
          }
          case 16: {
            Code = input.ReadInt32();
            break;
          }
          case 24: {
            Position = input.ReadInt32();
            break;
          }
          case 34: {
            if (deskInfo_ == null) {
              deskInfo_ = new global::Lobbyservice.Protobuf.MessageDeskInfo();
            }
            input.ReadMessage(deskInfo_);
            break;
          }
          case 42: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///牌桌信息
  /// </summary>
  public sealed partial class MessageDeskInfo : pb::IMessage<MessageDeskInfo> {
    private static readonly pb::MessageParser<MessageDeskInfo> _parser = new pb::MessageParser<MessageDeskInfo>(() => new MessageDeskInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageDeskInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lobbyservice.Protobuf.MjRoomReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDeskInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDeskInfo(MessageDeskInfo other) : this() {
      deskId_ = other.deskId_;
      groupId_ = other.groupId_;
      gameStage_ = other.gameStage_;
      deskName_ = other.deskName_;
      deskType_ = other.deskType_;
      passWord_ = other.passWord_;
      lastCardCount_ = other.lastCardCount_;
      roomOwner_ = other.roomOwner_;
      zhuangId_ = other.zhuangId_;
      niaoCount_ = other.niaoCount_;
      niaoAddType_ = other.niaoAddType_;
      boardCount_ = other.boardCount_;
      cardTypeIds_ = other.cardTypeIds_.Clone();
      piaoFen_ = other.piaoFen_;
      lastNiao_ = other.lastNiao_;
      zuoBiStatus_ = other.zuoBiStatus_;
      realCount_ = other.realCount_;
      totalCount_ = other.totalCount_;
      friendCircleId_ = other.friendCircleId_;
      lastOutCardUserId_ = other.lastOutCardUserId_;
      keXuanIndex_ = other.keXuanIndex_.Clone();
      laiZiCount_ = other.laiZiCount_;
      qiangGangZhuaNiao_ = other.qiangGangZhuaNiao_;
      qingMoJiaMa_ = other.qingMoJiaMa_;
      isAA_ = other.isAA_;
      isDYJ_ = other.isDYJ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDeskInfo Clone() {
      return new MessageDeskInfo(this);
    }

    /// <summary>Field number for the "deskId" field.</summary>
    public const int DeskIdFieldNumber = 1;
    private int deskId_;
    /// <summary>
    /// 牌桌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeskId {
      get { return deskId_; }
      set {
        deskId_ = value;
      }
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private int groupId_;
    /// <summary>
    /// 牌桌组ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "gameStage" field.</summary>
    public const int GameStageFieldNumber = 3;
    private int gameStage_;
    /// <summary>
    /// 游戏进程
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameStage {
      get { return gameStage_; }
      set {
        gameStage_ = value;
      }
    }

    /// <summary>Field number for the "deskName" field.</summary>
    public const int DeskNameFieldNumber = 4;
    private string deskName_ = "";
    /// <summary>
    /// 牌桌名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeskName {
      get { return deskName_; }
      set {
        deskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deskType" field.</summary>
    public const int DeskTypeFieldNumber = 5;
    private int deskType_;
    /// <summary>
    /// 牌桌类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeskType {
      get { return deskType_; }
      set {
        deskType_ = value;
      }
    }

    /// <summary>Field number for the "passWord" field.</summary>
    public const int PassWordFieldNumber = 6;
    private string passWord_ = "";
    /// <summary>
    /// 牌桌密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PassWord {
      get { return passWord_; }
      set {
        passWord_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lastCardCount" field.</summary>
    public const int LastCardCountFieldNumber = 7;
    private int lastCardCount_;
    /// <summary>
    /// 剩余牌个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastCardCount {
      get { return lastCardCount_; }
      set {
        lastCardCount_ = value;
      }
    }

    /// <summary>Field number for the "roomOwner" field.</summary>
    public const int RoomOwnerFieldNumber = 8;
    private long roomOwner_;
    /// <summary>
    /// 房主ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomOwner {
      get { return roomOwner_; }
      set {
        roomOwner_ = value;
      }
    }

    /// <summary>Field number for the "zhuangId" field.</summary>
    public const int ZhuangIdFieldNumber = 9;
    private long zhuangId_;
    /// <summary>
    /// 庄ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ZhuangId {
      get { return zhuangId_; }
      set {
        zhuangId_ = value;
      }
    }

    /// <summary>Field number for the "niaoCount" field.</summary>
    public const int NiaoCountFieldNumber = 10;
    private int niaoCount_;
    /// <summary>
    /// 鸟牌个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NiaoCount {
      get { return niaoCount_; }
      set {
        niaoCount_ = value;
      }
    }

    /// <summary>Field number for the "niaoAddType" field.</summary>
    public const int NiaoAddTypeFieldNumber = 11;
    private int niaoAddType_;
    /// <summary>
    /// 鸟牌算法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NiaoAddType {
      get { return niaoAddType_; }
      set {
        niaoAddType_ = value;
      }
    }

    /// <summary>Field number for the "boardCount" field.</summary>
    public const int BoardCountFieldNumber = 12;
    private int boardCount_;
    /// <summary>
    /// 局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardCount {
      get { return boardCount_; }
      set {
        boardCount_ = value;
      }
    }

    /// <summary>Field number for the "cardTypeIds" field.</summary>
    public const int CardTypeIdsFieldNumber = 13;
    private static readonly pb::FieldCodec<int> _repeated_cardTypeIds_codec
        = pb::FieldCodec.ForInt32(106);
    private readonly pbc::RepeatedField<int> cardTypeIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 允许的玩法ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CardTypeIds {
      get { return cardTypeIds_; }
    }

    /// <summary>Field number for the "piaoFen" field.</summary>
    public const int PiaoFenFieldNumber = 14;
    private int piaoFen_;
    /// <summary>
    /// 飘分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PiaoFen {
      get { return piaoFen_; }
      set {
        piaoFen_ = value;
      }
    }

    /// <summary>Field number for the "lastNiao" field.</summary>
    public const int LastNiaoFieldNumber = 15;
    private int lastNiao_;
    /// <summary>
    /// 海底抓鸟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastNiao {
      get { return lastNiao_; }
      set {
        lastNiao_ = value;
      }
    }

    /// <summary>Field number for the "zuoBiStatus" field.</summary>
    public const int ZuoBiStatusFieldNumber = 16;
    private int zuoBiStatus_;
    /// <summary>
    /// 防作弊
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZuoBiStatus {
      get { return zuoBiStatus_; }
      set {
        zuoBiStatus_ = value;
      }
    }

    /// <summary>Field number for the "realCount" field.</summary>
    public const int RealCountFieldNumber = 17;
    private int realCount_;
    /// <summary>
    /// 每局局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RealCount {
      get { return realCount_; }
      set {
        realCount_ = value;
      }
    }

    /// <summary>Field number for the "totalCount" field.</summary>
    public const int TotalCountFieldNumber = 18;
    private int totalCount_;
    /// <summary>
    /// 总局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    /// <summary>Field number for the "friendCircleId" field.</summary>
    public const int FriendCircleIdFieldNumber = 19;
    private int friendCircleId_;
    /// <summary>
    /// 亲友圈ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FriendCircleId {
      get { return friendCircleId_; }
      set {
        friendCircleId_ = value;
      }
    }

    /// <summary>Field number for the "lastOutCardUserId" field.</summary>
    public const int LastOutCardUserIdFieldNumber = 20;
    private long lastOutCardUserId_;
    /// <summary>
    /// 最后打牌玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastOutCardUserId {
      get { return lastOutCardUserId_; }
      set {
        lastOutCardUserId_ = value;
      }
    }

    /// <summary>Field number for the "keXuanIndex" field.</summary>
    public const int KeXuanIndexFieldNumber = 21;
    private static readonly pb::FieldCodec<int> _repeated_keXuanIndex_codec
        = pb::FieldCodec.ForInt32(170);
    private readonly pbc::RepeatedField<int> keXuanIndex_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///红中选项
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> KeXuanIndex {
      get { return keXuanIndex_; }
    }

    /// <summary>Field number for the "laiZiCount" field.</summary>
    public const int LaiZiCountFieldNumber = 22;
    private int laiZiCount_;
    /// <summary>
    /// 赖子个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaiZiCount {
      get { return laiZiCount_; }
      set {
        laiZiCount_ = value;
      }
    }

    /// <summary>Field number for the "qiangGangZhuaNiao" field.</summary>
    public const int QiangGangZhuaNiaoFieldNumber = 24;
    private int qiangGangZhuaNiao_;
    /// <summary>
    /// 抢杠抓鸟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QiangGangZhuaNiao {
      get { return qiangGangZhuaNiao_; }
      set {
        qiangGangZhuaNiao_ = value;
      }
    }

    /// <summary>Field number for the "qingMoJiaMa" field.</summary>
    public const int QingMoJiaMaFieldNumber = 25;
    private int qingMoJiaMa_;
    /// <summary>
    /// 清摸加码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QingMoJiaMa {
      get { return qingMoJiaMa_; }
      set {
        qingMoJiaMa_ = value;
      }
    }

    /// <summary>Field number for the "isAA" field.</summary>
    public const int IsAAFieldNumber = 26;
    private bool isAA_;
    /// <summary>
    ///追加选项
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAA {
      get { return isAA_; }
      set {
        isAA_ = value;
      }
    }

    /// <summary>Field number for the "isDYJ" field.</summary>
    public const int IsDYJFieldNumber = 27;
    private bool isDYJ_;
    /// <summary>
    /// 是否大赢家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDYJ {
      get { return isDYJ_; }
      set {
        isDYJ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageDeskInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageDeskInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeskId != other.DeskId) return false;
      if (GroupId != other.GroupId) return false;
      if (GameStage != other.GameStage) return false;
      if (DeskName != other.DeskName) return false;
      if (DeskType != other.DeskType) return false;
      if (PassWord != other.PassWord) return false;
      if (LastCardCount != other.LastCardCount) return false;
      if (RoomOwner != other.RoomOwner) return false;
      if (ZhuangId != other.ZhuangId) return false;
      if (NiaoCount != other.NiaoCount) return false;
      if (NiaoAddType != other.NiaoAddType) return false;
      if (BoardCount != other.BoardCount) return false;
      if(!cardTypeIds_.Equals(other.cardTypeIds_)) return false;
      if (PiaoFen != other.PiaoFen) return false;
      if (LastNiao != other.LastNiao) return false;
      if (ZuoBiStatus != other.ZuoBiStatus) return false;
      if (RealCount != other.RealCount) return false;
      if (TotalCount != other.TotalCount) return false;
      if (FriendCircleId != other.FriendCircleId) return false;
      if (LastOutCardUserId != other.LastOutCardUserId) return false;
      if(!keXuanIndex_.Equals(other.keXuanIndex_)) return false;
      if (LaiZiCount != other.LaiZiCount) return false;
      if (QiangGangZhuaNiao != other.QiangGangZhuaNiao) return false;
      if (QingMoJiaMa != other.QingMoJiaMa) return false;
      if (IsAA != other.IsAA) return false;
      if (IsDYJ != other.IsDYJ) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeskId != 0) hash ^= DeskId.GetHashCode();
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (GameStage != 0) hash ^= GameStage.GetHashCode();
      if (DeskName.Length != 0) hash ^= DeskName.GetHashCode();
      if (DeskType != 0) hash ^= DeskType.GetHashCode();
      if (PassWord.Length != 0) hash ^= PassWord.GetHashCode();
      if (LastCardCount != 0) hash ^= LastCardCount.GetHashCode();
      if (RoomOwner != 0L) hash ^= RoomOwner.GetHashCode();
      if (ZhuangId != 0L) hash ^= ZhuangId.GetHashCode();
      if (NiaoCount != 0) hash ^= NiaoCount.GetHashCode();
      if (NiaoAddType != 0) hash ^= NiaoAddType.GetHashCode();
      if (BoardCount != 0) hash ^= BoardCount.GetHashCode();
      hash ^= cardTypeIds_.GetHashCode();
      if (PiaoFen != 0) hash ^= PiaoFen.GetHashCode();
      if (LastNiao != 0) hash ^= LastNiao.GetHashCode();
      if (ZuoBiStatus != 0) hash ^= ZuoBiStatus.GetHashCode();
      if (RealCount != 0) hash ^= RealCount.GetHashCode();
      if (TotalCount != 0) hash ^= TotalCount.GetHashCode();
      if (FriendCircleId != 0) hash ^= FriendCircleId.GetHashCode();
      if (LastOutCardUserId != 0L) hash ^= LastOutCardUserId.GetHashCode();
      hash ^= keXuanIndex_.GetHashCode();
      if (LaiZiCount != 0) hash ^= LaiZiCount.GetHashCode();
      if (QiangGangZhuaNiao != 0) hash ^= QiangGangZhuaNiao.GetHashCode();
      if (QingMoJiaMa != 0) hash ^= QingMoJiaMa.GetHashCode();
      if (IsAA != false) hash ^= IsAA.GetHashCode();
      if (IsDYJ != false) hash ^= IsDYJ.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeskId);
      }
      if (GroupId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GroupId);
      }
      if (GameStage != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GameStage);
      }
      if (DeskName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DeskName);
      }
      if (DeskType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DeskType);
      }
      if (PassWord.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PassWord);
      }
      if (LastCardCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LastCardCount);
      }
      if (RoomOwner != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(RoomOwner);
      }
      if (ZhuangId != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(ZhuangId);
      }
      if (NiaoCount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(NiaoCount);
      }
      if (NiaoAddType != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(NiaoAddType);
      }
      if (BoardCount != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(BoardCount);
      }
      cardTypeIds_.WriteTo(output, _repeated_cardTypeIds_codec);
      if (PiaoFen != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(PiaoFen);
      }
      if (LastNiao != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(LastNiao);
      }
      if (ZuoBiStatus != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(ZuoBiStatus);
      }
      if (RealCount != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(RealCount);
      }
      if (TotalCount != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(TotalCount);
      }
      if (FriendCircleId != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(FriendCircleId);
      }
      if (LastOutCardUserId != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(LastOutCardUserId);
      }
      keXuanIndex_.WriteTo(output, _repeated_keXuanIndex_codec);
      if (LaiZiCount != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(LaiZiCount);
      }
      if (QiangGangZhuaNiao != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(QiangGangZhuaNiao);
      }
      if (QingMoJiaMa != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(QingMoJiaMa);
      }
      if (IsAA != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IsAA);
      }
      if (IsDYJ != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(IsDYJ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeskId);
      }
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
      }
      if (GameStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameStage);
      }
      if (DeskName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeskName);
      }
      if (DeskType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeskType);
      }
      if (PassWord.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PassWord);
      }
      if (LastCardCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastCardCount);
      }
      if (RoomOwner != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomOwner);
      }
      if (ZhuangId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ZhuangId);
      }
      if (NiaoCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NiaoCount);
      }
      if (NiaoAddType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NiaoAddType);
      }
      if (BoardCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardCount);
      }
      size += cardTypeIds_.CalculateSize(_repeated_cardTypeIds_codec);
      if (PiaoFen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PiaoFen);
      }
      if (LastNiao != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastNiao);
      }
      if (ZuoBiStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ZuoBiStatus);
      }
      if (RealCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RealCount);
      }
      if (TotalCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TotalCount);
      }
      if (FriendCircleId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FriendCircleId);
      }
      if (LastOutCardUserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastOutCardUserId);
      }
      size += keXuanIndex_.CalculateSize(_repeated_keXuanIndex_codec);
      if (LaiZiCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LaiZiCount);
      }
      if (QiangGangZhuaNiao != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(QiangGangZhuaNiao);
      }
      if (QingMoJiaMa != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(QingMoJiaMa);
      }
      if (IsAA != false) {
        size += 2 + 1;
      }
      if (IsDYJ != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageDeskInfo other) {
      if (other == null) {
        return;
      }
      if (other.DeskId != 0) {
        DeskId = other.DeskId;
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      if (other.GameStage != 0) {
        GameStage = other.GameStage;
      }
      if (other.DeskName.Length != 0) {
        DeskName = other.DeskName;
      }
      if (other.DeskType != 0) {
        DeskType = other.DeskType;
      }
      if (other.PassWord.Length != 0) {
        PassWord = other.PassWord;
      }
      if (other.LastCardCount != 0) {
        LastCardCount = other.LastCardCount;
      }
      if (other.RoomOwner != 0L) {
        RoomOwner = other.RoomOwner;
      }
      if (other.ZhuangId != 0L) {
        ZhuangId = other.ZhuangId;
      }
      if (other.NiaoCount != 0) {
        NiaoCount = other.NiaoCount;
      }
      if (other.NiaoAddType != 0) {
        NiaoAddType = other.NiaoAddType;
      }
      if (other.BoardCount != 0) {
        BoardCount = other.BoardCount;
      }
      cardTypeIds_.Add(other.cardTypeIds_);
      if (other.PiaoFen != 0) {
        PiaoFen = other.PiaoFen;
      }
      if (other.LastNiao != 0) {
        LastNiao = other.LastNiao;
      }
      if (other.ZuoBiStatus != 0) {
        ZuoBiStatus = other.ZuoBiStatus;
      }
      if (other.RealCount != 0) {
        RealCount = other.RealCount;
      }
      if (other.TotalCount != 0) {
        TotalCount = other.TotalCount;
      }
      if (other.FriendCircleId != 0) {
        FriendCircleId = other.FriendCircleId;
      }
      if (other.LastOutCardUserId != 0L) {
        LastOutCardUserId = other.LastOutCardUserId;
      }
      keXuanIndex_.Add(other.keXuanIndex_);
      if (other.LaiZiCount != 0) {
        LaiZiCount = other.LaiZiCount;
      }
      if (other.QiangGangZhuaNiao != 0) {
        QiangGangZhuaNiao = other.QiangGangZhuaNiao;
      }
      if (other.QingMoJiaMa != 0) {
        QingMoJiaMa = other.QingMoJiaMa;
      }
      if (other.IsAA != false) {
        IsAA = other.IsAA;
      }
      if (other.IsDYJ != false) {
        IsDYJ = other.IsDYJ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeskId = input.ReadInt32();
            break;
          }
          case 16: {
            GroupId = input.ReadInt32();
            break;
          }
          case 24: {
            GameStage = input.ReadInt32();
            break;
          }
          case 34: {
            DeskName = input.ReadString();
            break;
          }
          case 40: {
            DeskType = input.ReadInt32();
            break;
          }
          case 50: {
            PassWord = input.ReadString();
            break;
          }
          case 56: {
            LastCardCount = input.ReadInt32();
            break;
          }
          case 64: {
            RoomOwner = input.ReadInt64();
            break;
          }
          case 72: {
            ZhuangId = input.ReadInt64();
            break;
          }
          case 80: {
            NiaoCount = input.ReadInt32();
            break;
          }
          case 88: {
            NiaoAddType = input.ReadInt32();
            break;
          }
          case 96: {
            BoardCount = input.ReadInt32();
            break;
          }
          case 106:
          case 104: {
            cardTypeIds_.AddEntriesFrom(input, _repeated_cardTypeIds_codec);
            break;
          }
          case 112: {
            PiaoFen = input.ReadInt32();
            break;
          }
          case 120: {
            LastNiao = input.ReadInt32();
            break;
          }
          case 128: {
            ZuoBiStatus = input.ReadInt32();
            break;
          }
          case 136: {
            RealCount = input.ReadInt32();
            break;
          }
          case 144: {
            TotalCount = input.ReadInt32();
            break;
          }
          case 152: {
            FriendCircleId = input.ReadInt32();
            break;
          }
          case 160: {
            LastOutCardUserId = input.ReadInt64();
            break;
          }
          case 170:
          case 168: {
            keXuanIndex_.AddEntriesFrom(input, _repeated_keXuanIndex_codec);
            break;
          }
          case 176: {
            LaiZiCount = input.ReadInt32();
            break;
          }
          case 192: {
            QiangGangZhuaNiao = input.ReadInt32();
            break;
          }
          case 200: {
            QingMoJiaMa = input.ReadInt32();
            break;
          }
          case 208: {
            IsAA = input.ReadBool();
            break;
          }
          case 216: {
            IsDYJ = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家详细信息
  /// </summary>
  public sealed partial class MessagePlayerDetail : pb::IMessage<MessagePlayerDetail> {
    private static readonly pb::MessageParser<MessagePlayerDetail> _parser = new pb::MessageParser<MessagePlayerDetail>(() => new MessagePlayerDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessagePlayerDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lobbyservice.Protobuf.MjRoomReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagePlayerDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagePlayerDetail(MessagePlayerDetail other) : this() {
      deskId_ = other.deskId_;
      userId_ = other.userId_;
      position_ = other.position_;
      playerState_ = other.playerState_;
      handCards_ = other.handCards_.Clone();
      nickName_ = other.nickName_;
      headImgUrl_ = other.headImgUrl_;
      sex_ = other.sex_;
      gameGold_ = other.gameGold_;
      gangList_ = other.gangList_.Clone();
      anGangList_ = other.anGangList_.Clone();
      pengList_ = other.pengList_.Clone();
      chiList_ = other.chiList_.Clone();
      outCardList_ = other.outCardList_.Clone();
      totalFan_ = other.totalFan_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagePlayerDetail Clone() {
      return new MessagePlayerDetail(this);
    }

    /// <summary>Field number for the "deskId" field.</summary>
    public const int DeskIdFieldNumber = 1;
    private int deskId_;
    /// <summary>
    /// 牌桌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeskId {
      get { return deskId_; }
      set {
        deskId_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    /// 用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private int position_;
    /// <summary>
    /// 座位号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "playerState" field.</summary>
    public const int PlayerStateFieldNumber = 4;
    private int playerState_;
    /// <summary>
    /// 玩家状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerState {
      get { return playerState_; }
      set {
        playerState_ = value;
      }
    }

    /// <summary>Field number for the "handCards" field.</summary>
    public const int HandCardsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_handCards_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> handCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HandCards {
      get { return handCards_; }
    }

    /// <summary>Field number for the "nickName" field.</summary>
    public const int NickNameFieldNumber = 6;
    private string nickName_ = "";
    /// <summary>
    /// 用户名\昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headImgUrl" field.</summary>
    public const int HeadImgUrlFieldNumber = 7;
    private string headImgUrl_ = "";
    /// <summary>
    /// 玩家头像地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadImgUrl {
      get { return headImgUrl_; }
      set {
        headImgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 8;
    private string sex_ = "";
    /// <summary>
    /// 性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sex {
      get { return sex_; }
      set {
        sex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gameGold" field.</summary>
    public const int GameGoldFieldNumber = 9;
    private long gameGold_;
    /// <summary>
    /// 玩家筹码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GameGold {
      get { return gameGold_; }
      set {
        gameGold_ = value;
      }
    }

    /// <summary>Field number for the "gangList" field.</summary>
    public const int GangListFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_gangList_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> gangList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 杠列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GangList {
      get { return gangList_; }
    }

    /// <summary>Field number for the "anGangList" field.</summary>
    public const int AnGangListFieldNumber = 11;
    private static readonly pb::FieldCodec<int> _repeated_anGangList_codec
        = pb::FieldCodec.ForInt32(90);
    private readonly pbc::RepeatedField<int> anGangList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 暗杠列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AnGangList {
      get { return anGangList_; }
    }

    /// <summary>Field number for the "pengList" field.</summary>
    public const int PengListFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_pengList_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> pengList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 碰列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PengList {
      get { return pengList_; }
    }

    /// <summary>Field number for the "chiList" field.</summary>
    public const int ChiListFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Lobbyservice.Protobuf.MessageDeskCards> _repeated_chiList_codec
        = pb::FieldCodec.ForMessage(106, global::Lobbyservice.Protobuf.MessageDeskCards.Parser);
    private readonly pbc::RepeatedField<global::Lobbyservice.Protobuf.MessageDeskCards> chiList_ = new pbc::RepeatedField<global::Lobbyservice.Protobuf.MessageDeskCards>();
    /// <summary>
    /// 吃列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lobbyservice.Protobuf.MessageDeskCards> ChiList {
      get { return chiList_; }
    }

    /// <summary>Field number for the "outCardList" field.</summary>
    public const int OutCardListFieldNumber = 14;
    private static readonly pb::FieldCodec<int> _repeated_outCardList_codec
        = pb::FieldCodec.ForInt32(114);
    private readonly pbc::RepeatedField<int> outCardList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 打牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> OutCardList {
      get { return outCardList_; }
    }

    /// <summary>Field number for the "totalFan" field.</summary>
    public const int TotalFanFieldNumber = 15;
    private int totalFan_;
    /// <summary>
    /// 总番数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalFan {
      get { return totalFan_; }
      set {
        totalFan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessagePlayerDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessagePlayerDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeskId != other.DeskId) return false;
      if (UserId != other.UserId) return false;
      if (Position != other.Position) return false;
      if (PlayerState != other.PlayerState) return false;
      if(!handCards_.Equals(other.handCards_)) return false;
      if (NickName != other.NickName) return false;
      if (HeadImgUrl != other.HeadImgUrl) return false;
      if (Sex != other.Sex) return false;
      if (GameGold != other.GameGold) return false;
      if(!gangList_.Equals(other.gangList_)) return false;
      if(!anGangList_.Equals(other.anGangList_)) return false;
      if(!pengList_.Equals(other.pengList_)) return false;
      if(!chiList_.Equals(other.chiList_)) return false;
      if(!outCardList_.Equals(other.outCardList_)) return false;
      if (TotalFan != other.TotalFan) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeskId != 0) hash ^= DeskId.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      if (PlayerState != 0) hash ^= PlayerState.GetHashCode();
      hash ^= handCards_.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (HeadImgUrl.Length != 0) hash ^= HeadImgUrl.GetHashCode();
      if (Sex.Length != 0) hash ^= Sex.GetHashCode();
      if (GameGold != 0L) hash ^= GameGold.GetHashCode();
      hash ^= gangList_.GetHashCode();
      hash ^= anGangList_.GetHashCode();
      hash ^= pengList_.GetHashCode();
      hash ^= chiList_.GetHashCode();
      hash ^= outCardList_.GetHashCode();
      if (TotalFan != 0) hash ^= TotalFan.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeskId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (Position != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Position);
      }
      if (PlayerState != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerState);
      }
      handCards_.WriteTo(output, _repeated_handCards_codec);
      if (NickName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(NickName);
      }
      if (HeadImgUrl.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(HeadImgUrl);
      }
      if (Sex.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Sex);
      }
      if (GameGold != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(GameGold);
      }
      gangList_.WriteTo(output, _repeated_gangList_codec);
      anGangList_.WriteTo(output, _repeated_anGangList_codec);
      pengList_.WriteTo(output, _repeated_pengList_codec);
      chiList_.WriteTo(output, _repeated_chiList_codec);
      outCardList_.WriteTo(output, _repeated_outCardList_codec);
      if (TotalFan != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(TotalFan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeskId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (PlayerState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerState);
      }
      size += handCards_.CalculateSize(_repeated_handCards_codec);
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (HeadImgUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadImgUrl);
      }
      if (Sex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sex);
      }
      if (GameGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GameGold);
      }
      size += gangList_.CalculateSize(_repeated_gangList_codec);
      size += anGangList_.CalculateSize(_repeated_anGangList_codec);
      size += pengList_.CalculateSize(_repeated_pengList_codec);
      size += chiList_.CalculateSize(_repeated_chiList_codec);
      size += outCardList_.CalculateSize(_repeated_outCardList_codec);
      if (TotalFan != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalFan);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessagePlayerDetail other) {
      if (other == null) {
        return;
      }
      if (other.DeskId != 0) {
        DeskId = other.DeskId;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
      if (other.PlayerState != 0) {
        PlayerState = other.PlayerState;
      }
      handCards_.Add(other.handCards_);
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.HeadImgUrl.Length != 0) {
        HeadImgUrl = other.HeadImgUrl;
      }
      if (other.Sex.Length != 0) {
        Sex = other.Sex;
      }
      if (other.GameGold != 0L) {
        GameGold = other.GameGold;
      }
      gangList_.Add(other.gangList_);
      anGangList_.Add(other.anGangList_);
      pengList_.Add(other.pengList_);
      chiList_.Add(other.chiList_);
      outCardList_.Add(other.outCardList_);
      if (other.TotalFan != 0) {
        TotalFan = other.TotalFan;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeskId = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 24: {
            Position = input.ReadInt32();
            break;
          }
          case 32: {
            PlayerState = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            handCards_.AddEntriesFrom(input, _repeated_handCards_codec);
            break;
          }
          case 50: {
            NickName = input.ReadString();
            break;
          }
          case 58: {
            HeadImgUrl = input.ReadString();
            break;
          }
          case 66: {
            Sex = input.ReadString();
            break;
          }
          case 72: {
            GameGold = input.ReadInt64();
            break;
          }
          case 82:
          case 80: {
            gangList_.AddEntriesFrom(input, _repeated_gangList_codec);
            break;
          }
          case 90:
          case 88: {
            anGangList_.AddEntriesFrom(input, _repeated_anGangList_codec);
            break;
          }
          case 98:
          case 96: {
            pengList_.AddEntriesFrom(input, _repeated_pengList_codec);
            break;
          }
          case 106: {
            chiList_.AddEntriesFrom(input, _repeated_chiList_codec);
            break;
          }
          case 114:
          case 112: {
            outCardList_.AddEntriesFrom(input, _repeated_outCardList_codec);
            break;
          }
          case 120: {
            TotalFan = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家信息
  /// </summary>
  public sealed partial class MessagePlayerInfo : pb::IMessage<MessagePlayerInfo> {
    private static readonly pb::MessageParser<MessagePlayerInfo> _parser = new pb::MessageParser<MessagePlayerInfo>(() => new MessagePlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessagePlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lobbyservice.Protobuf.MjRoomReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagePlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagePlayerInfo(MessagePlayerInfo other) : this() {
      deskId_ = other.deskId_;
      userId_ = other.userId_;
      position_ = other.position_;
      playerState_ = other.playerState_;
      code_ = other.code_;
      nickName_ = other.nickName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagePlayerInfo Clone() {
      return new MessagePlayerInfo(this);
    }

    /// <summary>Field number for the "deskId" field.</summary>
    public const int DeskIdFieldNumber = 1;
    private int deskId_;
    /// <summary>
    /// 牌桌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeskId {
      get { return deskId_; }
      set {
        deskId_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    /// 用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private int position_;
    /// <summary>
    /// 座位号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "playerState" field.</summary>
    public const int PlayerStateFieldNumber = 4;
    private int playerState_;
    /// <summary>
    /// 玩家状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerState {
      get { return playerState_; }
      set {
        playerState_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 5;
    private int code_;
    /// <summary>
    /// 状态码。供某些逻辑使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "nickName" field.</summary>
    public const int NickNameFieldNumber = 6;
    private string nickName_ = "";
    /// <summary>
    /// 用户名\昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessagePlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessagePlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeskId != other.DeskId) return false;
      if (UserId != other.UserId) return false;
      if (Position != other.Position) return false;
      if (PlayerState != other.PlayerState) return false;
      if (Code != other.Code) return false;
      if (NickName != other.NickName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeskId != 0) hash ^= DeskId.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      if (PlayerState != 0) hash ^= PlayerState.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeskId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (Position != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Position);
      }
      if (PlayerState != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerState);
      }
      if (Code != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Code);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(NickName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeskId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (PlayerState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerState);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessagePlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.DeskId != 0) {
        DeskId = other.DeskId;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
      if (other.PlayerState != 0) {
        PlayerState = other.PlayerState;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeskId = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 24: {
            Position = input.ReadInt32();
            break;
          }
          case 32: {
            PlayerState = input.ReadInt32();
            break;
          }
          case 40: {
            Code = input.ReadInt32();
            break;
          }
          case 50: {
            NickName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家信息列表类
  /// </summary>
  public sealed partial class MessagePlayerInfos : pb::IMessage<MessagePlayerInfos> {
    private static readonly pb::MessageParser<MessagePlayerInfos> _parser = new pb::MessageParser<MessagePlayerInfos>(() => new MessagePlayerInfos());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessagePlayerInfos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lobbyservice.Protobuf.MjRoomReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagePlayerInfos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagePlayerInfos(MessagePlayerInfos other) : this() {
      deskId_ = other.deskId_;
      userId_ = other.userId_;
      amount_ = other.amount_;
      infos_ = other.infos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagePlayerInfos Clone() {
      return new MessagePlayerInfos(this);
    }

    /// <summary>Field number for the "deskId" field.</summary>
    public const int DeskIdFieldNumber = 1;
    private int deskId_;
    /// <summary>
    /// 牌桌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeskId {
      get { return deskId_; }
      set {
        deskId_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Lobbyservice.Protobuf.MessagePlayerInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(34, global::Lobbyservice.Protobuf.MessagePlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Lobbyservice.Protobuf.MessagePlayerInfo> infos_ = new pbc::RepeatedField<global::Lobbyservice.Protobuf.MessagePlayerInfo>();
    /// <summary>
    /// 玩家信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lobbyservice.Protobuf.MessagePlayerInfo> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessagePlayerInfos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessagePlayerInfos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeskId != other.DeskId) return false;
      if (UserId != other.UserId) return false;
      if (Amount != other.Amount) return false;
      if(!infos_.Equals(other.infos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeskId != 0) hash ^= DeskId.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      hash ^= infos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeskId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amount);
      }
      infos_.WriteTo(output, _repeated_infos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeskId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      size += infos_.CalculateSize(_repeated_infos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessagePlayerInfos other) {
      if (other == null) {
        return;
      }
      if (other.DeskId != 0) {
        DeskId = other.DeskId;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      infos_.Add(other.infos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeskId = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 24: {
            Amount = input.ReadInt64();
            break;
          }
          case 34: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///牌桌消息通用类。为了适应各种场景。避免重复定义消息体
  /// </summary>
  public sealed partial class MessageDeskCommon : pb::IMessage<MessageDeskCommon> {
    private static readonly pb::MessageParser<MessageDeskCommon> _parser = new pb::MessageParser<MessageDeskCommon>(() => new MessageDeskCommon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageDeskCommon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lobbyservice.Protobuf.MjRoomReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDeskCommon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDeskCommon(MessageDeskCommon other) : this() {
      deskId_ = other.deskId_;
      card_ = other.card_;
      code_ = other.code_;
      userId_ = other.userId_;
      otherUserId_ = other.otherUserId_;
      userIds_ = other.userIds_.Clone();
      position_ = other.position_;
      amount_ = other.amount_;
      count_ = other.count_;
      lastCardCount_ = other.lastCardCount_;
      strVal_ = other.strVal_;
      cards_ = other.cards_.Clone();
      ids_ = other.ids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDeskCommon Clone() {
      return new MessageDeskCommon(this);
    }

    /// <summary>Field number for the "deskId" field.</summary>
    public const int DeskIdFieldNumber = 1;
    private int deskId_;
    /// <summary>
    /// 牌桌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeskId {
      get { return deskId_; }
      set {
        deskId_ = value;
      }
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 2;
    private int card_;
    /// <summary>
    /// 牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private int code_;
    /// <summary>
    /// 返回码。具体释义由每个逻辑详细解释
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 4;
    private long userId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "otherUserId" field.</summary>
    public const int OtherUserIdFieldNumber = 5;
    private long otherUserId_;
    /// <summary>
    /// 其他玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OtherUserId {
      get { return otherUserId_; }
      set {
        otherUserId_ = value;
      }
    }

    /// <summary>Field number for the "userIds" field.</summary>
    public const int UserIdsFieldNumber = 6;
    private static readonly pb::FieldCodec<long> _repeated_userIds_codec
        = pb::FieldCodec.ForInt64(50);
    private readonly pbc::RepeatedField<long> userIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 玩家ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> UserIds {
      get { return userIds_; }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 7;
    private int position_;
    /// <summary>
    /// 座位号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 8;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 9;
    private int count_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "lastCardCount" field.</summary>
    public const int LastCardCountFieldNumber = 10;
    private int lastCardCount_;
    /// <summary>
    /// 剩余牌个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastCardCount {
      get { return lastCardCount_; }
      set {
        lastCardCount_ = value;
      }
    }

    /// <summary>Field number for the "strVal" field.</summary>
    public const int StrValFieldNumber = 11;
    private string strVal_ = "";
    /// <summary>
    /// 字符串属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrVal {
      get { return strVal_; }
      set {
        strVal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 13;
    private static readonly pb::FieldCodec<int> _repeated_ids_codec
        = pb::FieldCodec.ForInt32(106);
    private readonly pbc::RepeatedField<int> ids_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageDeskCommon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageDeskCommon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeskId != other.DeskId) return false;
      if (Card != other.Card) return false;
      if (Code != other.Code) return false;
      if (UserId != other.UserId) return false;
      if (OtherUserId != other.OtherUserId) return false;
      if(!userIds_.Equals(other.userIds_)) return false;
      if (Position != other.Position) return false;
      if (Amount != other.Amount) return false;
      if (Count != other.Count) return false;
      if (LastCardCount != other.LastCardCount) return false;
      if (StrVal != other.StrVal) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if(!ids_.Equals(other.ids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeskId != 0) hash ^= DeskId.GetHashCode();
      if (Card != 0) hash ^= Card.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (OtherUserId != 0L) hash ^= OtherUserId.GetHashCode();
      hash ^= userIds_.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (LastCardCount != 0) hash ^= LastCardCount.GetHashCode();
      if (StrVal.Length != 0) hash ^= StrVal.GetHashCode();
      hash ^= cards_.GetHashCode();
      hash ^= ids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeskId);
      }
      if (Card != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Card);
      }
      if (Code != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Code);
      }
      if (UserId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UserId);
      }
      if (OtherUserId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(OtherUserId);
      }
      userIds_.WriteTo(output, _repeated_userIds_codec);
      if (Position != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Position);
      }
      if (Amount != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Amount);
      }
      if (Count != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Count);
      }
      if (LastCardCount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(LastCardCount);
      }
      if (StrVal.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(StrVal);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      ids_.WriteTo(output, _repeated_ids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeskId);
      }
      if (Card != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (OtherUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OtherUserId);
      }
      size += userIds_.CalculateSize(_repeated_userIds_codec);
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (LastCardCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastCardCount);
      }
      if (StrVal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StrVal);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageDeskCommon other) {
      if (other == null) {
        return;
      }
      if (other.DeskId != 0) {
        DeskId = other.DeskId;
      }
      if (other.Card != 0) {
        Card = other.Card;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.OtherUserId != 0L) {
        OtherUserId = other.OtherUserId;
      }
      userIds_.Add(other.userIds_);
      if (other.Position != 0) {
        Position = other.Position;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.LastCardCount != 0) {
        LastCardCount = other.LastCardCount;
      }
      if (other.StrVal.Length != 0) {
        StrVal = other.StrVal;
      }
      cards_.Add(other.cards_);
      ids_.Add(other.ids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeskId = input.ReadInt32();
            break;
          }
          case 16: {
            Card = input.ReadInt32();
            break;
          }
          case 24: {
            Code = input.ReadInt32();
            break;
          }
          case 32: {
            UserId = input.ReadInt64();
            break;
          }
          case 40: {
            OtherUserId = input.ReadInt64();
            break;
          }
          case 50:
          case 48: {
            userIds_.AddEntriesFrom(input, _repeated_userIds_codec);
            break;
          }
          case 56: {
            Position = input.ReadInt32();
            break;
          }
          case 64: {
            Amount = input.ReadInt64();
            break;
          }
          case 72: {
            Count = input.ReadInt32();
            break;
          }
          case 80: {
            LastCardCount = input.ReadInt32();
            break;
          }
          case 90: {
            StrVal = input.ReadString();
            break;
          }
          case 98:
          case 96: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 106:
          case 104: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///牌桌的牌信息类
  /// </summary>
  public sealed partial class MessageDeskCards : pb::IMessage<MessageDeskCards> {
    private static readonly pb::MessageParser<MessageDeskCards> _parser = new pb::MessageParser<MessageDeskCards>(() => new MessageDeskCards());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageDeskCards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lobbyservice.Protobuf.MjRoomReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDeskCards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDeskCards(MessageDeskCards other) : this() {
      deskId_ = other.deskId_;
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDeskCards Clone() {
      return new MessageDeskCards(this);
    }

    /// <summary>Field number for the "deskId" field.</summary>
    public const int DeskIdFieldNumber = 1;
    private int deskId_;
    /// <summary>
    /// 牌桌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeskId {
      get { return deskId_; }
      set {
        deskId_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageDeskCards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageDeskCards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeskId != other.DeskId) return false;
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeskId != 0) hash ^= DeskId.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeskId);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeskId);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageDeskCards other) {
      if (other == null) {
        return;
      }
      if (other.DeskId != 0) {
        DeskId = other.DeskId;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeskId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///起手胡信息类
  /// </summary>
  public sealed partial class MessageStartHu : pb::IMessage<MessageStartHu> {
    private static readonly pb::MessageParser<MessageStartHu> _parser = new pb::MessageParser<MessageStartHu>(() => new MessageStartHu());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageStartHu> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lobbyservice.Protobuf.MjRoomReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageStartHu() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageStartHu(MessageStartHu other) : this() {
      deskId_ = other.deskId_;
      userId_ = other.userId_;
      code_ = other.code_;
      ids_ = other.ids_.Clone();
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageStartHu Clone() {
      return new MessageStartHu(this);
    }

    /// <summary>Field number for the "deskId" field.</summary>
    public const int DeskIdFieldNumber = 1;
    private int deskId_;
    /// <summary>
    /// 牌桌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeskId {
      get { return deskId_; }
      set {
        deskId_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    /// 胡牌用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private int code_;
    /// <summary>
    /// 返回码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_ids_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> ids_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 胡的牌型ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Lobbyservice.Protobuf.MessageDeskCards> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(42, global::Lobbyservice.Protobuf.MessageDeskCards.Parser);
    private readonly pbc::RepeatedField<global::Lobbyservice.Protobuf.MessageDeskCards> cards_ = new pbc::RepeatedField<global::Lobbyservice.Protobuf.MessageDeskCards>();
    /// <summary>
    /// 牌型ID对应的亮牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lobbyservice.Protobuf.MessageDeskCards> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageStartHu);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageStartHu other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeskId != other.DeskId) return false;
      if (UserId != other.UserId) return false;
      if (Code != other.Code) return false;
      if(!ids_.Equals(other.ids_)) return false;
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeskId != 0) hash ^= DeskId.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      hash ^= ids_.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeskId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (Code != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Code);
      }
      ids_.WriteTo(output, _repeated_ids_codec);
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeskId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      size += ids_.CalculateSize(_repeated_ids_codec);
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageStartHu other) {
      if (other == null) {
        return;
      }
      if (other.DeskId != 0) {
        DeskId = other.DeskId;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      ids_.Add(other.ids_);
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeskId = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 24: {
            Code = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
          case 42: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///听牌列表
  /// </summary>
  public sealed partial class MessageTing : pb::IMessage<MessageTing> {
    private static readonly pb::MessageParser<MessageTing> _parser = new pb::MessageParser<MessageTing>(() => new MessageTing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageTing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lobbyservice.Protobuf.MjRoomReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageTing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageTing(MessageTing other) : this() {
      outCard_ = other.outCard_;
      tingCards_ = other.tingCards_.Clone();
      tingCounts_ = other.tingCounts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageTing Clone() {
      return new MessageTing(this);
    }

    /// <summary>Field number for the "outCard" field.</summary>
    public const int OutCardFieldNumber = 1;
    private int outCard_;
    /// <summary>
    ///需要打出的牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutCard {
      get { return outCard_; }
      set {
        outCard_ = value;
      }
    }

    /// <summary>Field number for the "tingCards" field.</summary>
    public const int TingCardsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_tingCards_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> tingCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///听牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TingCards {
      get { return tingCards_; }
    }

    /// <summary>Field number for the "tingCounts" field.</summary>
    public const int TingCountsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_tingCounts_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> tingCounts_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///听牌剩余个数列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TingCounts {
      get { return tingCounts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageTing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageTing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OutCard != other.OutCard) return false;
      if(!tingCards_.Equals(other.tingCards_)) return false;
      if(!tingCounts_.Equals(other.tingCounts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OutCard != 0) hash ^= OutCard.GetHashCode();
      hash ^= tingCards_.GetHashCode();
      hash ^= tingCounts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OutCard != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OutCard);
      }
      tingCards_.WriteTo(output, _repeated_tingCards_codec);
      tingCounts_.WriteTo(output, _repeated_tingCounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OutCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutCard);
      }
      size += tingCards_.CalculateSize(_repeated_tingCards_codec);
      size += tingCounts_.CalculateSize(_repeated_tingCounts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageTing other) {
      if (other == null) {
        return;
      }
      if (other.OutCard != 0) {
        OutCard = other.OutCard;
      }
      tingCards_.Add(other.tingCards_);
      tingCounts_.Add(other.tingCounts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OutCard = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            tingCards_.AddEntriesFrom(input, _repeated_tingCards_codec);
            break;
          }
          case 26:
          case 24: {
            tingCounts_.AddEntriesFrom(input, _repeated_tingCounts_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///抓牌、打牌提示
  /// </summary>
  public sealed partial class MessageCardTips : pb::IMessage<MessageCardTips> {
    private static readonly pb::MessageParser<MessageCardTips> _parser = new pb::MessageParser<MessageCardTips>(() => new MessageCardTips());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageCardTips> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lobbyservice.Protobuf.MjRoomReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageCardTips() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageCardTips(MessageCardTips other) : this() {
      deskId_ = other.deskId_;
      userId_ = other.userId_;
      cards_ = other.cards_.Clone();
      huList_ = other.huList_.Clone();
      gangList_ = other.gangList_.Clone();
      buList_ = other.buList_.Clone();
      pengList_ = other.pengList_.Clone();
      chiList_ = other.chiList_.Clone();
      tingList_ = other.tingList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageCardTips Clone() {
      return new MessageCardTips(this);
    }

    /// <summary>Field number for the "deskId" field.</summary>
    public const int DeskIdFieldNumber = 1;
    private int deskId_;
    /// <summary>
    /// 牌桌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeskId {
      get { return deskId_; }
      set {
        deskId_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    /// 用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 当前打、抓的牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "huList" field.</summary>
    public const int HuListFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_huList_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> huList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 胡牌是否
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HuList {
      get { return huList_; }
    }

    /// <summary>Field number for the "gangList" field.</summary>
    public const int GangListFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_gangList_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> gangList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 杠牌是否
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GangList {
      get { return gangList_; }
    }

    /// <summary>Field number for the "buList" field.</summary>
    public const int BuListFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_buList_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> buList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 补牌是否
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BuList {
      get { return buList_; }
    }

    /// <summary>Field number for the "pengList" field.</summary>
    public const int PengListFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_pengList_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> pengList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 碰牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PengList {
      get { return pengList_; }
    }

    /// <summary>Field number for the "chiList" field.</summary>
    public const int ChiListFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Lobbyservice.Protobuf.MessageDeskCards> _repeated_chiList_codec
        = pb::FieldCodec.ForMessage(66, global::Lobbyservice.Protobuf.MessageDeskCards.Parser);
    private readonly pbc::RepeatedField<global::Lobbyservice.Protobuf.MessageDeskCards> chiList_ = new pbc::RepeatedField<global::Lobbyservice.Protobuf.MessageDeskCards>();
    /// <summary>
    /// 吃牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lobbyservice.Protobuf.MessageDeskCards> ChiList {
      get { return chiList_; }
    }

    /// <summary>Field number for the "tingList" field.</summary>
    public const int TingListFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Lobbyservice.Protobuf.MessageTing> _repeated_tingList_codec
        = pb::FieldCodec.ForMessage(74, global::Lobbyservice.Protobuf.MessageTing.Parser);
    private readonly pbc::RepeatedField<global::Lobbyservice.Protobuf.MessageTing> tingList_ = new pbc::RepeatedField<global::Lobbyservice.Protobuf.MessageTing>();
    /// <summary>
    /// 听牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lobbyservice.Protobuf.MessageTing> TingList {
      get { return tingList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageCardTips);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageCardTips other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeskId != other.DeskId) return false;
      if (UserId != other.UserId) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if(!huList_.Equals(other.huList_)) return false;
      if(!gangList_.Equals(other.gangList_)) return false;
      if(!buList_.Equals(other.buList_)) return false;
      if(!pengList_.Equals(other.pengList_)) return false;
      if(!chiList_.Equals(other.chiList_)) return false;
      if(!tingList_.Equals(other.tingList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeskId != 0) hash ^= DeskId.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      hash ^= cards_.GetHashCode();
      hash ^= huList_.GetHashCode();
      hash ^= gangList_.GetHashCode();
      hash ^= buList_.GetHashCode();
      hash ^= pengList_.GetHashCode();
      hash ^= chiList_.GetHashCode();
      hash ^= tingList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeskId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      huList_.WriteTo(output, _repeated_huList_codec);
      gangList_.WriteTo(output, _repeated_gangList_codec);
      buList_.WriteTo(output, _repeated_buList_codec);
      pengList_.WriteTo(output, _repeated_pengList_codec);
      chiList_.WriteTo(output, _repeated_chiList_codec);
      tingList_.WriteTo(output, _repeated_tingList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeskId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      size += huList_.CalculateSize(_repeated_huList_codec);
      size += gangList_.CalculateSize(_repeated_gangList_codec);
      size += buList_.CalculateSize(_repeated_buList_codec);
      size += pengList_.CalculateSize(_repeated_pengList_codec);
      size += chiList_.CalculateSize(_repeated_chiList_codec);
      size += tingList_.CalculateSize(_repeated_tingList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageCardTips other) {
      if (other == null) {
        return;
      }
      if (other.DeskId != 0) {
        DeskId = other.DeskId;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      cards_.Add(other.cards_);
      huList_.Add(other.huList_);
      gangList_.Add(other.gangList_);
      buList_.Add(other.buList_);
      pengList_.Add(other.pengList_);
      chiList_.Add(other.chiList_);
      tingList_.Add(other.tingList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeskId = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 26:
          case 24: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 34:
          case 32: {
            huList_.AddEntriesFrom(input, _repeated_huList_codec);
            break;
          }
          case 42:
          case 40: {
            gangList_.AddEntriesFrom(input, _repeated_gangList_codec);
            break;
          }
          case 50:
          case 48: {
            buList_.AddEntriesFrom(input, _repeated_buList_codec);
            break;
          }
          case 58:
          case 56: {
            pengList_.AddEntriesFrom(input, _repeated_pengList_codec);
            break;
          }
          case 66: {
            chiList_.AddEntriesFrom(input, _repeated_chiList_codec);
            break;
          }
          case 74: {
            tingList_.AddEntriesFrom(input, _repeated_tingList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///牌桌信息和当前动作信息。主要用于玩家加入牌桌，但当前牌桌处于玩家下注或等待玩家动作阶段。
  /// </summary>
  public sealed partial class MessageDeskPlay : pb::IMessage<MessageDeskPlay> {
    private static readonly pb::MessageParser<MessageDeskPlay> _parser = new pb::MessageParser<MessageDeskPlay>(() => new MessageDeskPlay());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageDeskPlay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lobbyservice.Protobuf.MjRoomReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDeskPlay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDeskPlay(MessageDeskPlay other) : this() {
      deskId_ = other.deskId_;
      userId_ = other.userId_;
      gameStage_ = other.gameStage_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDeskPlay Clone() {
      return new MessageDeskPlay(this);
    }

    /// <summary>Field number for the "deskId" field.</summary>
    public const int DeskIdFieldNumber = 1;
    private int deskId_;
    /// <summary>
    /// 牌桌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeskId {
      get { return deskId_; }
      set {
        deskId_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "gameStage" field.</summary>
    public const int GameStageFieldNumber = 3;
    private int gameStage_;
    /// <summary>
    /// 游戏进行阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameStage {
      get { return gameStage_; }
      set {
        gameStage_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private long time_;
    /// <summary>
    /// 当前游戏阶段剩余毫秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageDeskPlay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageDeskPlay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeskId != other.DeskId) return false;
      if (UserId != other.UserId) return false;
      if (GameStage != other.GameStage) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeskId != 0) hash ^= DeskId.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (GameStage != 0) hash ^= GameStage.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeskId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (GameStage != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GameStage);
      }
      if (Time != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeskId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (GameStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameStage);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageDeskPlay other) {
      if (other == null) {
        return;
      }
      if (other.DeskId != 0) {
        DeskId = other.DeskId;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.GameStage != 0) {
        GameStage = other.GameStage;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeskId = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 24: {
            GameStage = input.ReadInt32();
            break;
          }
          case 32: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///牌桌的结算信息类
  /// </summary>
  public sealed partial class MessageDeskCompare : pb::IMessage<MessageDeskCompare> {
    private static readonly pb::MessageParser<MessageDeskCompare> _parser = new pb::MessageParser<MessageDeskCompare>(() => new MessageDeskCompare());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageDeskCompare> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lobbyservice.Protobuf.MjRoomReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDeskCompare() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDeskCompare(MessageDeskCompare other) : this() {
      deskId_ = other.deskId_;
      handCards_ = other.handCards_.Clone();
      niaoCards_ = other.niaoCards_.Clone();
      infos_ = other.infos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDeskCompare Clone() {
      return new MessageDeskCompare(this);
    }

    /// <summary>Field number for the "deskId" field.</summary>
    public const int DeskIdFieldNumber = 1;
    private int deskId_;
    /// <summary>
    /// 牌桌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeskId {
      get { return deskId_; }
      set {
        deskId_ = value;
      }
    }

    /// <summary>Field number for the "handCards" field.</summary>
    public const int HandCardsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_handCards_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> handCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 牌桌剩余手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HandCards {
      get { return handCards_; }
    }

    /// <summary>Field number for the "niaoCards" field.</summary>
    public const int NiaoCardsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_niaoCards_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> niaoCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 鸟牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> NiaoCards {
      get { return niaoCards_; }
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Lobbyservice.Protobuf.MessagePlayerCompare> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(34, global::Lobbyservice.Protobuf.MessagePlayerCompare.Parser);
    private readonly pbc::RepeatedField<global::Lobbyservice.Protobuf.MessagePlayerCompare> infos_ = new pbc::RepeatedField<global::Lobbyservice.Protobuf.MessagePlayerCompare>();
    /// <summary>
    /// 玩家结算信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lobbyservice.Protobuf.MessagePlayerCompare> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageDeskCompare);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageDeskCompare other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeskId != other.DeskId) return false;
      if(!handCards_.Equals(other.handCards_)) return false;
      if(!niaoCards_.Equals(other.niaoCards_)) return false;
      if(!infos_.Equals(other.infos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeskId != 0) hash ^= DeskId.GetHashCode();
      hash ^= handCards_.GetHashCode();
      hash ^= niaoCards_.GetHashCode();
      hash ^= infos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeskId);
      }
      handCards_.WriteTo(output, _repeated_handCards_codec);
      niaoCards_.WriteTo(output, _repeated_niaoCards_codec);
      infos_.WriteTo(output, _repeated_infos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeskId);
      }
      size += handCards_.CalculateSize(_repeated_handCards_codec);
      size += niaoCards_.CalculateSize(_repeated_niaoCards_codec);
      size += infos_.CalculateSize(_repeated_infos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageDeskCompare other) {
      if (other == null) {
        return;
      }
      if (other.DeskId != 0) {
        DeskId = other.DeskId;
      }
      handCards_.Add(other.handCards_);
      niaoCards_.Add(other.niaoCards_);
      infos_.Add(other.infos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeskId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            handCards_.AddEntriesFrom(input, _repeated_handCards_codec);
            break;
          }
          case 26:
          case 24: {
            niaoCards_.AddEntriesFrom(input, _repeated_niaoCards_codec);
            break;
          }
          case 34: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///牌桌内玩家的结算信息类
  /// </summary>
  public sealed partial class MessagePlayerCompare : pb::IMessage<MessagePlayerCompare> {
    private static readonly pb::MessageParser<MessagePlayerCompare> _parser = new pb::MessageParser<MessagePlayerCompare>(() => new MessagePlayerCompare());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessagePlayerCompare> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lobbyservice.Protobuf.MjRoomReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagePlayerCompare() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagePlayerCompare(MessagePlayerCompare other) : this() {
      userId_ = other.userId_;
      huCards_ = other.huCards_.Clone();
      huFan_ = other.huFan_;
      huType_ = other.huType_;
      handCards_ = other.handCards_.Clone();
      gangList_ = other.gangList_.Clone();
      anGangList_ = other.anGangList_.Clone();
      pengList_ = other.pengList_.Clone();
      chiList_ = other.chiList_.Clone();
      niaoList_ = other.niaoList_.Clone();
      huIdList_ = other.huIdList_.Clone();
      startHuIdList_ = other.startHuIdList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagePlayerCompare Clone() {
      return new MessagePlayerCompare(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "huCards" field.</summary>
    public const int HuCardsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_huCards_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> huCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 最后胡的那张牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HuCards {
      get { return huCards_; }
    }

    /// <summary>Field number for the "huFan" field.</summary>
    public const int HuFanFieldNumber = 3;
    private int huFan_;
    /// <summary>
    /// 翻数，可能为负数。为输牌了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HuFan {
      get { return huFan_; }
      set {
        huFan_ = value;
      }
    }

    /// <summary>Field number for the "huType" field.</summary>
    public const int HuTypeFieldNumber = 4;
    private int huType_;
    /// <summary>
    /// 胡类型 0无 1自摸 2胡 3点炮
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HuType {
      get { return huType_; }
      set {
        huType_ = value;
      }
    }

    /// <summary>Field number for the "handCards" field.</summary>
    public const int HandCardsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_handCards_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> handCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HandCards {
      get { return handCards_; }
    }

    /// <summary>Field number for the "gangList" field.</summary>
    public const int GangListFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_gangList_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> gangList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 杠列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GangList {
      get { return gangList_; }
    }

    /// <summary>Field number for the "anGangList" field.</summary>
    public const int AnGangListFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_anGangList_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> anGangList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 暗杠列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AnGangList {
      get { return anGangList_; }
    }

    /// <summary>Field number for the "pengList" field.</summary>
    public const int PengListFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_pengList_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> pengList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 碰列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PengList {
      get { return pengList_; }
    }

    /// <summary>Field number for the "chiList" field.</summary>
    public const int ChiListFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Lobbyservice.Protobuf.MessageDeskCards> _repeated_chiList_codec
        = pb::FieldCodec.ForMessage(74, global::Lobbyservice.Protobuf.MessageDeskCards.Parser);
    private readonly pbc::RepeatedField<global::Lobbyservice.Protobuf.MessageDeskCards> chiList_ = new pbc::RepeatedField<global::Lobbyservice.Protobuf.MessageDeskCards>();
    /// <summary>
    /// 吃列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lobbyservice.Protobuf.MessageDeskCards> ChiList {
      get { return chiList_; }
    }

    /// <summary>Field number for the "niaoList" field.</summary>
    public const int NiaoListFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_niaoList_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> niaoList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 中的鸟牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> NiaoList {
      get { return niaoList_; }
    }

    /// <summary>Field number for the "huIdList" field.</summary>
    public const int HuIdListFieldNumber = 11;
    private static readonly pb::FieldCodec<int> _repeated_huIdList_codec
        = pb::FieldCodec.ForInt32(90);
    private readonly pbc::RepeatedField<int> huIdList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 胡牌的牌型ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HuIdList {
      get { return huIdList_; }
    }

    /// <summary>Field number for the "startHuIdList" field.</summary>
    public const int StartHuIdListFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_startHuIdList_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> startHuIdList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 起手胡的牌型ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> StartHuIdList {
      get { return startHuIdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessagePlayerCompare);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessagePlayerCompare other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if(!huCards_.Equals(other.huCards_)) return false;
      if (HuFan != other.HuFan) return false;
      if (HuType != other.HuType) return false;
      if(!handCards_.Equals(other.handCards_)) return false;
      if(!gangList_.Equals(other.gangList_)) return false;
      if(!anGangList_.Equals(other.anGangList_)) return false;
      if(!pengList_.Equals(other.pengList_)) return false;
      if(!chiList_.Equals(other.chiList_)) return false;
      if(!niaoList_.Equals(other.niaoList_)) return false;
      if(!huIdList_.Equals(other.huIdList_)) return false;
      if(!startHuIdList_.Equals(other.startHuIdList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      hash ^= huCards_.GetHashCode();
      if (HuFan != 0) hash ^= HuFan.GetHashCode();
      if (HuType != 0) hash ^= HuType.GetHashCode();
      hash ^= handCards_.GetHashCode();
      hash ^= gangList_.GetHashCode();
      hash ^= anGangList_.GetHashCode();
      hash ^= pengList_.GetHashCode();
      hash ^= chiList_.GetHashCode();
      hash ^= niaoList_.GetHashCode();
      hash ^= huIdList_.GetHashCode();
      hash ^= startHuIdList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      huCards_.WriteTo(output, _repeated_huCards_codec);
      if (HuFan != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HuFan);
      }
      if (HuType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HuType);
      }
      handCards_.WriteTo(output, _repeated_handCards_codec);
      gangList_.WriteTo(output, _repeated_gangList_codec);
      anGangList_.WriteTo(output, _repeated_anGangList_codec);
      pengList_.WriteTo(output, _repeated_pengList_codec);
      chiList_.WriteTo(output, _repeated_chiList_codec);
      niaoList_.WriteTo(output, _repeated_niaoList_codec);
      huIdList_.WriteTo(output, _repeated_huIdList_codec);
      startHuIdList_.WriteTo(output, _repeated_startHuIdList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      size += huCards_.CalculateSize(_repeated_huCards_codec);
      if (HuFan != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HuFan);
      }
      if (HuType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HuType);
      }
      size += handCards_.CalculateSize(_repeated_handCards_codec);
      size += gangList_.CalculateSize(_repeated_gangList_codec);
      size += anGangList_.CalculateSize(_repeated_anGangList_codec);
      size += pengList_.CalculateSize(_repeated_pengList_codec);
      size += chiList_.CalculateSize(_repeated_chiList_codec);
      size += niaoList_.CalculateSize(_repeated_niaoList_codec);
      size += huIdList_.CalculateSize(_repeated_huIdList_codec);
      size += startHuIdList_.CalculateSize(_repeated_startHuIdList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessagePlayerCompare other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      huCards_.Add(other.huCards_);
      if (other.HuFan != 0) {
        HuFan = other.HuFan;
      }
      if (other.HuType != 0) {
        HuType = other.HuType;
      }
      handCards_.Add(other.handCards_);
      gangList_.Add(other.gangList_);
      anGangList_.Add(other.anGangList_);
      pengList_.Add(other.pengList_);
      chiList_.Add(other.chiList_);
      niaoList_.Add(other.niaoList_);
      huIdList_.Add(other.huIdList_);
      startHuIdList_.Add(other.startHuIdList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            huCards_.AddEntriesFrom(input, _repeated_huCards_codec);
            break;
          }
          case 24: {
            HuFan = input.ReadInt32();
            break;
          }
          case 32: {
            HuType = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            handCards_.AddEntriesFrom(input, _repeated_handCards_codec);
            break;
          }
          case 50:
          case 48: {
            gangList_.AddEntriesFrom(input, _repeated_gangList_codec);
            break;
          }
          case 58:
          case 56: {
            anGangList_.AddEntriesFrom(input, _repeated_anGangList_codec);
            break;
          }
          case 66:
          case 64: {
            pengList_.AddEntriesFrom(input, _repeated_pengList_codec);
            break;
          }
          case 74: {
            chiList_.AddEntriesFrom(input, _repeated_chiList_codec);
            break;
          }
          case 82:
          case 80: {
            niaoList_.AddEntriesFrom(input, _repeated_niaoList_codec);
            break;
          }
          case 90:
          case 88: {
            huIdList_.AddEntriesFrom(input, _repeated_huIdList_codec);
            break;
          }
          case 98:
          case 96: {
            startHuIdList_.AddEntriesFrom(input, _repeated_startHuIdList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///牌桌的最终结算信息类
  /// </summary>
  public sealed partial class MessageDeskFinalCompare : pb::IMessage<MessageDeskFinalCompare> {
    private static readonly pb::MessageParser<MessageDeskFinalCompare> _parser = new pb::MessageParser<MessageDeskFinalCompare>(() => new MessageDeskFinalCompare());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageDeskFinalCompare> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lobbyservice.Protobuf.MjRoomReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDeskFinalCompare() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDeskFinalCompare(MessageDeskFinalCompare other) : this() {
      deskId_ = other.deskId_;
      type_ = other.type_;
      roomOwner_ = other.roomOwner_;
      totalCount_ = other.totalCount_;
      realCount_ = other.realCount_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      infos_ = other.infos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDeskFinalCompare Clone() {
      return new MessageDeskFinalCompare(this);
    }

    /// <summary>Field number for the "deskId" field.</summary>
    public const int DeskIdFieldNumber = 1;
    private int deskId_;
    /// <summary>
    /// 牌桌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeskId {
      get { return deskId_; }
      set {
        deskId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    /// 结算类型，1、正常结算 2、流局结算 3、牌桌解散
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "roomOwner" field.</summary>
    public const int RoomOwnerFieldNumber = 3;
    private long roomOwner_;
    /// <summary>
    /// 房主ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomOwner {
      get { return roomOwner_; }
      set {
        roomOwner_ = value;
      }
    }

    /// <summary>Field number for the "totalCount" field.</summary>
    public const int TotalCountFieldNumber = 4;
    private long totalCount_;
    /// <summary>
    /// 总局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    /// <summary>Field number for the "realCount" field.</summary>
    public const int RealCountFieldNumber = 5;
    private int realCount_;
    /// <summary>
    /// 实际局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RealCount {
      get { return realCount_; }
      set {
        realCount_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 6;
    private long startTime_;
    /// <summary>
    /// 开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 7;
    private long endTime_;
    /// <summary>
    /// 结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Lobbyservice.Protobuf.MessagePlayerFinalCompare> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(66, global::Lobbyservice.Protobuf.MessagePlayerFinalCompare.Parser);
    private readonly pbc::RepeatedField<global::Lobbyservice.Protobuf.MessagePlayerFinalCompare> infos_ = new pbc::RepeatedField<global::Lobbyservice.Protobuf.MessagePlayerFinalCompare>();
    /// <summary>
    /// 玩家最终结算信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lobbyservice.Protobuf.MessagePlayerFinalCompare> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageDeskFinalCompare);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageDeskFinalCompare other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeskId != other.DeskId) return false;
      if (Type != other.Type) return false;
      if (RoomOwner != other.RoomOwner) return false;
      if (TotalCount != other.TotalCount) return false;
      if (RealCount != other.RealCount) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if(!infos_.Equals(other.infos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeskId != 0) hash ^= DeskId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (RoomOwner != 0L) hash ^= RoomOwner.GetHashCode();
      if (TotalCount != 0L) hash ^= TotalCount.GetHashCode();
      if (RealCount != 0) hash ^= RealCount.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      hash ^= infos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeskId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (RoomOwner != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(RoomOwner);
      }
      if (TotalCount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalCount);
      }
      if (RealCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RealCount);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(EndTime);
      }
      infos_.WriteTo(output, _repeated_infos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeskId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (RoomOwner != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomOwner);
      }
      if (TotalCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalCount);
      }
      if (RealCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RealCount);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      size += infos_.CalculateSize(_repeated_infos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageDeskFinalCompare other) {
      if (other == null) {
        return;
      }
      if (other.DeskId != 0) {
        DeskId = other.DeskId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.RoomOwner != 0L) {
        RoomOwner = other.RoomOwner;
      }
      if (other.TotalCount != 0L) {
        TotalCount = other.TotalCount;
      }
      if (other.RealCount != 0) {
        RealCount = other.RealCount;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      infos_.Add(other.infos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeskId = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            RoomOwner = input.ReadInt64();
            break;
          }
          case 32: {
            TotalCount = input.ReadInt64();
            break;
          }
          case 40: {
            RealCount = input.ReadInt32();
            break;
          }
          case 48: {
            StartTime = input.ReadInt64();
            break;
          }
          case 56: {
            EndTime = input.ReadInt64();
            break;
          }
          case 66: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家的最终结算信息类
  /// </summary>
  public sealed partial class MessagePlayerFinalCompare : pb::IMessage<MessagePlayerFinalCompare> {
    private static readonly pb::MessageParser<MessagePlayerFinalCompare> _parser = new pb::MessageParser<MessagePlayerFinalCompare>(() => new MessagePlayerFinalCompare());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessagePlayerFinalCompare> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lobbyservice.Protobuf.MjRoomReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagePlayerFinalCompare() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagePlayerFinalCompare(MessagePlayerFinalCompare other) : this() {
      userId_ = other.userId_;
      nickName_ = other.nickName_;
      headImgUrl_ = other.headImgUrl_;
      zhuangCount_ = other.zhuangCount_;
      huCount_ = other.huCount_;
      daHuCount_ = other.daHuCount_;
      paoCount_ = other.paoCount_;
      totalFan_ = other.totalFan_;
      jieGangCount_ = other.jieGangCount_;
      dianGangCount_ = other.dianGangCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagePlayerFinalCompare Clone() {
      return new MessagePlayerFinalCompare(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "nickName" field.</summary>
    public const int NickNameFieldNumber = 2;
    private string nickName_ = "";
    /// <summary>
    /// 用户名\昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headImgUrl" field.</summary>
    public const int HeadImgUrlFieldNumber = 3;
    private string headImgUrl_ = "";
    /// <summary>
    /// 玩家头像地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadImgUrl {
      get { return headImgUrl_; }
      set {
        headImgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zhuangCount" field.</summary>
    public const int ZhuangCountFieldNumber = 4;
    private int zhuangCount_;
    /// <summary>
    /// 坐庄次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZhuangCount {
      get { return zhuangCount_; }
      set {
        zhuangCount_ = value;
      }
    }

    /// <summary>Field number for the "huCount" field.</summary>
    public const int HuCountFieldNumber = 5;
    private int huCount_;
    /// <summary>
    /// 起手胡、平胡、大胡次数。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HuCount {
      get { return huCount_; }
      set {
        huCount_ = value;
      }
    }

    /// <summary>Field number for the "daHuCount" field.</summary>
    public const int DaHuCountFieldNumber = 6;
    private int daHuCount_;
    /// <summary>
    /// 大胡次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DaHuCount {
      get { return daHuCount_; }
      set {
        daHuCount_ = value;
      }
    }

    /// <summary>Field number for the "paoCount" field.</summary>
    public const int PaoCountFieldNumber = 7;
    private int paoCount_;
    /// <summary>
    /// 点炮次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PaoCount {
      get { return paoCount_; }
      set {
        paoCount_ = value;
      }
    }

    /// <summary>Field number for the "totalFan" field.</summary>
    public const int TotalFanFieldNumber = 8;
    private int totalFan_;
    /// <summary>
    /// 总番数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalFan {
      get { return totalFan_; }
      set {
        totalFan_ = value;
      }
    }

    /// <summary>Field number for the "jieGangCount" field.</summary>
    public const int JieGangCountFieldNumber = 9;
    private int jieGangCount_;
    /// <summary>
    /// 接杠次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JieGangCount {
      get { return jieGangCount_; }
      set {
        jieGangCount_ = value;
      }
    }

    /// <summary>Field number for the "dianGangCount" field.</summary>
    public const int DianGangCountFieldNumber = 10;
    private int dianGangCount_;
    /// <summary>
    /// 点杠次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DianGangCount {
      get { return dianGangCount_; }
      set {
        dianGangCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessagePlayerFinalCompare);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessagePlayerFinalCompare other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (NickName != other.NickName) return false;
      if (HeadImgUrl != other.HeadImgUrl) return false;
      if (ZhuangCount != other.ZhuangCount) return false;
      if (HuCount != other.HuCount) return false;
      if (DaHuCount != other.DaHuCount) return false;
      if (PaoCount != other.PaoCount) return false;
      if (TotalFan != other.TotalFan) return false;
      if (JieGangCount != other.JieGangCount) return false;
      if (DianGangCount != other.DianGangCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (HeadImgUrl.Length != 0) hash ^= HeadImgUrl.GetHashCode();
      if (ZhuangCount != 0) hash ^= ZhuangCount.GetHashCode();
      if (HuCount != 0) hash ^= HuCount.GetHashCode();
      if (DaHuCount != 0) hash ^= DaHuCount.GetHashCode();
      if (PaoCount != 0) hash ^= PaoCount.GetHashCode();
      if (TotalFan != 0) hash ^= TotalFan.GetHashCode();
      if (JieGangCount != 0) hash ^= JieGangCount.GetHashCode();
      if (DianGangCount != 0) hash ^= DianGangCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NickName);
      }
      if (HeadImgUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HeadImgUrl);
      }
      if (ZhuangCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ZhuangCount);
      }
      if (HuCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HuCount);
      }
      if (DaHuCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DaHuCount);
      }
      if (PaoCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PaoCount);
      }
      if (TotalFan != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TotalFan);
      }
      if (JieGangCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(JieGangCount);
      }
      if (DianGangCount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(DianGangCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (HeadImgUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadImgUrl);
      }
      if (ZhuangCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZhuangCount);
      }
      if (HuCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HuCount);
      }
      if (DaHuCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DaHuCount);
      }
      if (PaoCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PaoCount);
      }
      if (TotalFan != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalFan);
      }
      if (JieGangCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JieGangCount);
      }
      if (DianGangCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DianGangCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessagePlayerFinalCompare other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.HeadImgUrl.Length != 0) {
        HeadImgUrl = other.HeadImgUrl;
      }
      if (other.ZhuangCount != 0) {
        ZhuangCount = other.ZhuangCount;
      }
      if (other.HuCount != 0) {
        HuCount = other.HuCount;
      }
      if (other.DaHuCount != 0) {
        DaHuCount = other.DaHuCount;
      }
      if (other.PaoCount != 0) {
        PaoCount = other.PaoCount;
      }
      if (other.TotalFan != 0) {
        TotalFan = other.TotalFan;
      }
      if (other.JieGangCount != 0) {
        JieGangCount = other.JieGangCount;
      }
      if (other.DianGangCount != 0) {
        DianGangCount = other.DianGangCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            NickName = input.ReadString();
            break;
          }
          case 26: {
            HeadImgUrl = input.ReadString();
            break;
          }
          case 32: {
            ZhuangCount = input.ReadInt32();
            break;
          }
          case 40: {
            HuCount = input.ReadInt32();
            break;
          }
          case 48: {
            DaHuCount = input.ReadInt32();
            break;
          }
          case 56: {
            PaoCount = input.ReadInt32();
            break;
          }
          case 64: {
            TotalFan = input.ReadInt32();
            break;
          }
          case 72: {
            JieGangCount = input.ReadInt32();
            break;
          }
          case 80: {
            DianGangCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 录像列表
  /// </summary>
  public sealed partial class MessageVideo : pb::IMessage<MessageVideo> {
    private static readonly pb::MessageParser<MessageVideo> _parser = new pb::MessageParser<MessageVideo>(() => new MessageVideo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageVideo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lobbyservice.Protobuf.MjRoomReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageVideo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageVideo(MessageVideo other) : this() {
      userId_ = other.userId_;
      records_ = other.records_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageVideo Clone() {
      return new MessageVideo(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Lobbyservice.Protobuf.Record> _repeated_records_codec
        = pb::FieldCodec.ForMessage(18, global::Lobbyservice.Protobuf.Record.Parser);
    private readonly pbc::RepeatedField<global::Lobbyservice.Protobuf.Record> records_ = new pbc::RepeatedField<global::Lobbyservice.Protobuf.Record>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lobbyservice.Protobuf.Record> Records {
      get { return records_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageVideo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageVideo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if(!records_.Equals(other.records_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      hash ^= records_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      records_.WriteTo(output, _repeated_records_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      size += records_.CalculateSize(_repeated_records_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageVideo other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      records_.Add(other.records_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///每一步录像VO
  /// </summary>
  public sealed partial class Record : pb::IMessage<Record> {
    private static readonly pb::MessageParser<Record> _parser = new pb::MessageParser<Record>(() => new Record());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Record> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lobbyservice.Protobuf.MjRoomReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record(Record other) : this() {
      id_ = other.id_;
      deskFull_ = other.deskFull_ != null ? other.deskFull_.Clone() : null;
      common_ = other.common_ != null ? other.common_.Clone() : null;
      startHu_ = other.startHu_ != null ? other.startHu_.Clone() : null;
      tips_ = other.tips_ != null ? other.tips_.Clone() : null;
      compare_ = other.compare_ != null ? other.compare_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record Clone() {
      return new Record(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///动作ID。消息号为动作ID。根据不同的ID填充不同的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "deskFull" field.</summary>
    public const int DeskFullFieldNumber = 2;
    private global::Lobbyservice.Protobuf.MessageDeskFull deskFull_;
    /// <summary>
    ///初始化动作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lobbyservice.Protobuf.MessageDeskFull DeskFull {
      get { return deskFull_; }
      set {
        deskFull_ = value;
      }
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 3;
    private global::Lobbyservice.Protobuf.MessageDeskCommon common_;
    /// <summary>
    ///通用动作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lobbyservice.Protobuf.MessageDeskCommon Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "startHu" field.</summary>
    public const int StartHuFieldNumber = 4;
    private global::Lobbyservice.Protobuf.MessageStartHu startHu_;
    /// <summary>
    ///起手胡动作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lobbyservice.Protobuf.MessageStartHu StartHu {
      get { return startHu_; }
      set {
        startHu_ = value;
      }
    }

    /// <summary>Field number for the "tips" field.</summary>
    public const int TipsFieldNumber = 5;
    private global::Lobbyservice.Protobuf.MessageCardTips tips_;
    /// <summary>
    ///抓、打牌提示动作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lobbyservice.Protobuf.MessageCardTips Tips {
      get { return tips_; }
      set {
        tips_ = value;
      }
    }

    /// <summary>Field number for the "compare" field.</summary>
    public const int CompareFieldNumber = 6;
    private global::Lobbyservice.Protobuf.MessageDeskCompare compare_;
    /// <summary>
    ///结算动作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lobbyservice.Protobuf.MessageDeskCompare Compare {
      get { return compare_; }
      set {
        compare_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Record);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Record other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(DeskFull, other.DeskFull)) return false;
      if (!object.Equals(Common, other.Common)) return false;
      if (!object.Equals(StartHu, other.StartHu)) return false;
      if (!object.Equals(Tips, other.Tips)) return false;
      if (!object.Equals(Compare, other.Compare)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (deskFull_ != null) hash ^= DeskFull.GetHashCode();
      if (common_ != null) hash ^= Common.GetHashCode();
      if (startHu_ != null) hash ^= StartHu.GetHashCode();
      if (tips_ != null) hash ^= Tips.GetHashCode();
      if (compare_ != null) hash ^= Compare.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (deskFull_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DeskFull);
      }
      if (common_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Common);
      }
      if (startHu_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(StartHu);
      }
      if (tips_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Tips);
      }
      if (compare_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Compare);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (deskFull_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeskFull);
      }
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (startHu_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartHu);
      }
      if (tips_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tips);
      }
      if (compare_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Compare);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Record other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.deskFull_ != null) {
        if (deskFull_ == null) {
          deskFull_ = new global::Lobbyservice.Protobuf.MessageDeskFull();
        }
        DeskFull.MergeFrom(other.DeskFull);
      }
      if (other.common_ != null) {
        if (common_ == null) {
          common_ = new global::Lobbyservice.Protobuf.MessageDeskCommon();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.startHu_ != null) {
        if (startHu_ == null) {
          startHu_ = new global::Lobbyservice.Protobuf.MessageStartHu();
        }
        StartHu.MergeFrom(other.StartHu);
      }
      if (other.tips_ != null) {
        if (tips_ == null) {
          tips_ = new global::Lobbyservice.Protobuf.MessageCardTips();
        }
        Tips.MergeFrom(other.Tips);
      }
      if (other.compare_ != null) {
        if (compare_ == null) {
          compare_ = new global::Lobbyservice.Protobuf.MessageDeskCompare();
        }
        Compare.MergeFrom(other.Compare);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (deskFull_ == null) {
              deskFull_ = new global::Lobbyservice.Protobuf.MessageDeskFull();
            }
            input.ReadMessage(deskFull_);
            break;
          }
          case 26: {
            if (common_ == null) {
              common_ = new global::Lobbyservice.Protobuf.MessageDeskCommon();
            }
            input.ReadMessage(common_);
            break;
          }
          case 34: {
            if (startHu_ == null) {
              startHu_ = new global::Lobbyservice.Protobuf.MessageStartHu();
            }
            input.ReadMessage(startHu_);
            break;
          }
          case 42: {
            if (tips_ == null) {
              tips_ = new global::Lobbyservice.Protobuf.MessageCardTips();
            }
            input.ReadMessage(tips_);
            break;
          }
          case 50: {
            if (compare_ == null) {
              compare_ = new global::Lobbyservice.Protobuf.MessageDeskCompare();
            }
            input.ReadMessage(compare_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
