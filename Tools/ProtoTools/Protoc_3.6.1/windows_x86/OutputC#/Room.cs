// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: room.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Waihuzi.Protobuf {

  /// <summary>Holder for reflection information generated from room.proto</summary>
  public static partial class RoomReflection {

    #region Descriptor
    /// <summary>File descriptor for room.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoomReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgpyb29tLnByb3RvEhB3YWlodXppLnByb3RvYnVmIlAKDExvZ2luUmVxdWVz",
            "dBILCgNrZXkYASABKAkSDgoGdXNlcklkGAIgASgDEhEKCWxvbmdpdHVkZRgD",
            "IAEoCRIQCghsYXRpdHVkZRgEIAEoCSIZCglMb2dpblJlc3ASDAoEY29kZRgB",
            "IAEoBSJlCgpDcmVhdGVSb29tEjAKCGxvZ2luUmVxGAEgASgLMh4ud2FpaHV6",
            "aS5wcm90b2J1Zi5Mb2dpblJlcXVlc3QSEAoIbWF4Um91bmQYAiABKAUSEwoL",
            "cGxheWVyQ291bnQYAyABKAUiTAoISm9pblJvb20SMAoIbG9naW5SZXEYASAB",
            "KAsyHi53YWlodXppLnByb3RvYnVmLkxvZ2luUmVxdWVzdBIOCgZyb29tSWQY",
            "AiABKAkiKAoJRGlzYmFuZE9wEgsKA29wdBgBIAEoBRIOCgZ1c2VySWQYAiAB",
            "KAMivgEKCFJvb21JbmZvEi4KCWxvZ2luUmVzcBgBIAEoCzIbLndhaWh1emku",
            "cHJvdG9idWYuTG9naW5SZXNwEi0KB21lbWJlcnMYAiADKAsyHC53YWlodXpp",
            "LnByb3RvYnVmLlJvb21NZW1iZXISDgoGcm9vbUlkGAMgASgJEg4KBnVzZXJJ",
            "ZBgEIAEoAxIQCghub3dSb3VuZBgFIAEoBRIQCghtYXhSb3VuZBgGIAEoBRIP",
            "Cgdpc1N0YXJ0GAcgASgIIugBCgpSb29tTWVtYmVyEhIKCmhlYWRJbWdVcmwY",
            "ASABKAkSDAoEbmFtZRgCIAEoCRIOCgZ1c2VySWQYAyABKAMSDAoEaHV4aRgE",
            "IAEoBRINCgVzY29yZRgFIAEoBRIQCghwb3NpdGlvbhgGIAEoBRIPCgdpc1Jl",
            "YWR5GAcgASgIEhAKCGlzQmFua2VyGAggASgIEg8KB21heEh1eGkYCSABKAUS",
            "DwoHaHV0aW1lcxgKIAEoBRIRCglsb25naXR1ZGUYCyABKAkSEAoIbGF0aXR1",
            "ZGUYDCABKAkSDwoHaXNMZWF2ZRgNIAEoCCKSAQoMR2FtZUZpbmlzaGVkEi0K",
            "B21lbWJlcnMYASADKAsyHC53YWlodXppLnByb3RvYnVmLlJvb21NZW1iZXIS",
            "DgoGcm9vbUlkGAIgASgJEhEKCXN0YXJ0VGltZRgDIAEoAxIPCgdlbmRUaW1l",
            "GAQgASgDEg0KBXJvdW5kGAUgASgFEhAKCG1heFJvdW5kGAYgASgFIh4KCUxp",
            "Y2Vuc2luZxIRCgloYW5kQ2FyZHMYASADKAUinQEKDVNob3dPcGVyYXRpb24S",
            "JgoHY2hpTGlzdBgBIAMoCzIVLndhaWh1emkucHJvdG9idWYuQ2hpEg4KBmNh",
            "cmRJZBgCIAEoBRISCgpsaXVDYXJkSWRzGAMgAygFEg8KB2hhc1BlbmcYBCAB",
            "KAgSDgoGaGFzV2FpGAUgASgIEg0KBWNhbkh1GAYgASgIEhAKCGlzV2FpTGl1",
            "GAcgASgIIhUKA0NoaRIOCgZjYXJkSWQYASADKAUiOQoJQ2hpUmVzdWx0Eg4K",
            "BmNhcmRJZBgBIAMoBRIOCgZ1c2VySWQYAiABKAMSDAoEaHV4aRgDIAEoBSJm",
            "CgJIdRIqCgVjYXJkcxgBIAMoCzIbLndhaWh1emkucHJvdG9idWYuSGFuZENh",
            "cmRzEhAKCHdpbm5lcklkGAIgASgDEg4KBmNhcmRJZBgDIAEoBRISCgppc0Zp",
            "bmlzaGVkGAQgASgIIiwKCUhhbmRDYXJkcxIPCgdjYXJkSWRzGAEgAygFEg4K",
            "BnVzZXJJZBgCIAEoAyKyAgoPQm9hcmRTZXR0bGVtZW50EjEKDHBhaXhpbmdJ",
            "bmZvcxgBIAMoCzIbLndhaWh1emkucHJvdG9idWYuSHVwYWl4aW5nEjIKCWh1",
            "cHhJbmZvcxgCIAMoCzIfLndhaWh1emkucHJvdG9idWYuSHVQYWl4aW5nSW5m",
            "bxI5CglzZXR0SW5mb3MYAyADKAsyJi53YWlodXppLnByb3RvYnVmLlBsYXll",
            "clNldHRsZW1lbnRJbmZvEhEKCWRpQ2FyZElkcxgEIAMoBRIOCgZyb29tSWQY",
            "BSABKAkSDwoHZW5kVGltZRgGIAEoAxIRCgl0b3RhbEh1eGkYByABKAUSEAoI",
            "bm93Um91bmQYCCABKAUSEgoKdG90YWxSb3VuZBgJIAEoBRIQCghodUNhcmRJ",
            "ZBgKIAEoBSJKChRQbGF5ZXJTZXR0bGVtZW50SW5mbxIOCgZ1c2VySWQYASAB",
            "KAMSEAoId2luU2NvcmUYAiABKAUSEAoIbm93U2NvcmUYAyABKAUiKwoNSHVQ",
            "YWl4aW5nSW5mbxIMCgRuYW1lGAEgASgJEgwKBGh1eGkYAiABKAUiSAoJSHVw",
            "YWl4aW5nEg8KB2NhcmRJZHMYASADKAUSDAoEdHlwZRgCIAEoBRIOCgZjYXJk",
            "SWQYAyABKAUSDAoEaHV4aRgEIAEoBSL5AQoGUmV0dXJuEjYKCm1lbWJlcklu",
            "Zm8YASADKAsyIi53YWlodXppLnByb3RvYnVmLlJldHVybk1lbWJlckluZm8S",
            "DgoGcm9vbUlkGAIgASgJEhAKCG5vd1JvdW5kGAMgASgFEhAKCG1heFJvdW5k",
            "GAQgASgFEhEKCWdhbWVTdGF0ZRgFIAEoBRIZChFzdXJwbHVzQ2FyZEFtb3Vu",
            "dBgGIAEoBRIRCgljcmVhdGVkSWQYByABKAMSHAoUbm93T3BlcmF0aW9uUGxh",
            "eWVySWQYCCABKAMSDgoGY2FyZElkGAkgASgFEhQKDG5vd09wZXJhdGlvbhgK",
            "IAEoBSL1AQoQUmV0dXJuTWVtYmVySW5mbxI+Cg9sZWZ0SGFuZFBhaXhpbmcY",
            "ASADKAsyJS53YWlodXppLnByb3RvYnVmLkxlZnRIYW5kUGFpeGluZ0luZm8S",
            "LQoHbWVtYmVycxgCIAEoCzIcLndhaWh1emkucHJvdG9idWYuUm9vbU1lbWJl",
            "chISCgpwdXRDYXJkSWRzGAMgAygFEhMKC2hhbmRDYXJkSWRzGAQgAygFEjYK",
            "DXNob3dPcGVyYXRpb24YBSABKAsyHy53YWlodXppLnByb3RvYnVmLlNob3dP",
            "cGVyYXRpb24SEQoJaHVDYXJkSWRzGAYgAygFIkQKE0xlZnRIYW5kUGFpeGlu",
            "Z0luZm8SDwoHY2FyZElkcxgBIAMoBRIMCgR0eXBlGAIgASgFEg4KBmNhcmRJ",
            "ZBgDIAEoBUIoChtjb20uaG9vbGFpLndhaWh1emkucHJvdG9idWZCCVJvb21Q",
            "cm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Waihuzi.Protobuf.LoginRequest), global::Waihuzi.Protobuf.LoginRequest.Parser, new[]{ "Key", "UserId", "Longitude", "Latitude" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Waihuzi.Protobuf.LoginResp), global::Waihuzi.Protobuf.LoginResp.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Waihuzi.Protobuf.CreateRoom), global::Waihuzi.Protobuf.CreateRoom.Parser, new[]{ "LoginReq", "MaxRound", "PlayerCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Waihuzi.Protobuf.JoinRoom), global::Waihuzi.Protobuf.JoinRoom.Parser, new[]{ "LoginReq", "RoomId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Waihuzi.Protobuf.DisbandOp), global::Waihuzi.Protobuf.DisbandOp.Parser, new[]{ "Opt", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Waihuzi.Protobuf.RoomInfo), global::Waihuzi.Protobuf.RoomInfo.Parser, new[]{ "LoginResp", "Members", "RoomId", "UserId", "NowRound", "MaxRound", "IsStart" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Waihuzi.Protobuf.RoomMember), global::Waihuzi.Protobuf.RoomMember.Parser, new[]{ "HeadImgUrl", "Name", "UserId", "Huxi", "Score", "Position", "IsReady", "IsBanker", "MaxHuxi", "Hutimes", "Longitude", "Latitude", "IsLeave" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Waihuzi.Protobuf.GameFinished), global::Waihuzi.Protobuf.GameFinished.Parser, new[]{ "Members", "RoomId", "StartTime", "EndTime", "Round", "MaxRound" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Waihuzi.Protobuf.Licensing), global::Waihuzi.Protobuf.Licensing.Parser, new[]{ "HandCards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Waihuzi.Protobuf.ShowOperation), global::Waihuzi.Protobuf.ShowOperation.Parser, new[]{ "ChiList", "CardId", "LiuCardIds", "HasPeng", "HasWai", "CanHu", "IsWaiLiu" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Waihuzi.Protobuf.Chi), global::Waihuzi.Protobuf.Chi.Parser, new[]{ "CardId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Waihuzi.Protobuf.ChiResult), global::Waihuzi.Protobuf.ChiResult.Parser, new[]{ "CardId", "UserId", "Huxi" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Waihuzi.Protobuf.Hu), global::Waihuzi.Protobuf.Hu.Parser, new[]{ "Cards", "WinnerId", "CardId", "IsFinished" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Waihuzi.Protobuf.HandCards), global::Waihuzi.Protobuf.HandCards.Parser, new[]{ "CardIds", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Waihuzi.Protobuf.BoardSettlement), global::Waihuzi.Protobuf.BoardSettlement.Parser, new[]{ "PaixingInfos", "HupxInfos", "SettInfos", "DiCardIds", "RoomId", "EndTime", "TotalHuxi", "NowRound", "TotalRound", "HuCardId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Waihuzi.Protobuf.PlayerSettlementInfo), global::Waihuzi.Protobuf.PlayerSettlementInfo.Parser, new[]{ "UserId", "WinScore", "NowScore" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Waihuzi.Protobuf.HuPaixingInfo), global::Waihuzi.Protobuf.HuPaixingInfo.Parser, new[]{ "Name", "Huxi" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Waihuzi.Protobuf.Hupaixing), global::Waihuzi.Protobuf.Hupaixing.Parser, new[]{ "CardIds", "Type", "CardId", "Huxi" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Waihuzi.Protobuf.Return), global::Waihuzi.Protobuf.Return.Parser, new[]{ "MemberInfo", "RoomId", "NowRound", "MaxRound", "GameState", "SurplusCardAmount", "CreatedId", "NowOperationPlayerId", "CardId", "NowOperation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Waihuzi.Protobuf.ReturnMemberInfo), global::Waihuzi.Protobuf.ReturnMemberInfo.Parser, new[]{ "LeftHandPaixing", "Members", "PutCardIds", "HandCardIds", "ShowOperation", "HuCardIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Waihuzi.Protobuf.LeftHandPaixingInfo), global::Waihuzi.Protobuf.LeftHandPaixingInfo.Parser, new[]{ "CardIds", "Type", "CardId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 登陆请求
  /// </summary>
  public sealed partial class LoginRequest : pb::IMessage<LoginRequest> {
    private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Waihuzi.Protobuf.RoomReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest(LoginRequest other) : this() {
      key_ = other.key_;
      userId_ = other.userId_;
      longitude_ = other.longitude_;
      latitude_ = other.latitude_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest Clone() {
      return new LoginRequest(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// 登陆KEY
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 3;
    private string longitude_ = "";
    /// <summary>
    /// 经度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Longitude {
      get { return longitude_; }
      set {
        longitude_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 4;
    private string latitude_ = "";
    /// <summary>
    /// 纬度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Latitude {
      get { return latitude_; }
      set {
        latitude_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (UserId != other.UserId) return false;
      if (Longitude != other.Longitude) return false;
      if (Latitude != other.Latitude) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Longitude.Length != 0) hash ^= Longitude.GetHashCode();
      if (Latitude.Length != 0) hash ^= Latitude.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (Longitude.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Longitude);
      }
      if (Latitude.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Latitude);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Longitude.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Longitude);
      }
      if (Latitude.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Latitude);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Longitude.Length != 0) {
        Longitude = other.Longitude;
      }
      if (other.Latitude.Length != 0) {
        Latitude = other.Latitude;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 26: {
            Longitude = input.ReadString();
            break;
          }
          case 34: {
            Latitude = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 登陆应答
  /// </summary>
  public sealed partial class LoginResp : pb::IMessage<LoginResp> {
    private static readonly pb::MessageParser<LoginResp> _parser = new pb::MessageParser<LoginResp>(() => new LoginResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Waihuzi.Protobuf.RoomReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResp(LoginResp other) : this() {
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResp Clone() {
      return new LoginResp(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    /// 登陆状态 -1连接已经存在 -2连接错误 -3获取用户信息失败 -4验证用户信息失败 -5房间已满 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResp other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 创建房间信息 包含登陆请求信息、进行的最大局数、卡不卡歪、豪的玩法等
  /// </summary>
  public sealed partial class CreateRoom : pb::IMessage<CreateRoom> {
    private static readonly pb::MessageParser<CreateRoom> _parser = new pb::MessageParser<CreateRoom>(() => new CreateRoom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Waihuzi.Protobuf.RoomReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoom(CreateRoom other) : this() {
      loginReq_ = other.loginReq_ != null ? other.loginReq_.Clone() : null;
      maxRound_ = other.maxRound_;
      playerCount_ = other.playerCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoom Clone() {
      return new CreateRoom(this);
    }

    /// <summary>Field number for the "loginReq" field.</summary>
    public const int LoginReqFieldNumber = 1;
    private global::Waihuzi.Protobuf.LoginRequest loginReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Waihuzi.Protobuf.LoginRequest LoginReq {
      get { return loginReq_; }
      set {
        loginReq_ = value;
      }
    }

    /// <summary>Field number for the "maxRound" field.</summary>
    public const int MaxRoundFieldNumber = 2;
    private int maxRound_;
    /// <summary>
    /// 最大局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxRound {
      get { return maxRound_; }
      set {
        maxRound_ = value;
      }
    }

    /// <summary>Field number for the "playerCount" field.</summary>
    public const int PlayerCountFieldNumber = 3;
    private int playerCount_;
    /// <summary>
    /// 二人还是三人玩法 2为二人玩法 3为三人玩法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerCount {
      get { return playerCount_; }
      set {
        playerCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LoginReq, other.LoginReq)) return false;
      if (MaxRound != other.MaxRound) return false;
      if (PlayerCount != other.PlayerCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (loginReq_ != null) hash ^= LoginReq.GetHashCode();
      if (MaxRound != 0) hash ^= MaxRound.GetHashCode();
      if (PlayerCount != 0) hash ^= PlayerCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (loginReq_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LoginReq);
      }
      if (MaxRound != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxRound);
      }
      if (PlayerCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayerCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (loginReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginReq);
      }
      if (MaxRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRound);
      }
      if (PlayerCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateRoom other) {
      if (other == null) {
        return;
      }
      if (other.loginReq_ != null) {
        if (loginReq_ == null) {
          loginReq_ = new global::Waihuzi.Protobuf.LoginRequest();
        }
        LoginReq.MergeFrom(other.LoginReq);
      }
      if (other.MaxRound != 0) {
        MaxRound = other.MaxRound;
      }
      if (other.PlayerCount != 0) {
        PlayerCount = other.PlayerCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (loginReq_ == null) {
              loginReq_ = new global::Waihuzi.Protobuf.LoginRequest();
            }
            input.ReadMessage(loginReq_);
            break;
          }
          case 16: {
            MaxRound = input.ReadInt32();
            break;
          }
          case 24: {
            PlayerCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 加入房间 包含登陆请求信息、房间ID
  /// </summary>
  public sealed partial class JoinRoom : pb::IMessage<JoinRoom> {
    private static readonly pb::MessageParser<JoinRoom> _parser = new pb::MessageParser<JoinRoom>(() => new JoinRoom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Waihuzi.Protobuf.RoomReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoom(JoinRoom other) : this() {
      loginReq_ = other.loginReq_ != null ? other.loginReq_.Clone() : null;
      roomId_ = other.roomId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoom Clone() {
      return new JoinRoom(this);
    }

    /// <summary>Field number for the "loginReq" field.</summary>
    public const int LoginReqFieldNumber = 1;
    private global::Waihuzi.Protobuf.LoginRequest loginReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Waihuzi.Protobuf.LoginRequest LoginReq {
      get { return loginReq_; }
      set {
        loginReq_ = value;
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private string roomId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LoginReq, other.LoginReq)) return false;
      if (RoomId != other.RoomId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (loginReq_ != null) hash ^= LoginReq.GetHashCode();
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (loginReq_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LoginReq);
      }
      if (RoomId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (loginReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginReq);
      }
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinRoom other) {
      if (other == null) {
        return;
      }
      if (other.loginReq_ != null) {
        if (loginReq_ == null) {
          loginReq_ = new global::Waihuzi.Protobuf.LoginRequest();
        }
        LoginReq.MergeFrom(other.LoginReq);
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (loginReq_ == null) {
              loginReq_ = new global::Waihuzi.Protobuf.LoginRequest();
            }
            input.ReadMessage(loginReq_);
            break;
          }
          case 18: {
            RoomId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 解散房间玩家操作
  /// </summary>
  public sealed partial class DisbandOp : pb::IMessage<DisbandOp> {
    private static readonly pb::MessageParser<DisbandOp> _parser = new pb::MessageParser<DisbandOp>(() => new DisbandOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisbandOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Waihuzi.Protobuf.RoomReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisbandOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisbandOp(DisbandOp other) : this() {
      opt_ = other.opt_;
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisbandOp Clone() {
      return new DisbandOp(this);
    }

    /// <summary>Field number for the "opt" field.</summary>
    public const int OptFieldNumber = 1;
    private int opt_;
    /// <summary>
    /// 1true 2false
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Opt {
      get { return opt_; }
      set {
        opt_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisbandOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisbandOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Opt != other.Opt) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Opt != 0) hash ^= Opt.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Opt != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Opt);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Opt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Opt);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisbandOp other) {
      if (other == null) {
        return;
      }
      if (other.Opt != 0) {
        Opt = other.Opt;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Opt = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 房间信息
  /// </summary>
  public sealed partial class RoomInfo : pb::IMessage<RoomInfo> {
    private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => new RoomInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Waihuzi.Protobuf.RoomReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo(RoomInfo other) : this() {
      loginResp_ = other.loginResp_ != null ? other.loginResp_.Clone() : null;
      members_ = other.members_.Clone();
      roomId_ = other.roomId_;
      userId_ = other.userId_;
      nowRound_ = other.nowRound_;
      maxRound_ = other.maxRound_;
      isStart_ = other.isStart_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo Clone() {
      return new RoomInfo(this);
    }

    /// <summary>Field number for the "loginResp" field.</summary>
    public const int LoginRespFieldNumber = 1;
    private global::Waihuzi.Protobuf.LoginResp loginResp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Waihuzi.Protobuf.LoginResp LoginResp {
      get { return loginResp_; }
      set {
        loginResp_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Waihuzi.Protobuf.RoomMember> _repeated_members_codec
        = pb::FieldCodec.ForMessage(18, global::Waihuzi.Protobuf.RoomMember.Parser);
    private readonly pbc::RepeatedField<global::Waihuzi.Protobuf.RoomMember> members_ = new pbc::RepeatedField<global::Waihuzi.Protobuf.RoomMember>();
    /// <summary>
    /// 牌桌成员信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Waihuzi.Protobuf.RoomMember> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 3;
    private string roomId_ = "";
    /// <summary>
    /// 房间编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 4;
    private long userId_;
    /// <summary>
    /// 用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "nowRound" field.</summary>
    public const int NowRoundFieldNumber = 5;
    private int nowRound_;
    /// <summary>
    /// 当前局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NowRound {
      get { return nowRound_; }
      set {
        nowRound_ = value;
      }
    }

    /// <summary>Field number for the "maxRound" field.</summary>
    public const int MaxRoundFieldNumber = 6;
    private int maxRound_;
    /// <summary>
    /// 最大局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxRound {
      get { return maxRound_; }
      set {
        maxRound_ = value;
      }
    }

    /// <summary>Field number for the "isStart" field.</summary>
    public const int IsStartFieldNumber = 7;
    private bool isStart_;
    /// <summary>
    /// 牌局是否已经开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStart {
      get { return isStart_; }
      set {
        isStart_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LoginResp, other.LoginResp)) return false;
      if(!members_.Equals(other.members_)) return false;
      if (RoomId != other.RoomId) return false;
      if (UserId != other.UserId) return false;
      if (NowRound != other.NowRound) return false;
      if (MaxRound != other.MaxRound) return false;
      if (IsStart != other.IsStart) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (loginResp_ != null) hash ^= LoginResp.GetHashCode();
      hash ^= members_.GetHashCode();
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (NowRound != 0) hash ^= NowRound.GetHashCode();
      if (MaxRound != 0) hash ^= MaxRound.GetHashCode();
      if (IsStart != false) hash ^= IsStart.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (loginResp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LoginResp);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (RoomId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RoomId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UserId);
      }
      if (NowRound != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NowRound);
      }
      if (MaxRound != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxRound);
      }
      if (IsStart != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsStart);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (loginResp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginResp);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (NowRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NowRound);
      }
      if (MaxRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRound);
      }
      if (IsStart != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.loginResp_ != null) {
        if (loginResp_ == null) {
          loginResp_ = new global::Waihuzi.Protobuf.LoginResp();
        }
        LoginResp.MergeFrom(other.LoginResp);
      }
      members_.Add(other.members_);
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.NowRound != 0) {
        NowRound = other.NowRound;
      }
      if (other.MaxRound != 0) {
        MaxRound = other.MaxRound;
      }
      if (other.IsStart != false) {
        IsStart = other.IsStart;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (loginResp_ == null) {
              loginResp_ = new global::Waihuzi.Protobuf.LoginResp();
            }
            input.ReadMessage(loginResp_);
            break;
          }
          case 18: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 26: {
            RoomId = input.ReadString();
            break;
          }
          case 32: {
            UserId = input.ReadInt64();
            break;
          }
          case 40: {
            NowRound = input.ReadInt32();
            break;
          }
          case 48: {
            MaxRound = input.ReadInt32();
            break;
          }
          case 56: {
            IsStart = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 牌桌成员信息
  /// </summary>
  public sealed partial class RoomMember : pb::IMessage<RoomMember> {
    private static readonly pb::MessageParser<RoomMember> _parser = new pb::MessageParser<RoomMember>(() => new RoomMember());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Waihuzi.Protobuf.RoomReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMember(RoomMember other) : this() {
      headImgUrl_ = other.headImgUrl_;
      name_ = other.name_;
      userId_ = other.userId_;
      huxi_ = other.huxi_;
      score_ = other.score_;
      position_ = other.position_;
      isReady_ = other.isReady_;
      isBanker_ = other.isBanker_;
      maxHuxi_ = other.maxHuxi_;
      hutimes_ = other.hutimes_;
      longitude_ = other.longitude_;
      latitude_ = other.latitude_;
      isLeave_ = other.isLeave_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMember Clone() {
      return new RoomMember(this);
    }

    /// <summary>Field number for the "headImgUrl" field.</summary>
    public const int HeadImgUrlFieldNumber = 1;
    private string headImgUrl_ = "";
    /// <summary>
    /// 头像地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadImgUrl {
      get { return headImgUrl_; }
      set {
        headImgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 用户名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 3;
    private long userId_;
    /// <summary>
    /// 用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "huxi" field.</summary>
    public const int HuxiFieldNumber = 4;
    private int huxi_;
    /// <summary>
    /// 胡息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Huxi {
      get { return huxi_; }
      set {
        huxi_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 5;
    private int score_;
    /// <summary>
    /// 积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 6;
    private int position_;
    /// <summary>
    /// 位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "isReady" field.</summary>
    public const int IsReadyFieldNumber = 7;
    private bool isReady_;
    /// <summary>
    /// 是否已准备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReady {
      get { return isReady_; }
      set {
        isReady_ = value;
      }
    }

    /// <summary>Field number for the "isBanker" field.</summary>
    public const int IsBankerFieldNumber = 8;
    private bool isBanker_;
    /// <summary>
    /// 是否庄家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBanker {
      get { return isBanker_; }
      set {
        isBanker_ = value;
      }
    }

    /// <summary>Field number for the "maxHuxi" field.</summary>
    public const int MaxHuxiFieldNumber = 9;
    private int maxHuxi_;
    /// <summary>
    /// 最高胡息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHuxi {
      get { return maxHuxi_; }
      set {
        maxHuxi_ = value;
      }
    }

    /// <summary>Field number for the "hutimes" field.</summary>
    public const int HutimesFieldNumber = 10;
    private int hutimes_;
    /// <summary>
    /// 胡牌次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hutimes {
      get { return hutimes_; }
      set {
        hutimes_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 11;
    private string longitude_ = "";
    /// <summary>
    /// 经度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Longitude {
      get { return longitude_; }
      set {
        longitude_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 12;
    private string latitude_ = "";
    /// <summary>
    /// 纬度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Latitude {
      get { return latitude_; }
      set {
        latitude_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isLeave" field.</summary>
    public const int IsLeaveFieldNumber = 13;
    private bool isLeave_;
    /// <summary>
    /// 是否离开状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLeave {
      get { return isLeave_; }
      set {
        isLeave_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeadImgUrl != other.HeadImgUrl) return false;
      if (Name != other.Name) return false;
      if (UserId != other.UserId) return false;
      if (Huxi != other.Huxi) return false;
      if (Score != other.Score) return false;
      if (Position != other.Position) return false;
      if (IsReady != other.IsReady) return false;
      if (IsBanker != other.IsBanker) return false;
      if (MaxHuxi != other.MaxHuxi) return false;
      if (Hutimes != other.Hutimes) return false;
      if (Longitude != other.Longitude) return false;
      if (Latitude != other.Latitude) return false;
      if (IsLeave != other.IsLeave) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeadImgUrl.Length != 0) hash ^= HeadImgUrl.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Huxi != 0) hash ^= Huxi.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      if (IsReady != false) hash ^= IsReady.GetHashCode();
      if (IsBanker != false) hash ^= IsBanker.GetHashCode();
      if (MaxHuxi != 0) hash ^= MaxHuxi.GetHashCode();
      if (Hutimes != 0) hash ^= Hutimes.GetHashCode();
      if (Longitude.Length != 0) hash ^= Longitude.GetHashCode();
      if (Latitude.Length != 0) hash ^= Latitude.GetHashCode();
      if (IsLeave != false) hash ^= IsLeave.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeadImgUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HeadImgUrl);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
      if (Huxi != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Huxi);
      }
      if (Score != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Score);
      }
      if (Position != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Position);
      }
      if (IsReady != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsReady);
      }
      if (IsBanker != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsBanker);
      }
      if (MaxHuxi != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MaxHuxi);
      }
      if (Hutimes != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Hutimes);
      }
      if (Longitude.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Longitude);
      }
      if (Latitude.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Latitude);
      }
      if (IsLeave != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsLeave);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeadImgUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadImgUrl);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Huxi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Huxi);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (IsReady != false) {
        size += 1 + 1;
      }
      if (IsBanker != false) {
        size += 1 + 1;
      }
      if (MaxHuxi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHuxi);
      }
      if (Hutimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hutimes);
      }
      if (Longitude.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Longitude);
      }
      if (Latitude.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Latitude);
      }
      if (IsLeave != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomMember other) {
      if (other == null) {
        return;
      }
      if (other.HeadImgUrl.Length != 0) {
        HeadImgUrl = other.HeadImgUrl;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Huxi != 0) {
        Huxi = other.Huxi;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
      if (other.IsReady != false) {
        IsReady = other.IsReady;
      }
      if (other.IsBanker != false) {
        IsBanker = other.IsBanker;
      }
      if (other.MaxHuxi != 0) {
        MaxHuxi = other.MaxHuxi;
      }
      if (other.Hutimes != 0) {
        Hutimes = other.Hutimes;
      }
      if (other.Longitude.Length != 0) {
        Longitude = other.Longitude;
      }
      if (other.Latitude.Length != 0) {
        Latitude = other.Latitude;
      }
      if (other.IsLeave != false) {
        IsLeave = other.IsLeave;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            HeadImgUrl = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
          case 32: {
            Huxi = input.ReadInt32();
            break;
          }
          case 40: {
            Score = input.ReadInt32();
            break;
          }
          case 48: {
            Position = input.ReadInt32();
            break;
          }
          case 56: {
            IsReady = input.ReadBool();
            break;
          }
          case 64: {
            IsBanker = input.ReadBool();
            break;
          }
          case 72: {
            MaxHuxi = input.ReadInt32();
            break;
          }
          case 80: {
            Hutimes = input.ReadInt32();
            break;
          }
          case 90: {
            Longitude = input.ReadString();
            break;
          }
          case 98: {
            Latitude = input.ReadString();
            break;
          }
          case 104: {
            IsLeave = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 游戏结束
  /// </summary>
  public sealed partial class GameFinished : pb::IMessage<GameFinished> {
    private static readonly pb::MessageParser<GameFinished> _parser = new pb::MessageParser<GameFinished>(() => new GameFinished());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameFinished> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Waihuzi.Protobuf.RoomReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameFinished() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameFinished(GameFinished other) : this() {
      members_ = other.members_.Clone();
      roomId_ = other.roomId_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      round_ = other.round_;
      maxRound_ = other.maxRound_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameFinished Clone() {
      return new GameFinished(this);
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Waihuzi.Protobuf.RoomMember> _repeated_members_codec
        = pb::FieldCodec.ForMessage(10, global::Waihuzi.Protobuf.RoomMember.Parser);
    private readonly pbc::RepeatedField<global::Waihuzi.Protobuf.RoomMember> members_ = new pbc::RepeatedField<global::Waihuzi.Protobuf.RoomMember>();
    /// <summary>
    /// 成员局内总收支
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Waihuzi.Protobuf.RoomMember> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private string roomId_ = "";
    /// <summary>
    /// 房号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 3;
    private long startTime_;
    /// <summary>
    /// 开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private long endTime_;
    /// <summary>
    /// 结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 5;
    private int round_;
    /// <summary>
    /// 进行的局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "maxRound" field.</summary>
    public const int MaxRoundFieldNumber = 6;
    private int maxRound_;
    /// <summary>
    /// 最大局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxRound {
      get { return maxRound_; }
      set {
        maxRound_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameFinished);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameFinished other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!members_.Equals(other.members_)) return false;
      if (RoomId != other.RoomId) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (Round != other.Round) return false;
      if (MaxRound != other.MaxRound) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= members_.GetHashCode();
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (Round != 0) hash ^= Round.GetHashCode();
      if (MaxRound != 0) hash ^= MaxRound.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      members_.WriteTo(output, _repeated_members_codec);
      if (RoomId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomId);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(EndTime);
      }
      if (Round != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Round);
      }
      if (MaxRound != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxRound);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += members_.CalculateSize(_repeated_members_codec);
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
      }
      if (MaxRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRound);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameFinished other) {
      if (other == null) {
        return;
      }
      members_.Add(other.members_);
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      if (other.Round != 0) {
        Round = other.Round;
      }
      if (other.MaxRound != 0) {
        MaxRound = other.MaxRound;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 18: {
            RoomId = input.ReadString();
            break;
          }
          case 24: {
            StartTime = input.ReadInt64();
            break;
          }
          case 32: {
            EndTime = input.ReadInt64();
            break;
          }
          case 40: {
            Round = input.ReadInt32();
            break;
          }
          case 48: {
            MaxRound = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 发牌
  /// </summary>
  public sealed partial class Licensing : pb::IMessage<Licensing> {
    private static readonly pb::MessageParser<Licensing> _parser = new pb::MessageParser<Licensing>(() => new Licensing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Licensing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Waihuzi.Protobuf.RoomReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Licensing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Licensing(Licensing other) : this() {
      handCards_ = other.handCards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Licensing Clone() {
      return new Licensing(this);
    }

    /// <summary>Field number for the "handCards" field.</summary>
    public const int HandCardsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_handCards_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> handCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HandCards {
      get { return handCards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Licensing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Licensing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!handCards_.Equals(other.handCards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= handCards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      handCards_.WriteTo(output, _repeated_handCards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += handCards_.CalculateSize(_repeated_handCards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Licensing other) {
      if (other == null) {
        return;
      }
      handCards_.Add(other.handCards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            handCards_.AddEntriesFrom(input, _repeated_handCards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 牌局显示操作
  /// </summary>
  public sealed partial class ShowOperation : pb::IMessage<ShowOperation> {
    private static readonly pb::MessageParser<ShowOperation> _parser = new pb::MessageParser<ShowOperation>(() => new ShowOperation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShowOperation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Waihuzi.Protobuf.RoomReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowOperation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowOperation(ShowOperation other) : this() {
      chiList_ = other.chiList_.Clone();
      cardId_ = other.cardId_;
      liuCardIds_ = other.liuCardIds_.Clone();
      hasPeng_ = other.hasPeng_;
      hasWai_ = other.hasWai_;
      canHu_ = other.canHu_;
      isWaiLiu_ = other.isWaiLiu_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowOperation Clone() {
      return new ShowOperation(this);
    }

    /// <summary>Field number for the "chiList" field.</summary>
    public const int ChiListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Waihuzi.Protobuf.Chi> _repeated_chiList_codec
        = pb::FieldCodec.ForMessage(10, global::Waihuzi.Protobuf.Chi.Parser);
    private readonly pbc::RepeatedField<global::Waihuzi.Protobuf.Chi> chiList_ = new pbc::RepeatedField<global::Waihuzi.Protobuf.Chi>();
    /// <summary>
    /// 吃列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Waihuzi.Protobuf.Chi> ChiList {
      get { return chiList_; }
    }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 2;
    private int cardId_;
    /// <summary>
    /// 打出或者摸到的牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "liuCardIds" field.</summary>
    public const int LiuCardIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_liuCardIds_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> liuCardIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 要溜的牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LiuCardIds {
      get { return liuCardIds_; }
    }

    /// <summary>Field number for the "hasPeng" field.</summary>
    public const int HasPengFieldNumber = 4;
    private bool hasPeng_;
    /// <summary>
    /// 是否有碰
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPeng {
      get { return hasPeng_; }
      set {
        hasPeng_ = value;
      }
    }

    /// <summary>Field number for the "hasWai" field.</summary>
    public const int HasWaiFieldNumber = 5;
    private bool hasWai_;
    /// <summary>
    /// 是否有歪
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWai {
      get { return hasWai_; }
      set {
        hasWai_ = value;
      }
    }

    /// <summary>Field number for the "canHu" field.</summary>
    public const int CanHuFieldNumber = 6;
    private bool canHu_;
    /// <summary>
    /// 是否可胡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanHu {
      get { return canHu_; }
      set {
        canHu_ = value;
      }
    }

    /// <summary>Field number for the "isWaiLiu" field.</summary>
    public const int IsWaiLiuFieldNumber = 7;
    private bool isWaiLiu_;
    /// <summary>
    /// 是否歪溜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWaiLiu {
      get { return isWaiLiu_; }
      set {
        isWaiLiu_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShowOperation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShowOperation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!chiList_.Equals(other.chiList_)) return false;
      if (CardId != other.CardId) return false;
      if(!liuCardIds_.Equals(other.liuCardIds_)) return false;
      if (HasPeng != other.HasPeng) return false;
      if (HasWai != other.HasWai) return false;
      if (CanHu != other.CanHu) return false;
      if (IsWaiLiu != other.IsWaiLiu) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= chiList_.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      hash ^= liuCardIds_.GetHashCode();
      if (HasPeng != false) hash ^= HasPeng.GetHashCode();
      if (HasWai != false) hash ^= HasWai.GetHashCode();
      if (CanHu != false) hash ^= CanHu.GetHashCode();
      if (IsWaiLiu != false) hash ^= IsWaiLiu.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      chiList_.WriteTo(output, _repeated_chiList_codec);
      if (CardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CardId);
      }
      liuCardIds_.WriteTo(output, _repeated_liuCardIds_codec);
      if (HasPeng != false) {
        output.WriteRawTag(32);
        output.WriteBool(HasPeng);
      }
      if (HasWai != false) {
        output.WriteRawTag(40);
        output.WriteBool(HasWai);
      }
      if (CanHu != false) {
        output.WriteRawTag(48);
        output.WriteBool(CanHu);
      }
      if (IsWaiLiu != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsWaiLiu);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += chiList_.CalculateSize(_repeated_chiList_codec);
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      size += liuCardIds_.CalculateSize(_repeated_liuCardIds_codec);
      if (HasPeng != false) {
        size += 1 + 1;
      }
      if (HasWai != false) {
        size += 1 + 1;
      }
      if (CanHu != false) {
        size += 1 + 1;
      }
      if (IsWaiLiu != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShowOperation other) {
      if (other == null) {
        return;
      }
      chiList_.Add(other.chiList_);
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      liuCardIds_.Add(other.liuCardIds_);
      if (other.HasPeng != false) {
        HasPeng = other.HasPeng;
      }
      if (other.HasWai != false) {
        HasWai = other.HasWai;
      }
      if (other.CanHu != false) {
        CanHu = other.CanHu;
      }
      if (other.IsWaiLiu != false) {
        IsWaiLiu = other.IsWaiLiu;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            chiList_.AddEntriesFrom(input, _repeated_chiList_codec);
            break;
          }
          case 16: {
            CardId = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            liuCardIds_.AddEntriesFrom(input, _repeated_liuCardIds_codec);
            break;
          }
          case 32: {
            HasPeng = input.ReadBool();
            break;
          }
          case 40: {
            HasWai = input.ReadBool();
            break;
          }
          case 48: {
            CanHu = input.ReadBool();
            break;
          }
          case 56: {
            IsWaiLiu = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 吃
  /// </summary>
  public sealed partial class Chi : pb::IMessage<Chi> {
    private static readonly pb::MessageParser<Chi> _parser = new pb::MessageParser<Chi>(() => new Chi());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chi> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Waihuzi.Protobuf.RoomReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chi() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chi(Chi other) : this() {
      cardId_ = other.cardId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chi Clone() {
      return new Chi(this);
    }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_cardId_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> cardId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 吃牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CardId {
      get { return cardId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chi);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chi other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cardId_.Equals(other.cardId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cardId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cardId_.WriteTo(output, _repeated_cardId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cardId_.CalculateSize(_repeated_cardId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chi other) {
      if (other == null) {
        return;
      }
      cardId_.Add(other.cardId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            cardId_.AddEntriesFrom(input, _repeated_cardId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChiResult : pb::IMessage<ChiResult> {
    private static readonly pb::MessageParser<ChiResult> _parser = new pb::MessageParser<ChiResult>(() => new ChiResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChiResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Waihuzi.Protobuf.RoomReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChiResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChiResult(ChiResult other) : this() {
      cardId_ = other.cardId_.Clone();
      userId_ = other.userId_;
      huxi_ = other.huxi_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChiResult Clone() {
      return new ChiResult(this);
    }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_cardId_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> cardId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 吃牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CardId {
      get { return cardId_; }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "huxi" field.</summary>
    public const int HuxiFieldNumber = 3;
    private int huxi_;
    /// <summary>
    /// 吃二七十或者贰柒拾后的胡息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Huxi {
      get { return huxi_; }
      set {
        huxi_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChiResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChiResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cardId_.Equals(other.cardId_)) return false;
      if (UserId != other.UserId) return false;
      if (Huxi != other.Huxi) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cardId_.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Huxi != 0) hash ^= Huxi.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cardId_.WriteTo(output, _repeated_cardId_codec);
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (Huxi != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Huxi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cardId_.CalculateSize(_repeated_cardId_codec);
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Huxi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Huxi);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChiResult other) {
      if (other == null) {
        return;
      }
      cardId_.Add(other.cardId_);
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Huxi != 0) {
        Huxi = other.Huxi;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            cardId_.AddEntriesFrom(input, _repeated_cardId_codec);
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 24: {
            Huxi = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Hu : pb::IMessage<Hu> {
    private static readonly pb::MessageParser<Hu> _parser = new pb::MessageParser<Hu>(() => new Hu());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hu> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Waihuzi.Protobuf.RoomReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hu() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hu(Hu other) : this() {
      cards_ = other.cards_.Clone();
      winnerId_ = other.winnerId_;
      cardId_ = other.cardId_;
      isFinished_ = other.isFinished_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hu Clone() {
      return new Hu(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Waihuzi.Protobuf.HandCards> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Waihuzi.Protobuf.HandCards.Parser);
    private readonly pbc::RepeatedField<global::Waihuzi.Protobuf.HandCards> cards_ = new pbc::RepeatedField<global::Waihuzi.Protobuf.HandCards>();
    /// <summary>
    /// 玩家手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Waihuzi.Protobuf.HandCards> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "winnerId" field.</summary>
    public const int WinnerIdFieldNumber = 2;
    private long winnerId_;
    /// <summary>
    /// 赢牌玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WinnerId {
      get { return winnerId_; }
      set {
        winnerId_ = value;
      }
    }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 3;
    private int cardId_;
    /// <summary>
    /// 牌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "isFinished" field.</summary>
    public const int IsFinishedFieldNumber = 4;
    private bool isFinished_;
    /// <summary>
    /// 游戏是否结束
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFinished {
      get { return isFinished_; }
      set {
        isFinished_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hu);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hu other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      if (WinnerId != other.WinnerId) return false;
      if (CardId != other.CardId) return false;
      if (IsFinished != other.IsFinished) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (WinnerId != 0L) hash ^= WinnerId.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (IsFinished != false) hash ^= IsFinished.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
      if (WinnerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(WinnerId);
      }
      if (CardId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CardId);
      }
      if (IsFinished != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsFinished);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (WinnerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WinnerId);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (IsFinished != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hu other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      if (other.WinnerId != 0L) {
        WinnerId = other.WinnerId;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.IsFinished != false) {
        IsFinished = other.IsFinished;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 16: {
            WinnerId = input.ReadInt64();
            break;
          }
          case 24: {
            CardId = input.ReadInt32();
            break;
          }
          case 32: {
            IsFinished = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 胡牌或者黄庄玩家的手牌
  /// </summary>
  public sealed partial class HandCards : pb::IMessage<HandCards> {
    private static readonly pb::MessageParser<HandCards> _parser = new pb::MessageParser<HandCards>(() => new HandCards());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HandCards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Waihuzi.Protobuf.RoomReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandCards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandCards(HandCards other) : this() {
      cardIds_ = other.cardIds_.Clone();
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandCards Clone() {
      return new HandCards(this);
    }

    /// <summary>Field number for the "cardIds" field.</summary>
    public const int CardIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_cardIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> cardIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CardIds {
      get { return cardIds_; }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HandCards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HandCards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cardIds_.Equals(other.cardIds_)) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cardIds_.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cardIds_.WriteTo(output, _repeated_cardIds_codec);
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cardIds_.CalculateSize(_repeated_cardIds_codec);
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HandCards other) {
      if (other == null) {
        return;
      }
      cardIds_.Add(other.cardIds_);
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 每局结束后的牌局结算
  /// </summary>
  public sealed partial class BoardSettlement : pb::IMessage<BoardSettlement> {
    private static readonly pb::MessageParser<BoardSettlement> _parser = new pb::MessageParser<BoardSettlement>(() => new BoardSettlement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoardSettlement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Waihuzi.Protobuf.RoomReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoardSettlement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoardSettlement(BoardSettlement other) : this() {
      paixingInfos_ = other.paixingInfos_.Clone();
      hupxInfos_ = other.hupxInfos_.Clone();
      settInfos_ = other.settInfos_.Clone();
      diCardIds_ = other.diCardIds_.Clone();
      roomId_ = other.roomId_;
      endTime_ = other.endTime_;
      totalHuxi_ = other.totalHuxi_;
      nowRound_ = other.nowRound_;
      totalRound_ = other.totalRound_;
      huCardId_ = other.huCardId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoardSettlement Clone() {
      return new BoardSettlement(this);
    }

    /// <summary>Field number for the "paixingInfos" field.</summary>
    public const int PaixingInfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Waihuzi.Protobuf.Hupaixing> _repeated_paixingInfos_codec
        = pb::FieldCodec.ForMessage(10, global::Waihuzi.Protobuf.Hupaixing.Parser);
    private readonly pbc::RepeatedField<global::Waihuzi.Protobuf.Hupaixing> paixingInfos_ = new pbc::RepeatedField<global::Waihuzi.Protobuf.Hupaixing>();
    /// <summary>
    /// 牌型信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Waihuzi.Protobuf.Hupaixing> PaixingInfos {
      get { return paixingInfos_; }
    }

    /// <summary>Field number for the "hupxInfos" field.</summary>
    public const int HupxInfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Waihuzi.Protobuf.HuPaixingInfo> _repeated_hupxInfos_codec
        = pb::FieldCodec.ForMessage(18, global::Waihuzi.Protobuf.HuPaixingInfo.Parser);
    private readonly pbc::RepeatedField<global::Waihuzi.Protobuf.HuPaixingInfo> hupxInfos_ = new pbc::RepeatedField<global::Waihuzi.Protobuf.HuPaixingInfo>();
    /// <summary>
    /// 胡牌型信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Waihuzi.Protobuf.HuPaixingInfo> HupxInfos {
      get { return hupxInfos_; }
    }

    /// <summary>Field number for the "settInfos" field.</summary>
    public const int SettInfosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Waihuzi.Protobuf.PlayerSettlementInfo> _repeated_settInfos_codec
        = pb::FieldCodec.ForMessage(26, global::Waihuzi.Protobuf.PlayerSettlementInfo.Parser);
    private readonly pbc::RepeatedField<global::Waihuzi.Protobuf.PlayerSettlementInfo> settInfos_ = new pbc::RepeatedField<global::Waihuzi.Protobuf.PlayerSettlementInfo>();
    /// <summary>
    /// 玩家局内结算
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Waihuzi.Protobuf.PlayerSettlementInfo> SettInfos {
      get { return settInfos_; }
    }

    /// <summary>Field number for the "diCardIds" field.</summary>
    public const int DiCardIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_diCardIds_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> diCardIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 底牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DiCardIds {
      get { return diCardIds_; }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 5;
    private string roomId_ = "";
    /// <summary>
    /// 房间号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 6;
    private long endTime_;
    /// <summary>
    /// 牌局结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "totalHuxi" field.</summary>
    public const int TotalHuxiFieldNumber = 7;
    private int totalHuxi_;
    /// <summary>
    /// 总胡息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalHuxi {
      get { return totalHuxi_; }
      set {
        totalHuxi_ = value;
      }
    }

    /// <summary>Field number for the "nowRound" field.</summary>
    public const int NowRoundFieldNumber = 8;
    private int nowRound_;
    /// <summary>
    /// 当前局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NowRound {
      get { return nowRound_; }
      set {
        nowRound_ = value;
      }
    }

    /// <summary>Field number for the "totalRound" field.</summary>
    public const int TotalRoundFieldNumber = 9;
    private int totalRound_;
    /// <summary>
    /// 总局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalRound {
      get { return totalRound_; }
      set {
        totalRound_ = value;
      }
    }

    /// <summary>Field number for the "huCardId" field.</summary>
    public const int HuCardIdFieldNumber = 10;
    private int huCardId_;
    /// <summary>
    /// 胡牌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HuCardId {
      get { return huCardId_; }
      set {
        huCardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoardSettlement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoardSettlement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!paixingInfos_.Equals(other.paixingInfos_)) return false;
      if(!hupxInfos_.Equals(other.hupxInfos_)) return false;
      if(!settInfos_.Equals(other.settInfos_)) return false;
      if(!diCardIds_.Equals(other.diCardIds_)) return false;
      if (RoomId != other.RoomId) return false;
      if (EndTime != other.EndTime) return false;
      if (TotalHuxi != other.TotalHuxi) return false;
      if (NowRound != other.NowRound) return false;
      if (TotalRound != other.TotalRound) return false;
      if (HuCardId != other.HuCardId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= paixingInfos_.GetHashCode();
      hash ^= hupxInfos_.GetHashCode();
      hash ^= settInfos_.GetHashCode();
      hash ^= diCardIds_.GetHashCode();
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (TotalHuxi != 0) hash ^= TotalHuxi.GetHashCode();
      if (NowRound != 0) hash ^= NowRound.GetHashCode();
      if (TotalRound != 0) hash ^= TotalRound.GetHashCode();
      if (HuCardId != 0) hash ^= HuCardId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      paixingInfos_.WriteTo(output, _repeated_paixingInfos_codec);
      hupxInfos_.WriteTo(output, _repeated_hupxInfos_codec);
      settInfos_.WriteTo(output, _repeated_settInfos_codec);
      diCardIds_.WriteTo(output, _repeated_diCardIds_codec);
      if (RoomId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RoomId);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(EndTime);
      }
      if (TotalHuxi != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TotalHuxi);
      }
      if (NowRound != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(NowRound);
      }
      if (TotalRound != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(TotalRound);
      }
      if (HuCardId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(HuCardId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += paixingInfos_.CalculateSize(_repeated_paixingInfos_codec);
      size += hupxInfos_.CalculateSize(_repeated_hupxInfos_codec);
      size += settInfos_.CalculateSize(_repeated_settInfos_codec);
      size += diCardIds_.CalculateSize(_repeated_diCardIds_codec);
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (TotalHuxi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalHuxi);
      }
      if (NowRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NowRound);
      }
      if (TotalRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRound);
      }
      if (HuCardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HuCardId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoardSettlement other) {
      if (other == null) {
        return;
      }
      paixingInfos_.Add(other.paixingInfos_);
      hupxInfos_.Add(other.hupxInfos_);
      settInfos_.Add(other.settInfos_);
      diCardIds_.Add(other.diCardIds_);
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      if (other.TotalHuxi != 0) {
        TotalHuxi = other.TotalHuxi;
      }
      if (other.NowRound != 0) {
        NowRound = other.NowRound;
      }
      if (other.TotalRound != 0) {
        TotalRound = other.TotalRound;
      }
      if (other.HuCardId != 0) {
        HuCardId = other.HuCardId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            paixingInfos_.AddEntriesFrom(input, _repeated_paixingInfos_codec);
            break;
          }
          case 18: {
            hupxInfos_.AddEntriesFrom(input, _repeated_hupxInfos_codec);
            break;
          }
          case 26: {
            settInfos_.AddEntriesFrom(input, _repeated_settInfos_codec);
            break;
          }
          case 34:
          case 32: {
            diCardIds_.AddEntriesFrom(input, _repeated_diCardIds_codec);
            break;
          }
          case 42: {
            RoomId = input.ReadString();
            break;
          }
          case 48: {
            EndTime = input.ReadInt64();
            break;
          }
          case 56: {
            TotalHuxi = input.ReadInt32();
            break;
          }
          case 64: {
            NowRound = input.ReadInt32();
            break;
          }
          case 72: {
            TotalRound = input.ReadInt32();
            break;
          }
          case 80: {
            HuCardId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家每局结算信息
  /// </summary>
  public sealed partial class PlayerSettlementInfo : pb::IMessage<PlayerSettlementInfo> {
    private static readonly pb::MessageParser<PlayerSettlementInfo> _parser = new pb::MessageParser<PlayerSettlementInfo>(() => new PlayerSettlementInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerSettlementInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Waihuzi.Protobuf.RoomReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSettlementInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSettlementInfo(PlayerSettlementInfo other) : this() {
      userId_ = other.userId_;
      winScore_ = other.winScore_;
      nowScore_ = other.nowScore_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSettlementInfo Clone() {
      return new PlayerSettlementInfo(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "winScore" field.</summary>
    public const int WinScoreFieldNumber = 2;
    private int winScore_;
    /// <summary>
    /// 获胜积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinScore {
      get { return winScore_; }
      set {
        winScore_ = value;
      }
    }

    /// <summary>Field number for the "nowScore" field.</summary>
    public const int NowScoreFieldNumber = 3;
    private int nowScore_;
    /// <summary>
    /// 当前积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NowScore {
      get { return nowScore_; }
      set {
        nowScore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerSettlementInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerSettlementInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (WinScore != other.WinScore) return false;
      if (NowScore != other.NowScore) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (WinScore != 0) hash ^= WinScore.GetHashCode();
      if (NowScore != 0) hash ^= NowScore.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (WinScore != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WinScore);
      }
      if (NowScore != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NowScore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (WinScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinScore);
      }
      if (NowScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NowScore);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerSettlementInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.WinScore != 0) {
        WinScore = other.WinScore;
      }
      if (other.NowScore != 0) {
        NowScore = other.NowScore;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            WinScore = input.ReadInt32();
            break;
          }
          case 24: {
            NowScore = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 胡牌牌型信息
  /// </summary>
  public sealed partial class HuPaixingInfo : pb::IMessage<HuPaixingInfo> {
    private static readonly pb::MessageParser<HuPaixingInfo> _parser = new pb::MessageParser<HuPaixingInfo>(() => new HuPaixingInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HuPaixingInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Waihuzi.Protobuf.RoomReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HuPaixingInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HuPaixingInfo(HuPaixingInfo other) : this() {
      name_ = other.name_;
      huxi_ = other.huxi_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HuPaixingInfo Clone() {
      return new HuPaixingInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 牌型名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "huxi" field.</summary>
    public const int HuxiFieldNumber = 2;
    private int huxi_;
    /// <summary>
    /// 胡息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Huxi {
      get { return huxi_; }
      set {
        huxi_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HuPaixingInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HuPaixingInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Huxi != other.Huxi) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Huxi != 0) hash ^= Huxi.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Huxi != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Huxi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Huxi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Huxi);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HuPaixingInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Huxi != 0) {
        Huxi = other.Huxi;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Huxi = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Hupaixing : pb::IMessage<Hupaixing> {
    private static readonly pb::MessageParser<Hupaixing> _parser = new pb::MessageParser<Hupaixing>(() => new Hupaixing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hupaixing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Waihuzi.Protobuf.RoomReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hupaixing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hupaixing(Hupaixing other) : this() {
      cardIds_ = other.cardIds_.Clone();
      type_ = other.type_;
      cardId_ = other.cardId_;
      huxi_ = other.huxi_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hupaixing Clone() {
      return new Hupaixing(this);
    }

    /// <summary>Field number for the "cardIds" field.</summary>
    public const int CardIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_cardIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> cardIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CardIds {
      get { return cardIds_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    /// 1吃、2碰、3歪、4溜、5坎、6最后两张牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 3;
    private int cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "huxi" field.</summary>
    public const int HuxiFieldNumber = 4;
    private int huxi_;
    /// <summary>
    /// 胡息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Huxi {
      get { return huxi_; }
      set {
        huxi_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hupaixing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hupaixing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cardIds_.Equals(other.cardIds_)) return false;
      if (Type != other.Type) return false;
      if (CardId != other.CardId) return false;
      if (Huxi != other.Huxi) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cardIds_.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (Huxi != 0) hash ^= Huxi.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cardIds_.WriteTo(output, _repeated_cardIds_codec);
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (CardId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CardId);
      }
      if (Huxi != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Huxi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cardIds_.CalculateSize(_repeated_cardIds_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (Huxi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Huxi);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hupaixing other) {
      if (other == null) {
        return;
      }
      cardIds_.Add(other.cardIds_);
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.Huxi != 0) {
        Huxi = other.Huxi;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            CardId = input.ReadInt32();
            break;
          }
          case 32: {
            Huxi = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家返回牌桌
  /// </summary>
  public sealed partial class Return : pb::IMessage<Return> {
    private static readonly pb::MessageParser<Return> _parser = new pb::MessageParser<Return>(() => new Return());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Return> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Waihuzi.Protobuf.RoomReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Return() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Return(Return other) : this() {
      memberInfo_ = other.memberInfo_.Clone();
      roomId_ = other.roomId_;
      nowRound_ = other.nowRound_;
      maxRound_ = other.maxRound_;
      gameState_ = other.gameState_;
      surplusCardAmount_ = other.surplusCardAmount_;
      createdId_ = other.createdId_;
      nowOperationPlayerId_ = other.nowOperationPlayerId_;
      cardId_ = other.cardId_;
      nowOperation_ = other.nowOperation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Return Clone() {
      return new Return(this);
    }

    /// <summary>Field number for the "memberInfo" field.</summary>
    public const int MemberInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Waihuzi.Protobuf.ReturnMemberInfo> _repeated_memberInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Waihuzi.Protobuf.ReturnMemberInfo.Parser);
    private readonly pbc::RepeatedField<global::Waihuzi.Protobuf.ReturnMemberInfo> memberInfo_ = new pbc::RepeatedField<global::Waihuzi.Protobuf.ReturnMemberInfo>();
    /// <summary>
    /// 成员信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Waihuzi.Protobuf.ReturnMemberInfo> MemberInfo {
      get { return memberInfo_; }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private string roomId_ = "";
    /// <summary>
    /// 房间号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nowRound" field.</summary>
    public const int NowRoundFieldNumber = 3;
    private int nowRound_;
    /// <summary>
    /// 当前局
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NowRound {
      get { return nowRound_; }
      set {
        nowRound_ = value;
      }
    }

    /// <summary>Field number for the "maxRound" field.</summary>
    public const int MaxRoundFieldNumber = 4;
    private int maxRound_;
    /// <summary>
    /// 最大局
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxRound {
      get { return maxRound_; }
      set {
        maxRound_ = value;
      }
    }

    /// <summary>Field number for the "gameState" field.</summary>
    public const int GameStateFieldNumber = 5;
    private int gameState_;
    /// <summary>
    /// 游戏当前状态 1.未开启 2.正在进行中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameState {
      get { return gameState_; }
      set {
        gameState_ = value;
      }
    }

    /// <summary>Field number for the "surplusCardAmount" field.</summary>
    public const int SurplusCardAmountFieldNumber = 6;
    private int surplusCardAmount_;
    /// <summary>
    /// 底牌数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SurplusCardAmount {
      get { return surplusCardAmount_; }
      set {
        surplusCardAmount_ = value;
      }
    }

    /// <summary>Field number for the "createdId" field.</summary>
    public const int CreatedIdFieldNumber = 7;
    private long createdId_;
    /// <summary>
    /// 房主ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedId {
      get { return createdId_; }
      set {
        createdId_ = value;
      }
    }

    /// <summary>Field number for the "nowOperationPlayerId" field.</summary>
    public const int NowOperationPlayerIdFieldNumber = 8;
    private long nowOperationPlayerId_;
    /// <summary>
    /// 当前正在操作的玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NowOperationPlayerId {
      get { return nowOperationPlayerId_; }
      set {
        nowOperationPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 9;
    private int cardId_;
    /// <summary>
    /// 当前正在操作的牌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "nowOperation" field.</summary>
    public const int NowOperationFieldNumber = 10;
    private int nowOperation_;
    /// <summary>
    /// 玩家当前正在进行操作 1摸牌 2打牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NowOperation {
      get { return nowOperation_; }
      set {
        nowOperation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Return);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Return other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!memberInfo_.Equals(other.memberInfo_)) return false;
      if (RoomId != other.RoomId) return false;
      if (NowRound != other.NowRound) return false;
      if (MaxRound != other.MaxRound) return false;
      if (GameState != other.GameState) return false;
      if (SurplusCardAmount != other.SurplusCardAmount) return false;
      if (CreatedId != other.CreatedId) return false;
      if (NowOperationPlayerId != other.NowOperationPlayerId) return false;
      if (CardId != other.CardId) return false;
      if (NowOperation != other.NowOperation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= memberInfo_.GetHashCode();
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (NowRound != 0) hash ^= NowRound.GetHashCode();
      if (MaxRound != 0) hash ^= MaxRound.GetHashCode();
      if (GameState != 0) hash ^= GameState.GetHashCode();
      if (SurplusCardAmount != 0) hash ^= SurplusCardAmount.GetHashCode();
      if (CreatedId != 0L) hash ^= CreatedId.GetHashCode();
      if (NowOperationPlayerId != 0L) hash ^= NowOperationPlayerId.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (NowOperation != 0) hash ^= NowOperation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      memberInfo_.WriteTo(output, _repeated_memberInfo_codec);
      if (RoomId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomId);
      }
      if (NowRound != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NowRound);
      }
      if (MaxRound != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxRound);
      }
      if (GameState != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GameState);
      }
      if (SurplusCardAmount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SurplusCardAmount);
      }
      if (CreatedId != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(CreatedId);
      }
      if (NowOperationPlayerId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(NowOperationPlayerId);
      }
      if (CardId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CardId);
      }
      if (NowOperation != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(NowOperation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += memberInfo_.CalculateSize(_repeated_memberInfo_codec);
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (NowRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NowRound);
      }
      if (MaxRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRound);
      }
      if (GameState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameState);
      }
      if (SurplusCardAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SurplusCardAmount);
      }
      if (CreatedId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedId);
      }
      if (NowOperationPlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NowOperationPlayerId);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (NowOperation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NowOperation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Return other) {
      if (other == null) {
        return;
      }
      memberInfo_.Add(other.memberInfo_);
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.NowRound != 0) {
        NowRound = other.NowRound;
      }
      if (other.MaxRound != 0) {
        MaxRound = other.MaxRound;
      }
      if (other.GameState != 0) {
        GameState = other.GameState;
      }
      if (other.SurplusCardAmount != 0) {
        SurplusCardAmount = other.SurplusCardAmount;
      }
      if (other.CreatedId != 0L) {
        CreatedId = other.CreatedId;
      }
      if (other.NowOperationPlayerId != 0L) {
        NowOperationPlayerId = other.NowOperationPlayerId;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.NowOperation != 0) {
        NowOperation = other.NowOperation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            memberInfo_.AddEntriesFrom(input, _repeated_memberInfo_codec);
            break;
          }
          case 18: {
            RoomId = input.ReadString();
            break;
          }
          case 24: {
            NowRound = input.ReadInt32();
            break;
          }
          case 32: {
            MaxRound = input.ReadInt32();
            break;
          }
          case 40: {
            GameState = input.ReadInt32();
            break;
          }
          case 48: {
            SurplusCardAmount = input.ReadInt32();
            break;
          }
          case 56: {
            CreatedId = input.ReadInt64();
            break;
          }
          case 64: {
            NowOperationPlayerId = input.ReadInt64();
            break;
          }
          case 72: {
            CardId = input.ReadInt32();
            break;
          }
          case 80: {
            NowOperation = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReturnMemberInfo : pb::IMessage<ReturnMemberInfo> {
    private static readonly pb::MessageParser<ReturnMemberInfo> _parser = new pb::MessageParser<ReturnMemberInfo>(() => new ReturnMemberInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReturnMemberInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Waihuzi.Protobuf.RoomReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnMemberInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnMemberInfo(ReturnMemberInfo other) : this() {
      leftHandPaixing_ = other.leftHandPaixing_.Clone();
      members_ = other.members_ != null ? other.members_.Clone() : null;
      putCardIds_ = other.putCardIds_.Clone();
      handCardIds_ = other.handCardIds_.Clone();
      showOperation_ = other.showOperation_ != null ? other.showOperation_.Clone() : null;
      huCardIds_ = other.huCardIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnMemberInfo Clone() {
      return new ReturnMemberInfo(this);
    }

    /// <summary>Field number for the "leftHandPaixing" field.</summary>
    public const int LeftHandPaixingFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Waihuzi.Protobuf.LeftHandPaixingInfo> _repeated_leftHandPaixing_codec
        = pb::FieldCodec.ForMessage(10, global::Waihuzi.Protobuf.LeftHandPaixingInfo.Parser);
    private readonly pbc::RepeatedField<global::Waihuzi.Protobuf.LeftHandPaixingInfo> leftHandPaixing_ = new pbc::RepeatedField<global::Waihuzi.Protobuf.LeftHandPaixingInfo>();
    /// <summary>
    /// 玩家左下角的吃、碰、歪、溜牌型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Waihuzi.Protobuf.LeftHandPaixingInfo> LeftHandPaixing {
      get { return leftHandPaixing_; }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 2;
    private global::Waihuzi.Protobuf.RoomMember members_;
    /// <summary>
    /// 房间成员信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Waihuzi.Protobuf.RoomMember Members {
      get { return members_; }
      set {
        members_ = value;
      }
    }

    /// <summary>Field number for the "putCardIds" field.</summary>
    public const int PutCardIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_putCardIds_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> putCardIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 打出的牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PutCardIds {
      get { return putCardIds_; }
    }

    /// <summary>Field number for the "handCardIds" field.</summary>
    public const int HandCardIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_handCardIds_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> handCardIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家自己的手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HandCardIds {
      get { return handCardIds_; }
    }

    /// <summary>Field number for the "showOperation" field.</summary>
    public const int ShowOperationFieldNumber = 5;
    private global::Waihuzi.Protobuf.ShowOperation showOperation_;
    /// <summary>
    /// 玩家的显示操作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Waihuzi.Protobuf.ShowOperation ShowOperation {
      get { return showOperation_; }
      set {
        showOperation_ = value;
      }
    }

    /// <summary>Field number for the "huCardIds" field.</summary>
    public const int HuCardIdsFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_huCardIds_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> huCardIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家可胡牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HuCardIds {
      get { return huCardIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReturnMemberInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReturnMemberInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!leftHandPaixing_.Equals(other.leftHandPaixing_)) return false;
      if (!object.Equals(Members, other.Members)) return false;
      if(!putCardIds_.Equals(other.putCardIds_)) return false;
      if(!handCardIds_.Equals(other.handCardIds_)) return false;
      if (!object.Equals(ShowOperation, other.ShowOperation)) return false;
      if(!huCardIds_.Equals(other.huCardIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= leftHandPaixing_.GetHashCode();
      if (members_ != null) hash ^= Members.GetHashCode();
      hash ^= putCardIds_.GetHashCode();
      hash ^= handCardIds_.GetHashCode();
      if (showOperation_ != null) hash ^= ShowOperation.GetHashCode();
      hash ^= huCardIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      leftHandPaixing_.WriteTo(output, _repeated_leftHandPaixing_codec);
      if (members_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Members);
      }
      putCardIds_.WriteTo(output, _repeated_putCardIds_codec);
      handCardIds_.WriteTo(output, _repeated_handCardIds_codec);
      if (showOperation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ShowOperation);
      }
      huCardIds_.WriteTo(output, _repeated_huCardIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += leftHandPaixing_.CalculateSize(_repeated_leftHandPaixing_codec);
      if (members_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Members);
      }
      size += putCardIds_.CalculateSize(_repeated_putCardIds_codec);
      size += handCardIds_.CalculateSize(_repeated_handCardIds_codec);
      if (showOperation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShowOperation);
      }
      size += huCardIds_.CalculateSize(_repeated_huCardIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReturnMemberInfo other) {
      if (other == null) {
        return;
      }
      leftHandPaixing_.Add(other.leftHandPaixing_);
      if (other.members_ != null) {
        if (members_ == null) {
          members_ = new global::Waihuzi.Protobuf.RoomMember();
        }
        Members.MergeFrom(other.Members);
      }
      putCardIds_.Add(other.putCardIds_);
      handCardIds_.Add(other.handCardIds_);
      if (other.showOperation_ != null) {
        if (showOperation_ == null) {
          showOperation_ = new global::Waihuzi.Protobuf.ShowOperation();
        }
        ShowOperation.MergeFrom(other.ShowOperation);
      }
      huCardIds_.Add(other.huCardIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            leftHandPaixing_.AddEntriesFrom(input, _repeated_leftHandPaixing_codec);
            break;
          }
          case 18: {
            if (members_ == null) {
              members_ = new global::Waihuzi.Protobuf.RoomMember();
            }
            input.ReadMessage(members_);
            break;
          }
          case 26:
          case 24: {
            putCardIds_.AddEntriesFrom(input, _repeated_putCardIds_codec);
            break;
          }
          case 34:
          case 32: {
            handCardIds_.AddEntriesFrom(input, _repeated_handCardIds_codec);
            break;
          }
          case 42: {
            if (showOperation_ == null) {
              showOperation_ = new global::Waihuzi.Protobuf.ShowOperation();
            }
            input.ReadMessage(showOperation_);
            break;
          }
          case 50:
          case 48: {
            huCardIds_.AddEntriesFrom(input, _repeated_huCardIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家的吃、碰、歪、溜信息
  /// </summary>
  public sealed partial class LeftHandPaixingInfo : pb::IMessage<LeftHandPaixingInfo> {
    private static readonly pb::MessageParser<LeftHandPaixingInfo> _parser = new pb::MessageParser<LeftHandPaixingInfo>(() => new LeftHandPaixingInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeftHandPaixingInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Waihuzi.Protobuf.RoomReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeftHandPaixingInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeftHandPaixingInfo(LeftHandPaixingInfo other) : this() {
      cardIds_ = other.cardIds_.Clone();
      type_ = other.type_;
      cardId_ = other.cardId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeftHandPaixingInfo Clone() {
      return new LeftHandPaixingInfo(this);
    }

    /// <summary>Field number for the "cardIds" field.</summary>
    public const int CardIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_cardIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> cardIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CardIds {
      get { return cardIds_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    /// 1吃、2碰、3歪、4清溜、7歪溜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 3;
    private int cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeftHandPaixingInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeftHandPaixingInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cardIds_.Equals(other.cardIds_)) return false;
      if (Type != other.Type) return false;
      if (CardId != other.CardId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cardIds_.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cardIds_.WriteTo(output, _repeated_cardIds_codec);
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (CardId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CardId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cardIds_.CalculateSize(_repeated_cardIds_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeftHandPaixingInfo other) {
      if (other == null) {
        return;
      }
      cardIds_.Add(other.cardIds_);
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            CardId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
